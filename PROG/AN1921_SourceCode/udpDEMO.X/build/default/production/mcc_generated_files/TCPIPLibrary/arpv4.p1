Version 3.2 HI-TECH Software Intermediate Code
"54 mcc_generated_files/TCPIPLibrary/mac_address.h
[s S29 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S29 . byte1 byte2 byte3 byte4 byte5 byte6 ]
"52
[u S28 `uc -> 6 `i `S29 1 ]
[n S28 . mac_array s ]
"72 mcc_generated_files/TCPIPLibrary/arpv4.c
[s S35 `S28 1 `ul 1 `ui 1 `uc 1 ]
[n S35 . macAddress ipAddress protocolType age ]
"130 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_GetMAC `(v ~T0 @X0 0 ef1`*uc ]
"102 mcc_generated_files/TCPIPLibrary/arpv4.c
[c E474 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .. ]
[n E474 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED EAPoL_PACKET_FAILURE INCORRECT_IPV4_HLEN IPV4_NO_OPTIONS TX_QUEUED  ]
"54
[s S34 `ui 1 `ui 1 `uc 1 `uc 1 `ui 1 `S28 1 `ul 1 `S28 1 `ul 1 ]
[n S34 . htype ptype hlen plen oper sha spa tha tpa ]
"106 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"40 mcc_generated_files/TCPIPLibrary/ip_database.h
[s S33 `ul 1 `ul -> 2 `i `ul 1 `ul 1 `ul 1 `ul -> 2 `i `ul 1 ]
[n S33 . ipv4_myAddress ipv4_dns ipv4_subnetMask ipv4_router ipv4_gateway ipv4_ntpAddress ipv4_tftpAddress ]
"51
[v _ip_database_info `S33 ~T0 @X0 0 e ]
"116 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_WriteStart `(E474 ~T0 @X0 0 ef2`*CS28`ui ]
"21 C:\Program Files (x86)\Microchip\xc8\v1.42\include\string.h
[v ___builtin_memcpy `(*v ~T0 @X0 0 ef3`*v`*Cv`ui ]
[p i ___builtin_memcpy ]
"118 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_WriteBlock `(ui ~T0 @X0 0 ef2`*Cv`ui ]
"125
[v _ETH_Send `(E474 ~T0 @X0 0 ef ]
"57 mcc_generated_files/TCPIPLibrary/mac_address.h
[v _broadcastMAC `CS28 ~T0 @X0 0 e ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 38: typedef signed long int int32_t;
[; ;stdint.h: 45: typedef unsigned char uint8_t;
[; ;stdint.h: 51: typedef unsigned int uint16_t;
[; ;stdint.h: 67: typedef unsigned long int uint32_t;
[; ;stdint.h: 75: typedef signed char int_least8_t;
[; ;stdint.h: 82: typedef signed int int_least16_t;
[; ;stdint.h: 104: typedef signed long int int_least32_t;
[; ;stdint.h: 111: typedef unsigned char uint_least8_t;
[; ;stdint.h: 117: typedef unsigned int uint_least16_t;
[; ;stdint.h: 136: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 145: typedef signed char int_fast8_t;
[; ;stdint.h: 152: typedef signed int int_fast16_t;
[; ;stdint.h: 174: typedef signed long int int_fast32_t;
[; ;stdint.h: 181: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 187: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 206: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 212: typedef int32_t intmax_t;
[; ;stdint.h: 217: typedef uint32_t uintmax_t;
[; ;stdint.h: 222: typedef int16_t intptr_t;
[; ;stdint.h: 227: typedef uint16_t uintptr_t;
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 21: extern void * __builtin_memcpy(void *, const void *, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;tcpip_types.h: 49: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;tcpip_types.h: 51: typedef union
[; ;tcpip_types.h: 52: {
[; ;tcpip_types.h: 53: uint16_t value;
[; ;tcpip_types.h: 54: struct
[; ;tcpip_types.h: 55: {
[; ;tcpip_types.h: 56: unsigned int priorityCodePoint:3;
[; ;tcpip_types.h: 57: unsigned int dropEligible:1;
[; ;tcpip_types.h: 58: unsigned int vlanId:12;
[; ;tcpip_types.h: 59: };
[; ;tcpip_types.h: 60: } tci_t;
[; ;tcpip_types.h: 62: typedef struct
[; ;tcpip_types.h: 63: {
[; ;tcpip_types.h: 64: uint8_t destinationMAC[6];
[; ;tcpip_types.h: 65: uint8_t sourceMAC[6];
[; ;tcpip_types.h: 66: union
[; ;tcpip_types.h: 67: {
[; ;tcpip_types.h: 68: uint16_t type;
[; ;tcpip_types.h: 69: uint16_t length;
[; ;tcpip_types.h: 70: uint16_t tpid;
[; ;tcpip_types.h: 71: }id;
[; ;tcpip_types.h: 76: } ethernetFrame_t;
"78 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;tcpip_types.h: 78: uint8_t Control_Byte = 0x00;
[; ;tcpip_types.h: 131: typedef struct
[; ;tcpip_types.h: 132: {
[; ;tcpip_types.h: 133: unsigned ihl:4;
[; ;tcpip_types.h: 134: unsigned version:4;
[; ;tcpip_types.h: 135: unsigned ecn:2;
[; ;tcpip_types.h: 136: unsigned dscp:6;
[; ;tcpip_types.h: 137: uint16_t length;
[; ;tcpip_types.h: 138: uint16_t identifcation;
[; ;tcpip_types.h: 139: unsigned fragmentOffsetHigh:5;
[; ;tcpip_types.h: 140: unsigned :1;
[; ;tcpip_types.h: 141: unsigned dontFragment:1;
[; ;tcpip_types.h: 142: unsigned moreFragments:1;
[; ;tcpip_types.h: 143: uint8_t fragmentOffsetLow;
[; ;tcpip_types.h: 144: uint8_t timeToLive;
[; ;tcpip_types.h: 145: uint8_t protocol;
[; ;tcpip_types.h: 146: uint16_t headerCksm;
[; ;tcpip_types.h: 147: uint32_t srcIpAddress;
[; ;tcpip_types.h: 148: uint32_t dstIpAddress;
[; ;tcpip_types.h: 151: } ipv4Header_t;
[; ;tcpip_types.h: 154: typedef struct
[; ;tcpip_types.h: 155: {
[; ;tcpip_types.h: 156: uint32_t srcIpAddress;
[; ;tcpip_types.h: 157: uint32_t dstIpAddress;
[; ;tcpip_types.h: 158: uint8_t protocol;
[; ;tcpip_types.h: 159: uint8_t z;
[; ;tcpip_types.h: 160: uint16_t length;
[; ;tcpip_types.h: 161: } ipv4_pseudo_header_t;
[; ;tcpip_types.h: 163: typedef struct
[; ;tcpip_types.h: 164: {
[; ;tcpip_types.h: 165: union
[; ;tcpip_types.h: 166: {
[; ;tcpip_types.h: 167: uint16_t typeCode;
[; ;tcpip_types.h: 168: struct
[; ;tcpip_types.h: 169: {
[; ;tcpip_types.h: 170: uint8_t code;
[; ;tcpip_types.h: 171: uint8_t type;
[; ;tcpip_types.h: 172: };
[; ;tcpip_types.h: 173: };
[; ;tcpip_types.h: 174: uint16_t checksum;
[; ;tcpip_types.h: 175: } icmpHeader_t;
[; ;tcpip_types.h: 178: typedef struct
[; ;tcpip_types.h: 179: {
[; ;tcpip_types.h: 180: union
[; ;tcpip_types.h: 181: {
[; ;tcpip_types.h: 182: uint16_t typeCode;
[; ;tcpip_types.h: 183: struct
[; ;tcpip_types.h: 184: {
[; ;tcpip_types.h: 185: uint8_t code;
[; ;tcpip_types.h: 186: uint8_t type;
[; ;tcpip_types.h: 187: };
[; ;tcpip_types.h: 188: };
[; ;tcpip_types.h: 189: uint16_t checksum;
[; ;tcpip_types.h: 190: } icmpv6Header_t;
[; ;tcpip_types.h: 193: typedef enum
[; ;tcpip_types.h: 194: {
[; ;tcpip_types.h: 195: ECHO_REPLY = 0x0000,
[; ;tcpip_types.h: 197: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;tcpip_types.h: 198: DEST_HOST_UNREACHABLE = 0x0301,
[; ;tcpip_types.h: 199: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;tcpip_types.h: 200: DEST_PORT_UNREACHABLE = 0x0303,
[; ;tcpip_types.h: 201: FRAGMENTATION_REQUIRED = 0x0304,
[; ;tcpip_types.h: 202: SOURCE_ROUTE_FAILED = 0x0305,
[; ;tcpip_types.h: 203: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;tcpip_types.h: 204: SOURCE_HOST_ISOLATED = 0x0307,
[; ;tcpip_types.h: 205: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;tcpip_types.h: 206: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;tcpip_types.h: 207: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;tcpip_types.h: 208: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;tcpip_types.h: 209: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;tcpip_types.h: 210: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;tcpip_types.h: 211: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;tcpip_types.h: 213: SOURCE_QUENCH = 0x0400,
[; ;tcpip_types.h: 215: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;tcpip_types.h: 216: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;tcpip_types.h: 217: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;tcpip_types.h: 218: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;tcpip_types.h: 220: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;tcpip_types.h: 222: ECHO_REQUEST = 0x0800,
[; ;tcpip_types.h: 225: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_1 = 0x082A,
[; ;tcpip_types.h: 226: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_2 = 0x08FC,
[; ;tcpip_types.h: 228: ROUTER_ADVERTISEMENT = 0x0900,
[; ;tcpip_types.h: 229: ROUTER_SOLICITATION = 0x0A00,
[; ;tcpip_types.h: 230: TRACEROUTE = 0x3000
[; ;tcpip_types.h: 231: } icmpTypeCodes_t;
[; ;tcpip_types.h: 233: typedef struct
[; ;tcpip_types.h: 234: {
[; ;tcpip_types.h: 235: uint16_t srcPort;
[; ;tcpip_types.h: 236: uint16_t dstPort;
[; ;tcpip_types.h: 237: uint16_t length;
[; ;tcpip_types.h: 238: uint16_t checksum;
[; ;tcpip_types.h: 239: } udpHeader_t;
[; ;tcpip_types.h: 241: typedef struct
[; ;tcpip_types.h: 242: {
[; ;tcpip_types.h: 243: uint16_t sourcePort;
[; ;tcpip_types.h: 244: uint16_t destPort;
[; ;tcpip_types.h: 245: uint32_t sequenceNumber;
[; ;tcpip_types.h: 246: uint32_t ackNumber;
[; ;tcpip_types.h: 247: union{
[; ;tcpip_types.h: 248: uint8_t byte13;
[; ;tcpip_types.h: 249: struct{
[; ;tcpip_types.h: 250: uint8_t ns:1;
[; ;tcpip_types.h: 251: uint8_t reserved:3;
[; ;tcpip_types.h: 252: uint8_t dataOffset:4;
[; ;tcpip_types.h: 253: };
[; ;tcpip_types.h: 254: };
[; ;tcpip_types.h: 256: union{
[; ;tcpip_types.h: 257: uint8_t flags;
[; ;tcpip_types.h: 258: struct{
[; ;tcpip_types.h: 259: uint8_t fin:1;
[; ;tcpip_types.h: 260: uint8_t syn:1;
[; ;tcpip_types.h: 261: uint8_t rst:1;
[; ;tcpip_types.h: 262: uint8_t psh:1;
[; ;tcpip_types.h: 263: uint8_t ack:1;
[; ;tcpip_types.h: 264: uint8_t urg:1;
[; ;tcpip_types.h: 265: uint8_t ece:1;
[; ;tcpip_types.h: 266: uint8_t cwr:1;
[; ;tcpip_types.h: 267: };
[; ;tcpip_types.h: 268: };
[; ;tcpip_types.h: 270: uint16_t windowSize;
[; ;tcpip_types.h: 271: uint16_t checksum;
[; ;tcpip_types.h: 272: uint16_t urgentPtr;
[; ;tcpip_types.h: 276: } tcpHeader_t;
[; ;tcpip_types.h: 278: typedef struct
[; ;tcpip_types.h: 279: {
[; ;tcpip_types.h: 280: uint16_t version:4;
[; ;tcpip_types.h: 281: uint16_t trafficClass:8;
[; ;tcpip_types.h: 282: uint16_t flowLabel1stNibble:4;
[; ;tcpip_types.h: 284: uint16_t flowLabelRest;
[; ;tcpip_types.h: 285: uint16_t payloadLength;
[; ;tcpip_types.h: 286: uint8_t nextHeader;
[; ;tcpip_types.h: 287: uint8_t hopLimit;
[; ;tcpip_types.h: 288: uint8_t srcAddress[16];
[; ;tcpip_types.h: 289: uint8_t dstAddress[16];
[; ;tcpip_types.h: 291: } ipv6Header_t;
[; ;tcpip_types.h: 294: typedef enum
[; ;tcpip_types.h: 295: {
[; ;tcpip_types.h: 296: HOPOPT_TCPIP = 0,
[; ;tcpip_types.h: 297: ICMP_TCPIP = 1,
[; ;tcpip_types.h: 298: IGMP_TCPIP = 2,
[; ;tcpip_types.h: 299: GGP_TCPIP = 3,
[; ;tcpip_types.h: 300: IPV4_TCPIP = 4,
[; ;tcpip_types.h: 301: ST_TCPIP = 5,
[; ;tcpip_types.h: 302: TCP_TCPIP = 6,
[; ;tcpip_types.h: 303: CBT_TCPIP = 7,
[; ;tcpip_types.h: 304: EGP_TCPIP = 8,
[; ;tcpip_types.h: 305: IGP_TCPIP = 9,
[; ;tcpip_types.h: 306: BBN_RCC_MON_TCPIP = 10,
[; ;tcpip_types.h: 307: NVP_II_TCPIP = 11,
[; ;tcpip_types.h: 308: PUP_TCPIP = 12,
[; ;tcpip_types.h: 309: ARGUS_TCPIP = 13,
[; ;tcpip_types.h: 310: EMCON_TCPIP = 14,
[; ;tcpip_types.h: 311: XNET_TCPIP = 15,
[; ;tcpip_types.h: 312: CHAOS_TCPIP = 16,
[; ;tcpip_types.h: 313: UDP_TCPIP = 17,
[; ;tcpip_types.h: 314: MUX_TCPIP = 18,
[; ;tcpip_types.h: 315: DCN_MEAS_TCPIP = 19,
[; ;tcpip_types.h: 316: HMP_TCPIP = 20,
[; ;tcpip_types.h: 317: PRM_TCPIP = 21,
[; ;tcpip_types.h: 318: XNS_IDP_TCPIP = 22,
[; ;tcpip_types.h: 319: TRUNK_1_TCPIP = 23,
[; ;tcpip_types.h: 320: TRUNK_2_TCPIP = 24,
[; ;tcpip_types.h: 321: LEAF_1_TCPIP = 25,
[; ;tcpip_types.h: 322: LEAF_2_TCPIP = 26,
[; ;tcpip_types.h: 323: RDP_TCPIP = 27,
[; ;tcpip_types.h: 324: IRTP_TCPIP = 28,
[; ;tcpip_types.h: 325: ISO_TP4_TCPIP = 29,
[; ;tcpip_types.h: 326: NETBLT_TCPIP = 30,
[; ;tcpip_types.h: 327: MFE_NSP_TCPIP = 31,
[; ;tcpip_types.h: 328: MERIT_INP_TCPIP = 32,
[; ;tcpip_types.h: 329: DCCP_TCPIP = 33,
[; ;tcpip_types.h: 330: THREEPC_TCPIP = 34,
[; ;tcpip_types.h: 331: IDPR_TCPIP = 35,
[; ;tcpip_types.h: 332: XTP_TCPIP = 36,
[; ;tcpip_types.h: 333: DDP_TCPIP = 37,
[; ;tcpip_types.h: 334: IDPR_CMTP_TCPIP = 38,
[; ;tcpip_types.h: 335: TPpp_TCPIP = 39,
[; ;tcpip_types.h: 336: IL_TCPIP = 40,
[; ;tcpip_types.h: 337: IPV6_TUNNEL_TCPIP = 41,
[; ;tcpip_types.h: 338: SDRP_TCPIP = 42,
[; ;tcpip_types.h: 339: IPV6_Route_TCPIP = 43,
[; ;tcpip_types.h: 340: IPV6_Frag_TCPIP = 44,
[; ;tcpip_types.h: 341: IDRP_TCPIP = 45,
[; ;tcpip_types.h: 342: RSVP_TCPIP = 46,
[; ;tcpip_types.h: 343: GRE_TCPIP = 47,
[; ;tcpip_types.h: 344: DSR_TCPIP = 48,
[; ;tcpip_types.h: 345: BNA_TCPIP = 49,
[; ;tcpip_types.h: 346: ESP_TCPIP = 50,
[; ;tcpip_types.h: 347: AH_TCPIP = 51,
[; ;tcpip_types.h: 348: I_NLSP_TCPIP = 52,
[; ;tcpip_types.h: 349: SWIPE_TCPIP = 53,
[; ;tcpip_types.h: 350: NARP_TCPIP = 54,
[; ;tcpip_types.h: 351: MOBILE_TCPIP = 55,
[; ;tcpip_types.h: 352: TLSP_TCPIP = 56,
[; ;tcpip_types.h: 353: SKIP_TCPIP = 57,
[; ;tcpip_types.h: 354: IPV6_ICMP_TCPIP = 58,
[; ;tcpip_types.h: 355: IPV6_NoNxt_TCPIP = 59,
[; ;tcpip_types.h: 356: IPV6_Opts_TCPIP = 60,
[; ;tcpip_types.h: 357: CFTP_TCPIP = 62,
[; ;tcpip_types.h: 358: SAT_EXPAK_TCPIP = 64,
[; ;tcpip_types.h: 359: KRYPTOLAN_TCPIP = 65,
[; ;tcpip_types.h: 360: RVD_TCPIP = 66,
[; ;tcpip_types.h: 361: IPPC_TCPIP = 67,
[; ;tcpip_types.h: 362: SAT_MON_TCPIP = 69,
[; ;tcpip_types.h: 363: VISA_TCPIP = 70,
[; ;tcpip_types.h: 364: IPCV_TCPIP = 71,
[; ;tcpip_types.h: 365: CPNX_TCPIP = 72,
[; ;tcpip_types.h: 366: CPHB_TCPIP = 73,
[; ;tcpip_types.h: 367: WSN_TCPIP = 74,
[; ;tcpip_types.h: 368: PVP_TCPIP = 75,
[; ;tcpip_types.h: 369: BR_SAT_MON_TCPIP = 76,
[; ;tcpip_types.h: 370: SUN_ND_TCPIP = 77,
[; ;tcpip_types.h: 371: WB_MON_TCPIP = 78,
[; ;tcpip_types.h: 372: WB_EXPAK_TCPIP = 79,
[; ;tcpip_types.h: 373: ISO_IP_TCPIP = 80,
[; ;tcpip_types.h: 374: VMTP_TCPIP = 81,
[; ;tcpip_types.h: 375: SECURE_VMTP_TCPIP = 82,
[; ;tcpip_types.h: 376: VINES_TCPIP = 83,
[; ;tcpip_types.h: 377: TTP_TCPIP = 84,
[; ;tcpip_types.h: 378: IPTM_TCPIP = 84,
[; ;tcpip_types.h: 379: NSFNET_IGP_TCPIP = 85,
[; ;tcpip_types.h: 380: DGP_TCPIP = 86,
[; ;tcpip_types.h: 381: TCF_TCPIP = 87,
[; ;tcpip_types.h: 382: EIGRP_TCPIP = 88,
[; ;tcpip_types.h: 383: OSPFIGP_TCPIP = 89,
[; ;tcpip_types.h: 384: Sprite_RPC_TCPIP = 90,
[; ;tcpip_types.h: 385: LARP_TCPIP = 91,
[; ;tcpip_types.h: 386: MTP_TCPIP = 92,
[; ;tcpip_types.h: 387: AX25_TCPIP = 93,
[; ;tcpip_types.h: 388: IPIP_TCPIP = 94,
[; ;tcpip_types.h: 389: MICP_TCPIP = 95,
[; ;tcpip_types.h: 390: SCC_SP_TCPIP = 96,
[; ;tcpip_types.h: 391: ETHERIP_TCPIP = 97,
[; ;tcpip_types.h: 392: ENCAP_TCPIP = 98,
[; ;tcpip_types.h: 393: GMTP_TCPIP = 100,
[; ;tcpip_types.h: 394: IFMP_TCPIP = 101,
[; ;tcpip_types.h: 395: PNNI_TCPIP = 102,
[; ;tcpip_types.h: 396: PIM_TCPIP = 103,
[; ;tcpip_types.h: 397: ARIS_TCPIP = 104,
[; ;tcpip_types.h: 398: SCPS_TCPIP = 105,
[; ;tcpip_types.h: 399: QNX_TCPIP = 106,
[; ;tcpip_types.h: 400: A_N_TCPIP = 107,
[; ;tcpip_types.h: 401: IPComp_TCPIP = 108,
[; ;tcpip_types.h: 402: SNP_TCPIP = 109,
[; ;tcpip_types.h: 403: Compaq_Peer_TCPIP = 110,
[; ;tcpip_types.h: 404: IPX_in_IP_TCPIP = 111,
[; ;tcpip_types.h: 405: VRRP_TCPIP = 112,
[; ;tcpip_types.h: 406: PGM_TCPIP = 113,
[; ;tcpip_types.h: 407: L2TP_TCPIP = 115,
[; ;tcpip_types.h: 408: DDX_TCPIP = 116,
[; ;tcpip_types.h: 409: IATP_TCPIP = 117,
[; ;tcpip_types.h: 410: STP_TCPIP = 118,
[; ;tcpip_types.h: 411: SRP_TCPIP = 119,
[; ;tcpip_types.h: 412: UTI_TCPIP = 120,
[; ;tcpip_types.h: 413: SMP_TCPIP = 121,
[; ;tcpip_types.h: 414: SM_TCPIP = 122,
[; ;tcpip_types.h: 415: PTP_TCPIP = 123,
[; ;tcpip_types.h: 416: ISIS_TCPIP = 124,
[; ;tcpip_types.h: 417: FIRE_TCPIP = 125,
[; ;tcpip_types.h: 418: CRTP_TCPIP = 126,
[; ;tcpip_types.h: 419: CRUDP_TCPIP = 127,
[; ;tcpip_types.h: 420: SSCOPMCE_TCPIP = 128,
[; ;tcpip_types.h: 421: IPLT_TCPIP = 129,
[; ;tcpip_types.h: 422: SPS_TCPIP = 130,
[; ;tcpip_types.h: 423: PIPE_TCPIP = 131,
[; ;tcpip_types.h: 424: SCTP_TCPIP = 132,
[; ;tcpip_types.h: 425: FC_TCPIP = 133
[; ;tcpip_types.h: 426: } ipProtocolNumbers;
[; ;tcpip_types.h: 428: typedef struct
[; ;tcpip_types.h: 429: {
[; ;tcpip_types.h: 430: union{
[; ;tcpip_types.h: 431: uint32_t s_addr;
[; ;tcpip_types.h: 432: uint8_t s_addr_byte[4];
[; ;tcpip_types.h: 433: };
[; ;tcpip_types.h: 434: }inAddr_t;
[; ;tcpip_types.h: 436: typedef struct
[; ;tcpip_types.h: 437: {
[; ;tcpip_types.h: 438: union {
[; ;tcpip_types.h: 439: uint8_t s6_u8[16];
[; ;tcpip_types.h: 440: uint16_t s6_u16[8];
[; ;tcpip_types.h: 441: uint32_t s6_u32[4];
[; ;tcpip_types.h: 442: } s6;
[; ;tcpip_types.h: 446: }in6Addr_t;
[; ;tcpip_types.h: 448: typedef struct
[; ;tcpip_types.h: 449: {
[; ;tcpip_types.h: 450: uint16_t port;
[; ;tcpip_types.h: 451: inAddr_t addr;
[; ;tcpip_types.h: 452: }sockaddr_in_t;
[; ;tcpip_types.h: 454: typedef struct {
[; ;tcpip_types.h: 456: uint16_t in6_port;
[; ;tcpip_types.h: 457: uint32_t in6_flowinfo;
[; ;tcpip_types.h: 458: in6Addr_t in6_addr;
[; ;tcpip_types.h: 459: uint32_t in6_scope_id;
[; ;tcpip_types.h: 460: }sockaddr_in6_t;
[; ;tcpip_types.h: 462: extern const char *network_errors[];
[; ;tcpip_types.h: 464: typedef enum
[; ;tcpip_types.h: 465: {
[; ;tcpip_types.h: 466: ERROR =0,
[; ;tcpip_types.h: 467: SUCCESS,
[; ;tcpip_types.h: 468: LINK_NOT_FOUND,
[; ;tcpip_types.h: 469: BUFFER_BUSY,
[; ;tcpip_types.h: 470: TX_LOGIC_NOT_IDLE,
[; ;tcpip_types.h: 471: MAC_NOT_FOUND,
[; ;tcpip_types.h: 472: IP_WRONG_VERSION,
[; ;tcpip_types.h: 473: IPV4_CHECKSUM_FAILS,
[; ;tcpip_types.h: 474: DEST_IP_NOT_MATCHED,
[; ;tcpip_types.h: 475: ICMP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 476: UDP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 477: TCP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 478: DMA_TIMEOUT,
[; ;tcpip_types.h: 479: PORT_NOT_AVAILABLE,
[; ;tcpip_types.h: 480: ARP_IP_NOT_MATCHED,
[; ;tcpip_types.h: 481: EAPoL_PACKET_FAILURE,
[; ;tcpip_types.h: 482: INCORRECT_IPV4_HLEN,
[; ;tcpip_types.h: 483: IPV4_NO_OPTIONS,
[; ;tcpip_types.h: 484: TX_QUEUED
[; ;tcpip_types.h: 485: }error_msg;
[; ;tcpip_types.h: 487: typedef struct
[; ;tcpip_types.h: 488: {
[; ;tcpip_types.h: 489: inAddr_t dest_addr;
[; ;tcpip_types.h: 490: }destIP_t;
[; ;tcpip_types.h: 493: typedef int8_t socklistsize_t;
[; ;tcpip_types.h: 495: typedef void (*ip_receive_function_ptr)(int);
[; ;network.h: 58: void Network_Init(void);
[; ;network.h: 59: void Network_Read(void);
[; ;network.h: 60: void Network_Manage(void);
[; ;network.h: 61: void Network_WaitForLink(void);
[; ;network.h: 62: void timersInit();
[; ;mac_address.h: 51: typedef union
[; ;mac_address.h: 52: {
[; ;mac_address.h: 53: uint8_t mac_array[6];
[; ;mac_address.h: 54: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;mac_address.h: 55: } mac48Address_t;
[; ;mac_address.h: 57: extern const mac48Address_t broadcastMAC;
[; ;mac_address.h: 58: extern const mac48Address_t macAddress;
[; ;mac_address.h: 59: extern mac48Address_t hostMacAddress;
[; ;mac_address.h: 61: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_driver.h: 49: typedef struct
[; ;ethernet_driver.h: 50: {
[; ;ethernet_driver.h: 51: uint16_t byteCount;
[; ;ethernet_driver.h: 52: unsigned long_drop_event:1;
[; ;ethernet_driver.h: 53: unsigned :1;
[; ;ethernet_driver.h: 54: unsigned excessCarrierEvent:1;
[; ;ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_driver.h: 56: unsigned crcError:1;
[; ;ethernet_driver.h: 57: unsigned lengthCheckError:1;
[; ;ethernet_driver.h: 58: unsigned lengthLongError:1;
[; ;ethernet_driver.h: 59: unsigned rxOK:1;
[; ;ethernet_driver.h: 60: unsigned rxMulticast:1;
[; ;ethernet_driver.h: 61: unsigned rxBroadcast:1;
[; ;ethernet_driver.h: 62: unsigned dribbleNibble:1;
[; ;ethernet_driver.h: 63: unsigned controlFrame:1;
[; ;ethernet_driver.h: 64: unsigned pauseControlFrame:1;
[; ;ethernet_driver.h: 65: unsigned unknownContrlFrame:1;
[; ;ethernet_driver.h: 66: unsigned vlanTagPresent:1;
[; ;ethernet_driver.h: 67: unsigned zero:1;
[; ;ethernet_driver.h: 68: }receiveStatusVector_t;
[; ;ethernet_driver.h: 70: typedef struct
[; ;ethernet_driver.h: 71: {
[; ;ethernet_driver.h: 72: unsigned error:1;
[; ;ethernet_driver.h: 73: unsigned pktReady:1;
[; ;ethernet_driver.h: 74: unsigned up:1;
[; ;ethernet_driver.h: 75: unsigned idle:1;
[; ;ethernet_driver.h: 76: unsigned linkChange:1;
[; ;ethernet_driver.h: 77: unsigned bufferBusy:1;
[; ;ethernet_driver.h: 78: unsigned :3;
[; ;ethernet_driver.h: 79: uint16_t saveRDPT;
[; ;ethernet_driver.h: 80: uint16_t saveWRPT;
[; ;ethernet_driver.h: 81: } ethernetDriver_t;
[; ;ethernet_driver.h: 83: typedef struct
[; ;ethernet_driver.h: 84: {
[; ;ethernet_driver.h: 85: uint16_t flags;
[; ;ethernet_driver.h: 86: uint16_t packetStart;
[; ;ethernet_driver.h: 87: uint16_t packetEnd;
[; ;ethernet_driver.h: 89: void *prevPacket;
[; ;ethernet_driver.h: 90: void *nextPacket;
[; ;ethernet_driver.h: 91: } txPacket_t;
[; ;ethernet_driver.h: 93: extern volatile ethernetDriver_t ethData;
[; ;ethernet_driver.h: 99: void ETH_Init(void);
[; ;ethernet_driver.h: 100: void ETH_EventHandler(void);
[; ;ethernet_driver.h: 101: void ETH_NextPacketUpdate();
[; ;ethernet_driver.h: 102: void ETH_ResetReceiver(void);
[; ;ethernet_driver.h: 103: void ETH_SendSystemReset(void);
[; ;ethernet_driver.h: 106: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_driver.h: 107: uint8_t ETH_Read8(void);
[; ;ethernet_driver.h: 108: uint16_t ETH_Read16(void);
[; ;ethernet_driver.h: 109: uint32_t ETH_Read24(void);
[; ;ethernet_driver.h: 110: uint32_t ETH_Read32(void);
[; ;ethernet_driver.h: 111: void ETH_Dump(uint16_t);
[; ;ethernet_driver.h: 112: void ETH_Flush(void);
[; ;ethernet_driver.h: 114: uint16_t ETH_GetFreeTxBufferSize(void);
[; ;ethernet_driver.h: 116: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_driver.h: 117: uint16_t ETH_WriteString(const char *string);
[; ;ethernet_driver.h: 118: uint16_t ETH_WriteBlock(const void *, uint16_t);
[; ;ethernet_driver.h: 119: void ETH_Write8(uint8_t);
[; ;ethernet_driver.h: 120: void ETH_Write16(uint16_t);
[; ;ethernet_driver.h: 121: void ETH_Write24(uint32_t data);
[; ;ethernet_driver.h: 122: void ETH_Write32(uint32_t);
[; ;ethernet_driver.h: 123: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_driver.h: 124: error_msg ETH_Copy(uint16_t);
[; ;ethernet_driver.h: 125: error_msg ETH_Send(void);
[; ;ethernet_driver.h: 127: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 128: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 130: void ETH_GetMAC(uint8_t *);
[; ;ethernet_driver.h: 131: void ETH_SetMAC(uint8_t *);
[; ;ethernet_driver.h: 132: uint16_t ETH_GetWritePtr();
[; ;ethernet_driver.h: 133: void ETH_SaveRDPT(void);
[; ;ethernet_driver.h: 134: void ETH_ResetReadPtr();
[; ;ethernet_driver.h: 135: uint16_t ETH_GetReadPtr(void);
[; ;ethernet_driver.h: 136: void ETH_SetReadPtr(uint16_t);
[; ;ethernet_driver.h: 137: uint16_t ETH_GetStatusVectorByteCount(void);
[; ;ethernet_driver.h: 138: void ETH_SetStatusVectorByteCount(uint16_t);
[; ;ethernet_driver.h: 140: void ETH_ResetByteCount(void);
[; ;ethernet_driver.h: 141: uint16_t ETH_GetByteCount(void);
[; ;ethernet_driver.h: 143: uint16_t ETH_ReadSavedWRPT(void);
[; ;ethernet_driver.h: 144: void ETH_SaveWRPT(void);
[; ;ethernet_driver.h: 145: void ETH_SetRxByteCount(uint16_t count);
[; ;ethernet_driver.h: 146: uint16_t ETH_GetRxByteCount();
[; ;ethernet_driver.h: 148: bool ETH_CheckLinkUp();
[; ;ethernet_driver.h: 150: void ETH_TxReset(void);
[; ;ethernet_driver.h: 151: void ETH_MoveBackReadPtr(uint16_t offset);
"58 mcc_generated_files/TCPIPLibrary/tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 80 `c
-> 73 `c
-> 67 `c
-> 49 `c
-> 54 `c
-> 70 `c
-> 49 `c
-> 56 `c
-> 51 `c
-> 52 `c
-> 54 `c
-> 32 `c
-> 69 `c
-> 116 `c
-> 104 `c
-> 101 `c
-> 114 `c
-> 110 `c
-> 101 `c
-> 116 `c
-> 0 `c
..
]
[; ;tcpip_config.h: 58: const char dhcpName[] = "PIC16F18346 Ethernet";
[; ;arpv4.h: 57: void ARPV4_Init(void);
[; ;arpv4.h: 69: error_msg ARPV4_Packet(void);
[; ;arpv4.h: 75: void ARPV4_Update(void);
[; ;arpv4.h: 86: mac48Address_t* ARPV4_Lookup(uint32_t ipAddress);
[; ;arpv4.h: 99: error_msg ARPV4_Request(uint32_t destAddress);
[; ;ipv4.h: 66: void IPV4_Init(void);
[; ;ipv4.h: 73: error_msg IPV4_Packet(void);
[; ;ipv4.h: 90: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;ipv4.h: 101: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;ipv4.h: 115: error_msg IPV4_Send(uint16_t payloadLength);
[; ;ipv4.h: 122: uint16_t IPV4_GetStartPosition(void);
[; ;ipv4.h: 129: uint16_t IPV4_GetDatagramLength(void);
[; ;ip_database.h: 40: typedef struct {
[; ;ip_database.h: 41: uint32_t ipv4_myAddress;
[; ;ip_database.h: 42: uint32_t ipv4_dns[2];
[; ;ip_database.h: 43: uint32_t ipv4_subnetMask;
[; ;ip_database.h: 44: uint32_t ipv4_router;
[; ;ip_database.h: 45: uint32_t ipv4_gateway;
[; ;ip_database.h: 46: uint32_t ipv4_ntpAddress[2];
[; ;ip_database.h: 47: uint32_t ipv4_tftpAddress;
[; ;ip_database.h: 48: } ip_db_info_t;
[; ;ip_database.h: 51: extern ip_db_info_t ip_database_info;
[; ;ip_database.h: 72: void ipdb_init(void);
[; ;ip_database.h: 73: uint32_t makeStrToIpv4Address(char *str);
[; ;ip_database.h: 74: char *makeIpv4AddresstoStr(uint32_t addr);
[; ;arpv4.c: 53: typedef struct
[; ;arpv4.c: 54: {
[; ;arpv4.c: 55: uint16_t htype;
[; ;arpv4.c: 56: uint16_t ptype;
[; ;arpv4.c: 57: uint8_t hlen;
[; ;arpv4.c: 58: uint8_t plen;
[; ;arpv4.c: 59: uint16_t oper;
[; ;arpv4.c: 60: mac48Address_t sha;
[; ;arpv4.c: 61: uint32_t spa;
[; ;arpv4.c: 62: mac48Address_t tha;
[; ;arpv4.c: 63: uint32_t tpa;
[; ;arpv4.c: 64: } arpHeader_t;
[; ;arpv4.c: 71: typedef struct
[; ;arpv4.c: 72: {
[; ;arpv4.c: 73: mac48Address_t macAddress;
[; ;arpv4.c: 74: uint32_t ipAddress;
[; ;arpv4.c: 75: uint16_t protocolType;
[; ;arpv4.c: 76: uint8_t age;
[; ;arpv4.c: 77: } arpMap_t;
"79 mcc_generated_files/TCPIPLibrary/arpv4.c
[v _hostMacAddress `S28 ~T0 @X0 1 e ]
[; ;arpv4.c: 79: mac48Address_t hostMacAddress;
"81
[v _arpMap `S35 ~T0 @X0 -> 8 `i e ]
[; ;arpv4.c: 81: arpMap_t arpMap[8];
"87
[v _ARPV4_Init `(v ~T0 @X0 1 ef ]
"88
{
[; ;arpv4.c: 87: void ARPV4_Init(void)
[; ;arpv4.c: 88: {
[e :U _ARPV4_Init ]
[f ]
[; ;arpv4.c: 89: for(uint8_t x= 0 ; x < 8; x++)
"89
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 37  ]
[e $U 38  ]
"90
[e :U 37 ]
[; ;arpv4.c: 90: {
{
[; ;arpv4.c: 91: ((char *)arpMap)[x] = 0;
"91
[e = *U + -> &U _arpMap `*uc * -> _x `ux -> -> # *U -> &U _arpMap `*uc `ui `ux -> -> 0 `i `uc ]
"92
}
"89
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 37  ]
[e :U 38 ]
"92
}
[; ;arpv4.c: 92: }
[; ;arpv4.c: 93: ETH_GetMAC((char*)&hostMacAddress);
"93
[e ( _ETH_GetMAC (1 -> &U _hostMacAddress `*uc ]
[; ;arpv4.c: 94: }
"94
[e :UE 36 ]
}
"101
[v _ARPV4_Packet `(E474 ~T0 @X0 1 ef ]
"102
{
[; ;arpv4.c: 101: error_msg ARPV4_Packet(void)
[; ;arpv4.c: 102: {
[e :U _ARPV4_Packet ]
[f ]
"103
[v _header `S34 ~T0 @X0 1 a ]
"104
[v _entryPointer `*S35 ~T0 @X0 1 a ]
"105
[v _mergeFlag `uc ~T0 @X0 1 a ]
"106
[v _length `ui ~T0 @X0 1 a ]
"107
[v _ret `E474 ~T0 @X0 1 a ]
[; ;arpv4.c: 103: arpHeader_t header;
[; ;arpv4.c: 104: arpMap_t *entryPointer;
[; ;arpv4.c: 105: bool mergeFlag;
[; ;arpv4.c: 106: uint16_t length;
[; ;arpv4.c: 107: error_msg ret;
[; ;arpv4.c: 109: ret = ERROR;
"109
[e = _ret . `E474 0 ]
[; ;arpv4.c: 111: length = ETH_ReadBlock((char*)&header,sizeof(arpHeader_t));
"111
[e = _length ( _ETH_ReadBlock (2 , -> -> &U _header `*uc `*v -> # `S34 `ui ]
[; ;arpv4.c: 112: if(length == sizeof(arpHeader_t))
"112
[e $ ! == _length -> # `S34 `ui 41  ]
[; ;arpv4.c: 113: {
"113
{
[; ;arpv4.c: 115: mergeFlag = 0;
"115
[e = _mergeFlag -> -> 0 `i `uc ]
[; ;arpv4.c: 116: entryPointer = arpMap;
"116
[e = _entryPointer &U _arpMap ]
[; ;arpv4.c: 118: for(uint8_t x=8; x > 0; x--)
"118
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 8 `i `uc ]
[e $ > -> _x `i -> 0 `i 42  ]
[e $U 43  ]
"119
[e :U 42 ]
[; ;arpv4.c: 119: {
{
[; ;arpv4.c: 120: if( (header.spa == entryPointer->ipAddress) && (header.ptype == entryPointer->protocolType) )
"120
[e $ ! && == . _header 6 . *U _entryPointer 1 == . _header 1 . *U _entryPointer 2 45  ]
[; ;arpv4.c: 121: {
"121
{
[; ;arpv4.c: 122: entryPointer->age = 0;
"122
[e = . *U _entryPointer 3 -> -> 0 `i `uc ]
[; ;arpv4.c: 123: entryPointer->macAddress.s = header.sha.s;
"123
[e = . . *U _entryPointer 0 1 . . _header 5 1 ]
[; ;arpv4.c: 124: mergeFlag = 1;
"124
[e = _mergeFlag -> -> 1 `i `uc ]
[; ;arpv4.c: 125: break;
"125
[e $U 43  ]
"126
}
[e :U 45 ]
[; ;arpv4.c: 126: }
[; ;arpv4.c: 127: entryPointer++;
"127
[e ++ _entryPointer * -> -> 1 `i `x -> -> # *U _entryPointer `i `x ]
"128
}
"118
[e -- _x -> -> 1 `i `uc ]
[e $ > -> _x `i -> 0 `i 42  ]
[e :U 43 ]
"128
}
[; ;arpv4.c: 128: }
[; ;arpv4.c: 130: if((ip_database_info.ipv4_myAddress) && ((ip_database_info.ipv4_myAddress) == ((((uint32_t)header.tpa&(uint32_t)0xff000000) >> 24) | (((uint32_t)header.tpa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.tpa&(uint32_t)0x0000ff00) << 8) | (((uint32_t
"130
[e $ ! && != . _ip_database_info 0 -> -> 0 `i `ul == . _ip_database_info 0 | | | >> & . _header 8 -> -16777216 `ul -> 24 `i >> & . _header 8 -> -> 16711680 `l `ul -> 8 `i << & . _header 8 -> -> 65280 `ui `ul -> 8 `i << & . _header 8 -> -> 255 `i `ul -> 24 `i 46  ]
[; ;arpv4.c: 131: {
"131
{
[; ;arpv4.c: 132: if(!mergeFlag)
"132
[e $ ! ! != -> _mergeFlag `i -> -> -> 0 `i `uc `i 47  ]
[; ;arpv4.c: 133: {
"133
{
[; ;arpv4.c: 135: entryPointer = arpMap;
"135
[e = _entryPointer &U _arpMap ]
"136
[v _arpPtr `*S35 ~T0 @X0 1 a ]
[; ;arpv4.c: 136: arpMap_t *arpPtr = arpMap;
[e = _arpPtr &U _arpMap ]
[; ;arpv4.c: 137: for(uint8_t x=8; x !=0; x--)
"137
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 8 `i `uc ]
[e $ != -> _x `i -> 0 `i 48  ]
[e $U 49  ]
"138
[e :U 48 ]
[; ;arpv4.c: 138: {
{
[; ;arpv4.c: 139: if(entryPointer->age < arpPtr->age)
"139
[e $ ! < -> . *U _entryPointer 3 `i -> . *U _arpPtr 3 `i 51  ]
[; ;arpv4.c: 140: {
"140
{
[; ;arpv4.c: 141: entryPointer = arpPtr;
"141
[e = _entryPointer _arpPtr ]
"142
}
[e :U 51 ]
[; ;arpv4.c: 142: }
[; ;arpv4.c: 144: arpPtr++;
"144
[e ++ _arpPtr * -> -> 1 `i `x -> -> # *U _arpPtr `i `x ]
"145
}
"137
[e -- _x -> -> 1 `i `uc ]
[e $ != -> _x `i -> 0 `i 48  ]
[e :U 49 ]
"145
}
[; ;arpv4.c: 145: }
[; ;arpv4.c: 148: entryPointer->age = 0;
"148
[e = . *U _entryPointer 3 -> -> 0 `i `uc ]
[; ;arpv4.c: 149: entryPointer->macAddress.s = header.sha.s;
"149
[e = . . *U _entryPointer 0 1 . . _header 5 1 ]
[; ;arpv4.c: 150: entryPointer->ipAddress = ((((uint32_t)header.spa&(uint32_t)0xff000000) >> 24) | (((uint32_t)header.spa&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)header.spa&(uint32_t)0x0000ff00) << 8) | (((uint32_t)header.spa&(uint32_t)0x000000ff) << 24) );
"150
[e = . *U _entryPointer 1 | | | >> & . _header 6 -> -16777216 `ul -> 24 `i >> & . _header 6 -> -> 16711680 `l `ul -> 8 `i << & . _header 6 -> -> 65280 `ui `ul -> 8 `i << & . _header 6 -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 151: entryPointer->protocolType = header.ptype;
"151
[e = . *U _entryPointer 2 . _header 1 ]
"152
}
[e :U 47 ]
[; ;arpv4.c: 152: }
[; ;arpv4.c: 153: if(header.oper == ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & (uint16_t)0x00FF) << 8)))
"153
[e $ ! == . _header 4 | >> & -> -> 1 `i `ui -> 65280 `ui -> 8 `i << & -> -> 1 `i `ui -> -> 255 `i `ui -> 8 `i 52  ]
[; ;arpv4.c: 154: {
"154
{
[; ;arpv4.c: 155: ret = ETH_WriteStart(&header.sha ,0x0806);
"155
[e = _ret ( _ETH_WriteStart (2 , -> &U . _header 5 `*CS28 -> -> 2054 `i `ui ]
[; ;arpv4.c: 156: if(ret == SUCCESS)
"156
[e $ ! == -> _ret `i -> . `E474 1 `i 53  ]
[; ;arpv4.c: 157: {
"157
{
[; ;arpv4.c: 159: header.tha.s = header.sha.s;
"159
[e = . . _header 7 1 . . _header 5 1 ]
[; ;arpv4.c: 160: __builtin_memcpy((void*)&header.sha.s,(void*)&hostMacAddress.s,sizeof(mac48Address_t));
"160
[e ( ___builtin_memcpy (3 , , -> &U . . _header 5 1 `*v -> -> &U . _hostMacAddress 1 `*v `*Cv -> # `S28 `ui ]
[; ;arpv4.c: 161: header.tpa = header.spa;
"161
[e = . _header 8 . _header 6 ]
[; ;arpv4.c: 162: header.spa = ((((uint32_t)(ip_database_info.ipv4_myAddress)&(uint32_t)0xff000000) >> 24) | (((uint32_t)(ip_database_info.ipv4_myAddress)&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)(ip_database_info.ipv4_myAddress)&(uint32_t)0x0000ff00) << 8) | (((uint
"162
[e = . _header 6 | | | >> & . _ip_database_info 0 -> -16777216 `ul -> 24 `i >> & . _ip_database_info 0 -> -> 16711680 `l `ul -> 8 `i << & . _ip_database_info 0 -> -> 65280 `ui `ul -> 8 `i << & . _ip_database_info 0 -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 163: header.oper = ((((uint16_t)2 & (uint16_t)0xFF00) >> 8) | (((uint16_t)2 & (uint16_t)0x00FF) << 8));
"163
[e = . _header 4 | >> & -> -> 2 `i `ui -> 65280 `ui -> 8 `i << & -> -> 2 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 164: ETH_WriteBlock((char*)&header,sizeof(header));
"164
[e ( _ETH_WriteBlock (2 , -> -> &U _header `*uc `*Cv -> # _header `ui ]
[; ;arpv4.c: 167: ret = ETH_Send();
"167
[e = _ret ( _ETH_Send ..  ]
"168
}
[e :U 53 ]
"169
}
[e :U 52 ]
"170
}
[; ;arpv4.c: 168: }
[; ;arpv4.c: 169: }
[; ;arpv4.c: 170: }
[e $U 54  ]
"171
[e :U 46 ]
[; ;arpv4.c: 171: else
[; ;arpv4.c: 172: {
"172
{
[; ;arpv4.c: 173: ret = ARP_IP_NOT_MATCHED;
"173
[e = _ret . `E474 14 ]
"174
}
[e :U 54 ]
"175
}
[e :U 41 ]
[; ;arpv4.c: 174: }
[; ;arpv4.c: 175: }
[; ;arpv4.c: 176: return ret;
"176
[e ) _ret ]
[e $UE 40  ]
[; ;arpv4.c: 177: }
"177
[e :UE 40 ]
}
"183
[v _ARPV4_Update `(v ~T0 @X0 1 ef ]
"184
{
[; ;arpv4.c: 183: void ARPV4_Update(void)
[; ;arpv4.c: 184: {
[e :U _ARPV4_Update ]
[f ]
"185
[v _entryPointer `*S35 ~T0 @X0 1 a ]
[; ;arpv4.c: 185: arpMap_t *entryPointer = arpMap;
[e = _entryPointer &U _arpMap ]
[; ;arpv4.c: 186: for(uint8_t x=0; x < 8; x++)
"186
{
[v _x `uc ~T0 @X0 1 a ]
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 56  ]
[e $U 57  ]
"187
[e :U 56 ]
[; ;arpv4.c: 187: {
{
[; ;arpv4.c: 188: entryPointer->age ++;
"188
[e ++ . *U _entryPointer 3 -> -> 1 `i `uc ]
[; ;arpv4.c: 189: entryPointer ++;
"189
[e ++ _entryPointer * -> -> 1 `i `x -> -> # *U _entryPointer `i `x ]
"190
}
"186
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 56  ]
[e :U 57 ]
"190
}
[; ;arpv4.c: 190: }
[; ;arpv4.c: 191: }
"191
[e :UE 55 ]
}
"198
[v _ARPV4_Request `(E474 ~T0 @X0 1 ef1`ul ]
"199
{
[; ;arpv4.c: 198: error_msg ARPV4_Request(uint32_t destAddress)
[; ;arpv4.c: 199: {
[e :U _ARPV4_Request ]
"198
[v _destAddress `ul ~T0 @X0 1 r1 ]
"199
[f ]
"200
[v _ret `E474 ~T0 @X0 1 a ]
[; ;arpv4.c: 200: error_msg ret;
[; ;arpv4.c: 202: ret = ERROR;
"202
[e = _ret . `E474 0 ]
"204
[v _header `S34 ~T0 @X0 1 a ]
[; ;arpv4.c: 204: arpHeader_t header;
[; ;arpv4.c: 205: header.htype = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & (uint16_t)0x00FF) << 8));
"205
[e = . _header 0 | >> & -> -> 1 `i `ui -> 65280 `ui -> 8 `i << & -> -> 1 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 206: header.ptype = ((((uint16_t)0x0800 & (uint16_t)0xFF00) >> 8) | (((uint16_t)0x0800 & (uint16_t)0x00FF) << 8));
"206
[e = . _header 1 | >> & -> -> 2048 `i `ui -> 65280 `ui -> 8 `i << & -> -> 2048 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 207: header.hlen = 6;
"207
[e = . _header 2 -> -> 6 `i `uc ]
[; ;arpv4.c: 208: header.plen = 4;
"208
[e = . _header 3 -> -> 4 `i `uc ]
[; ;arpv4.c: 209: header.oper = ((((uint16_t)1 & (uint16_t)0xFF00) >> 8) | (((uint16_t)1 & (uint16_t)0x00FF) << 8));
"209
[e = . _header 4 | >> & -> -> 1 `i `ui -> 65280 `ui -> 8 `i << & -> -> 1 `i `ui -> -> 255 `i `ui -> 8 `i ]
[; ;arpv4.c: 210: __builtin_memcpy((void*)&header.sha,(void*)&hostMacAddress,sizeof(mac48Address_t));
"210
[e ( ___builtin_memcpy (3 , , -> &U . _header 5 `*v -> -> &U _hostMacAddress `*v `*Cv -> # `S28 `ui ]
[; ;arpv4.c: 211: header.spa = ((((uint32_t)(ip_database_info.ipv4_myAddress)&(uint32_t)0xff000000) >> 24) | (((uint32_t)(ip_database_info.ipv4_myAddress)&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)(ip_database_info.ipv4_myAddress)&(uint32_t)0x0000ff00) << 8) | (((uint
"211
[e = . _header 6 | | | >> & . _ip_database_info 0 -> -16777216 `ul -> 24 `i >> & . _ip_database_info 0 -> -> 16711680 `l `ul -> 8 `i << & . _ip_database_info 0 -> -> 65280 `ui `ul -> 8 `i << & . _ip_database_info 0 -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 212: header.tpa= ((((uint32_t)destAddress&(uint32_t)0xff000000) >> 24) | (((uint32_t)destAddress&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)destAddress&(uint32_t)0x0000ff00) << 8) | (((uint32_t)destAddress&(uint32_t)0x000000ff) << 24) );
"212
[e = . _header 8 | | | >> & _destAddress -> -16777216 `ul -> 24 `i >> & _destAddress -> -> 16711680 `l `ul -> 8 `i << & _destAddress -> -> 65280 `ui `ul -> 8 `i << & _destAddress -> -> 255 `i `ul -> 24 `i ]
[; ;arpv4.c: 213: header.tha.s.byte1 = 0;
"213
[e = . . . _header 7 1 0 -> -> 0 `i `uc ]
[; ;arpv4.c: 214: header.tha.s.byte2 = 0;
"214
[e = . . . _header 7 1 1 -> -> 0 `i `uc ]
[; ;arpv4.c: 215: header.tha.s.byte3 = 0;
"215
[e = . . . _header 7 1 2 -> -> 0 `i `uc ]
[; ;arpv4.c: 216: header.tha.s.byte4 = 0;
"216
[e = . . . _header 7 1 3 -> -> 0 `i `uc ]
[; ;arpv4.c: 217: header.tha.s.byte5 = 0;
"217
[e = . . . _header 7 1 4 -> -> 0 `i `uc ]
[; ;arpv4.c: 218: header.tha.s.byte6 = 0;
"218
[e = . . . _header 7 1 5 -> -> 0 `i `uc ]
[; ;arpv4.c: 220: ret = ETH_WriteStart(&broadcastMAC,0x0806);
"220
[e = _ret ( _ETH_WriteStart (2 , &U _broadcastMAC -> -> 2054 `i `ui ]
[; ;arpv4.c: 221: if(ret == SUCCESS)
"221
[e $ ! == -> _ret `i -> . `E474 1 `i 60  ]
[; ;arpv4.c: 222: {
"222
{
[; ;arpv4.c: 223: ETH_WriteBlock((char*)&header,sizeof(arpHeader_t));
"223
[e ( _ETH_WriteBlock (2 , -> -> &U _header `*uc `*Cv -> # `S34 `ui ]
[; ;arpv4.c: 224: ret = ETH_Send();
"224
[e = _ret ( _ETH_Send ..  ]
[; ;arpv4.c: 225: if(ret == SUCCESS)
"225
[e $ ! == -> _ret `i -> . `E474 1 `i 61  ]
[; ;arpv4.c: 226: {
"226
{
[; ;arpv4.c: 227: return MAC_NOT_FOUND;
"227
[e ) . `E474 5 ]
[e $UE 59  ]
"228
}
[e :U 61 ]
"229
}
[e :U 60 ]
[; ;arpv4.c: 228: }
[; ;arpv4.c: 229: }
[; ;arpv4.c: 230: return ret;
"230
[e ) _ret ]
[e $UE 59  ]
[; ;arpv4.c: 231: }
"231
[e :UE 59 ]
}
"238
[v _ARPV4_Lookup `(*S28 ~T0 @X0 1 ef1`ul ]
"239
{
[; ;arpv4.c: 238: mac48Address_t* ARPV4_Lookup(uint32_t ip_address)
[; ;arpv4.c: 239: {
[e :U _ARPV4_Lookup ]
"238
[v _ip_address `ul ~T0 @X0 1 r1 ]
"239
[f ]
"240
[v _entry_pointer `*S35 ~T0 @X0 1 a ]
[; ;arpv4.c: 240: arpMap_t *entry_pointer = arpMap;
[e = _entry_pointer &U _arpMap ]
"241
[v _x `uc ~T0 @X0 1 a ]
[; ;arpv4.c: 241: uint8_t x;
[; ;arpv4.c: 243: for(x = 0; x < 8; x++)
"243
{
[e = _x -> -> 0 `i `uc ]
[e $ < -> _x `i -> 8 `i 63  ]
[e $U 64  ]
"244
[e :U 63 ]
[; ;arpv4.c: 244: {
{
[; ;arpv4.c: 245: if(entry_pointer->ipAddress == ip_address)
"245
[e $ ! == . *U _entry_pointer 1 _ip_address 66  ]
[; ;arpv4.c: 246: return &entry_pointer->macAddress;
"246
[e ) &U . *U _entry_pointer 0 ]
[e $UE 62  ]
[e :U 66 ]
[; ;arpv4.c: 247: entry_pointer ++;
"247
[e ++ _entry_pointer * -> -> 1 `i `x -> -> # *U _entry_pointer `i `x ]
"248
}
"243
[e ++ _x -> -> 1 `i `uc ]
[e $ < -> _x `i -> 8 `i 63  ]
[e :U 64 ]
"248
}
[; ;arpv4.c: 248: }
[; ;arpv4.c: 249: return 0;
"249
[e ) -> -> 0 `i `*S28 ]
[e $UE 62  ]
[; ;arpv4.c: 250: }
"250
[e :UE 62 ]
}
