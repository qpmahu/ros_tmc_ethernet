Version 3.2 HI-TECH Software Intermediate Code
"92 mcc_generated_files/TCPIPLibrary/dhcp_client.c
[s S36 `ul 1 `ul 1 `ul 1 `ul -> 2 `i `ul -> 2 `i `ul 1 `ul 1 `ul 1 `ul 1 `ul 1 ]
[n S36 . dhcpIPAddress subnetMask routerAddress dnsAddress ntpAddress gatewayAddress xidValue t1 t2 leasee_ip ]
"114
[c E784 0 1 2 3 .. ]
[n E784 . SELECTING REQUESTING RENEWLEASE BOUND  ]
[c E790 0 1 2 3 .. ]
[n E790 . INIT_TIMER WAITFORTIMER STARTDISCOVER STARTREQUEST  ]
"107
[s S37 `E784 1 `E790 1 ]
[n S37 . rxClientState tmrClientState ]
"40 mcc_generated_files/TCPIPLibrary/ip_database.h
[s S35 `ul 1 `ul -> 2 `i `ul 1 `ul 1 `ul 1 `ul -> 2 `i `ul 1 ]
[n S35 . ipv4_myAddress ipv4_dns ipv4_subnetMask ipv4_router ipv4_gateway ipv4_ntpAddress ipv4_tftpAddress ]
"51
[v _ip_database_info `S35 ~T0 @X0 0 e ]
"10 mcc_generated_files/TCPIPLibrary/lfsr.h
[v _lfsr `(uc ~T0 @X0 0 ef ]
"128 mcc_generated_files/TCPIPLibrary/dhcp_client.c
[c E767 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .. ]
[n E767 . DHCP_DISCOVER DHCP_OFFER DHCP_REQUEST DHCP_DECLINE DHCP_ACK DHCP_NACK DHCP_RELEASE DHCP_INFORM DHCP_FORCERENEW DHCP_LEASEQUERY DHCP_LEASEUNASSIGNED DHCP_LEASEUNKNOWN DHCP_LEASEACTIVE DHCP_BULKLEASEQUERY DHCP_LEASEQUERYDONE  ]
"116
[v _sendRequest `(uc ~T0 @X0 0 ef1`E767 ]
"144
[c E505 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .. ]
[n E505 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED EAPoL_PACKET_FAILURE INCORRECT_IPV4_HLEN IPV4_NO_OPTIONS TX_QUEUED  ]
"81 mcc_generated_files/TCPIPLibrary/udpv4.h
[v _UDP_Start `(E505 ~T0 @X0 0 ef3`ul`ui`ui ]
"122 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Write32 `(v ~T0 @X0 0 ef1`ul ]
"118
[v _ETH_WriteBlock `(ui ~T0 @X0 0 ef2`*Cv`ui ]
"54 mcc_generated_files/TCPIPLibrary/mac_address.h
[s S30 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S30 . byte1 byte2 byte3 byte4 byte5 byte6 ]
"52
[u S29 `uc -> 6 `i `S30 1 ]
[n S29 . mac_array s ]
"59
[v _hostMacAddress `S29 ~T0 @X0 0 e ]
"98 mcc_generated_files/TCPIPLibrary/dhcp_client.h
[v _DHCP_WriteZeros `(v ~T0 @X0 0 ef1`ui ]
"119 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Write8 `(v ~T0 @X0 0 ef1`uc ]
"56 C:\Program Files (x86)\Microchip\xc8\v1.42\include\string.h
[v _strlen `(ui ~T0 @X0 0 ef1`*Cuc ]
"117 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_WriteString `(ui ~T0 @X0 0 ef1`*Cuc ]
"120
[v _ETH_Write16 `(v ~T0 @X0 0 ef1`ui ]
"82 mcc_generated_files/TCPIPLibrary/udpv4.h
[v _UDP_Send `(E505 ~T0 @X0 0 ef ]
"30 C:\Program Files (x86)\Microchip\xc8\v1.42\include\time.h
[v _time `(l ~T0 @X0 0 ef1`*l ]
"108 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Read16 `(ui ~T0 @X0 0 ef ]
"107
[v _ETH_Read8 `(uc ~T0 @X0 0 ef ]
"110
[v _ETH_Read32 `(ul ~T0 @X0 0 ef ]
"106
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"44 C:\Program Files (x86)\Microchip\xc8\v1.42\include\string.h
[v _memcmp `(i ~T0 @X0 0 ef3`*Cv`*Cv`ui ]
"57 mcc_generated_files/TCPIPLibrary/mac_address.h
[v _broadcastMAC `CS29 ~T0 @X0 0 e ]
"111 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Dump `(v ~T0 @X0 0 ef1`ui ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 21: extern void * __builtin_memcpy(void *, const void *, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;time.h: 8: typedef long time_t;
[; ;time.h: 9: struct tm {
[; ;time.h: 10: int tm_sec;
[; ;time.h: 11: int tm_min;
[; ;time.h: 12: int tm_hour;
[; ;time.h: 13: int tm_mday;
[; ;time.h: 14: int tm_mon;
[; ;time.h: 15: int tm_year;
[; ;time.h: 16: int tm_wday;
[; ;time.h: 17: int tm_yday;
[; ;time.h: 18: int tm_isdst;
[; ;time.h: 19: };
[; ;time.h: 25: extern int time_zone;
[; ;time.h: 30: extern time_t time(time_t *);
[; ;time.h: 31: extern int stime(time_t *);
[; ;time.h: 47: extern char * asctime(const struct tm *) ;
[; ;time.h: 48: extern char * ctime(const time_t *) ;
[; ;time.h: 49: extern struct tm * gmtime(const time_t *) ;
[; ;time.h: 50: extern struct tm * localtime(const time_t *) ;
[; ;time.h: 51: extern size_t strftime(char *, size_t, const char *, const struct tm *) ;
[; ;time.h: 52: extern time_t mktime(struct tm *);
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 38: typedef signed long int int32_t;
[; ;stdint.h: 45: typedef unsigned char uint8_t;
[; ;stdint.h: 51: typedef unsigned int uint16_t;
[; ;stdint.h: 67: typedef unsigned long int uint32_t;
[; ;stdint.h: 75: typedef signed char int_least8_t;
[; ;stdint.h: 82: typedef signed int int_least16_t;
[; ;stdint.h: 104: typedef signed long int int_least32_t;
[; ;stdint.h: 111: typedef unsigned char uint_least8_t;
[; ;stdint.h: 117: typedef unsigned int uint_least16_t;
[; ;stdint.h: 136: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 145: typedef signed char int_fast8_t;
[; ;stdint.h: 152: typedef signed int int_fast16_t;
[; ;stdint.h: 174: typedef signed long int int_fast32_t;
[; ;stdint.h: 181: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 187: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 206: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 212: typedef int32_t intmax_t;
[; ;stdint.h: 217: typedef uint32_t uintmax_t;
[; ;stdint.h: 222: typedef int16_t intptr_t;
[; ;stdint.h: 227: typedef uint16_t uintptr_t;
[; ;tcpip_types.h: 49: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;tcpip_types.h: 51: typedef union
[; ;tcpip_types.h: 52: {
[; ;tcpip_types.h: 53: uint16_t value;
[; ;tcpip_types.h: 54: struct
[; ;tcpip_types.h: 55: {
[; ;tcpip_types.h: 56: unsigned int priorityCodePoint:3;
[; ;tcpip_types.h: 57: unsigned int dropEligible:1;
[; ;tcpip_types.h: 58: unsigned int vlanId:12;
[; ;tcpip_types.h: 59: };
[; ;tcpip_types.h: 60: } tci_t;
[; ;tcpip_types.h: 62: typedef struct
[; ;tcpip_types.h: 63: {
[; ;tcpip_types.h: 64: uint8_t destinationMAC[6];
[; ;tcpip_types.h: 65: uint8_t sourceMAC[6];
[; ;tcpip_types.h: 66: union
[; ;tcpip_types.h: 67: {
[; ;tcpip_types.h: 68: uint16_t type;
[; ;tcpip_types.h: 69: uint16_t length;
[; ;tcpip_types.h: 70: uint16_t tpid;
[; ;tcpip_types.h: 71: }id;
[; ;tcpip_types.h: 76: } ethernetFrame_t;
"78 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;tcpip_types.h: 78: uint8_t Control_Byte = 0x00;
[; ;tcpip_types.h: 131: typedef struct
[; ;tcpip_types.h: 132: {
[; ;tcpip_types.h: 133: unsigned ihl:4;
[; ;tcpip_types.h: 134: unsigned version:4;
[; ;tcpip_types.h: 135: unsigned ecn:2;
[; ;tcpip_types.h: 136: unsigned dscp:6;
[; ;tcpip_types.h: 137: uint16_t length;
[; ;tcpip_types.h: 138: uint16_t identifcation;
[; ;tcpip_types.h: 139: unsigned fragmentOffsetHigh:5;
[; ;tcpip_types.h: 140: unsigned :1;
[; ;tcpip_types.h: 141: unsigned dontFragment:1;
[; ;tcpip_types.h: 142: unsigned moreFragments:1;
[; ;tcpip_types.h: 143: uint8_t fragmentOffsetLow;
[; ;tcpip_types.h: 144: uint8_t timeToLive;
[; ;tcpip_types.h: 145: uint8_t protocol;
[; ;tcpip_types.h: 146: uint16_t headerCksm;
[; ;tcpip_types.h: 147: uint32_t srcIpAddress;
[; ;tcpip_types.h: 148: uint32_t dstIpAddress;
[; ;tcpip_types.h: 151: } ipv4Header_t;
[; ;tcpip_types.h: 154: typedef struct
[; ;tcpip_types.h: 155: {
[; ;tcpip_types.h: 156: uint32_t srcIpAddress;
[; ;tcpip_types.h: 157: uint32_t dstIpAddress;
[; ;tcpip_types.h: 158: uint8_t protocol;
[; ;tcpip_types.h: 159: uint8_t z;
[; ;tcpip_types.h: 160: uint16_t length;
[; ;tcpip_types.h: 161: } ipv4_pseudo_header_t;
[; ;tcpip_types.h: 163: typedef struct
[; ;tcpip_types.h: 164: {
[; ;tcpip_types.h: 165: union
[; ;tcpip_types.h: 166: {
[; ;tcpip_types.h: 167: uint16_t typeCode;
[; ;tcpip_types.h: 168: struct
[; ;tcpip_types.h: 169: {
[; ;tcpip_types.h: 170: uint8_t code;
[; ;tcpip_types.h: 171: uint8_t type;
[; ;tcpip_types.h: 172: };
[; ;tcpip_types.h: 173: };
[; ;tcpip_types.h: 174: uint16_t checksum;
[; ;tcpip_types.h: 175: } icmpHeader_t;
[; ;tcpip_types.h: 178: typedef struct
[; ;tcpip_types.h: 179: {
[; ;tcpip_types.h: 180: union
[; ;tcpip_types.h: 181: {
[; ;tcpip_types.h: 182: uint16_t typeCode;
[; ;tcpip_types.h: 183: struct
[; ;tcpip_types.h: 184: {
[; ;tcpip_types.h: 185: uint8_t code;
[; ;tcpip_types.h: 186: uint8_t type;
[; ;tcpip_types.h: 187: };
[; ;tcpip_types.h: 188: };
[; ;tcpip_types.h: 189: uint16_t checksum;
[; ;tcpip_types.h: 190: } icmpv6Header_t;
[; ;tcpip_types.h: 193: typedef enum
[; ;tcpip_types.h: 194: {
[; ;tcpip_types.h: 195: ECHO_REPLY = 0x0000,
[; ;tcpip_types.h: 197: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;tcpip_types.h: 198: DEST_HOST_UNREACHABLE = 0x0301,
[; ;tcpip_types.h: 199: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;tcpip_types.h: 200: DEST_PORT_UNREACHABLE = 0x0303,
[; ;tcpip_types.h: 201: FRAGMENTATION_REQUIRED = 0x0304,
[; ;tcpip_types.h: 202: SOURCE_ROUTE_FAILED = 0x0305,
[; ;tcpip_types.h: 203: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;tcpip_types.h: 204: SOURCE_HOST_ISOLATED = 0x0307,
[; ;tcpip_types.h: 205: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;tcpip_types.h: 206: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;tcpip_types.h: 207: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;tcpip_types.h: 208: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;tcpip_types.h: 209: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;tcpip_types.h: 210: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;tcpip_types.h: 211: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;tcpip_types.h: 213: SOURCE_QUENCH = 0x0400,
[; ;tcpip_types.h: 215: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;tcpip_types.h: 216: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;tcpip_types.h: 217: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;tcpip_types.h: 218: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;tcpip_types.h: 220: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;tcpip_types.h: 222: ECHO_REQUEST = 0x0800,
[; ;tcpip_types.h: 225: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_1 = 0x082A,
[; ;tcpip_types.h: 226: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_2 = 0x08FC,
[; ;tcpip_types.h: 228: ROUTER_ADVERTISEMENT = 0x0900,
[; ;tcpip_types.h: 229: ROUTER_SOLICITATION = 0x0A00,
[; ;tcpip_types.h: 230: TRACEROUTE = 0x3000
[; ;tcpip_types.h: 231: } icmpTypeCodes_t;
[; ;tcpip_types.h: 233: typedef struct
[; ;tcpip_types.h: 234: {
[; ;tcpip_types.h: 235: uint16_t srcPort;
[; ;tcpip_types.h: 236: uint16_t dstPort;
[; ;tcpip_types.h: 237: uint16_t length;
[; ;tcpip_types.h: 238: uint16_t checksum;
[; ;tcpip_types.h: 239: } udpHeader_t;
[; ;tcpip_types.h: 241: typedef struct
[; ;tcpip_types.h: 242: {
[; ;tcpip_types.h: 243: uint16_t sourcePort;
[; ;tcpip_types.h: 244: uint16_t destPort;
[; ;tcpip_types.h: 245: uint32_t sequenceNumber;
[; ;tcpip_types.h: 246: uint32_t ackNumber;
[; ;tcpip_types.h: 247: union{
[; ;tcpip_types.h: 248: uint8_t byte13;
[; ;tcpip_types.h: 249: struct{
[; ;tcpip_types.h: 250: uint8_t ns:1;
[; ;tcpip_types.h: 251: uint8_t reserved:3;
[; ;tcpip_types.h: 252: uint8_t dataOffset:4;
[; ;tcpip_types.h: 253: };
[; ;tcpip_types.h: 254: };
[; ;tcpip_types.h: 256: union{
[; ;tcpip_types.h: 257: uint8_t flags;
[; ;tcpip_types.h: 258: struct{
[; ;tcpip_types.h: 259: uint8_t fin:1;
[; ;tcpip_types.h: 260: uint8_t syn:1;
[; ;tcpip_types.h: 261: uint8_t rst:1;
[; ;tcpip_types.h: 262: uint8_t psh:1;
[; ;tcpip_types.h: 263: uint8_t ack:1;
[; ;tcpip_types.h: 264: uint8_t urg:1;
[; ;tcpip_types.h: 265: uint8_t ece:1;
[; ;tcpip_types.h: 266: uint8_t cwr:1;
[; ;tcpip_types.h: 267: };
[; ;tcpip_types.h: 268: };
[; ;tcpip_types.h: 270: uint16_t windowSize;
[; ;tcpip_types.h: 271: uint16_t checksum;
[; ;tcpip_types.h: 272: uint16_t urgentPtr;
[; ;tcpip_types.h: 276: } tcpHeader_t;
[; ;tcpip_types.h: 278: typedef struct
[; ;tcpip_types.h: 279: {
[; ;tcpip_types.h: 280: uint16_t version:4;
[; ;tcpip_types.h: 281: uint16_t trafficClass:8;
[; ;tcpip_types.h: 282: uint16_t flowLabel1stNibble:4;
[; ;tcpip_types.h: 284: uint16_t flowLabelRest;
[; ;tcpip_types.h: 285: uint16_t payloadLength;
[; ;tcpip_types.h: 286: uint8_t nextHeader;
[; ;tcpip_types.h: 287: uint8_t hopLimit;
[; ;tcpip_types.h: 288: uint8_t srcAddress[16];
[; ;tcpip_types.h: 289: uint8_t dstAddress[16];
[; ;tcpip_types.h: 291: } ipv6Header_t;
[; ;tcpip_types.h: 294: typedef enum
[; ;tcpip_types.h: 295: {
[; ;tcpip_types.h: 296: HOPOPT_TCPIP = 0,
[; ;tcpip_types.h: 297: ICMP_TCPIP = 1,
[; ;tcpip_types.h: 298: IGMP_TCPIP = 2,
[; ;tcpip_types.h: 299: GGP_TCPIP = 3,
[; ;tcpip_types.h: 300: IPV4_TCPIP = 4,
[; ;tcpip_types.h: 301: ST_TCPIP = 5,
[; ;tcpip_types.h: 302: TCP_TCPIP = 6,
[; ;tcpip_types.h: 303: CBT_TCPIP = 7,
[; ;tcpip_types.h: 304: EGP_TCPIP = 8,
[; ;tcpip_types.h: 305: IGP_TCPIP = 9,
[; ;tcpip_types.h: 306: BBN_RCC_MON_TCPIP = 10,
[; ;tcpip_types.h: 307: NVP_II_TCPIP = 11,
[; ;tcpip_types.h: 308: PUP_TCPIP = 12,
[; ;tcpip_types.h: 309: ARGUS_TCPIP = 13,
[; ;tcpip_types.h: 310: EMCON_TCPIP = 14,
[; ;tcpip_types.h: 311: XNET_TCPIP = 15,
[; ;tcpip_types.h: 312: CHAOS_TCPIP = 16,
[; ;tcpip_types.h: 313: UDP_TCPIP = 17,
[; ;tcpip_types.h: 314: MUX_TCPIP = 18,
[; ;tcpip_types.h: 315: DCN_MEAS_TCPIP = 19,
[; ;tcpip_types.h: 316: HMP_TCPIP = 20,
[; ;tcpip_types.h: 317: PRM_TCPIP = 21,
[; ;tcpip_types.h: 318: XNS_IDP_TCPIP = 22,
[; ;tcpip_types.h: 319: TRUNK_1_TCPIP = 23,
[; ;tcpip_types.h: 320: TRUNK_2_TCPIP = 24,
[; ;tcpip_types.h: 321: LEAF_1_TCPIP = 25,
[; ;tcpip_types.h: 322: LEAF_2_TCPIP = 26,
[; ;tcpip_types.h: 323: RDP_TCPIP = 27,
[; ;tcpip_types.h: 324: IRTP_TCPIP = 28,
[; ;tcpip_types.h: 325: ISO_TP4_TCPIP = 29,
[; ;tcpip_types.h: 326: NETBLT_TCPIP = 30,
[; ;tcpip_types.h: 327: MFE_NSP_TCPIP = 31,
[; ;tcpip_types.h: 328: MERIT_INP_TCPIP = 32,
[; ;tcpip_types.h: 329: DCCP_TCPIP = 33,
[; ;tcpip_types.h: 330: THREEPC_TCPIP = 34,
[; ;tcpip_types.h: 331: IDPR_TCPIP = 35,
[; ;tcpip_types.h: 332: XTP_TCPIP = 36,
[; ;tcpip_types.h: 333: DDP_TCPIP = 37,
[; ;tcpip_types.h: 334: IDPR_CMTP_TCPIP = 38,
[; ;tcpip_types.h: 335: TPpp_TCPIP = 39,
[; ;tcpip_types.h: 336: IL_TCPIP = 40,
[; ;tcpip_types.h: 337: IPV6_TUNNEL_TCPIP = 41,
[; ;tcpip_types.h: 338: SDRP_TCPIP = 42,
[; ;tcpip_types.h: 339: IPV6_Route_TCPIP = 43,
[; ;tcpip_types.h: 340: IPV6_Frag_TCPIP = 44,
[; ;tcpip_types.h: 341: IDRP_TCPIP = 45,
[; ;tcpip_types.h: 342: RSVP_TCPIP = 46,
[; ;tcpip_types.h: 343: GRE_TCPIP = 47,
[; ;tcpip_types.h: 344: DSR_TCPIP = 48,
[; ;tcpip_types.h: 345: BNA_TCPIP = 49,
[; ;tcpip_types.h: 346: ESP_TCPIP = 50,
[; ;tcpip_types.h: 347: AH_TCPIP = 51,
[; ;tcpip_types.h: 348: I_NLSP_TCPIP = 52,
[; ;tcpip_types.h: 349: SWIPE_TCPIP = 53,
[; ;tcpip_types.h: 350: NARP_TCPIP = 54,
[; ;tcpip_types.h: 351: MOBILE_TCPIP = 55,
[; ;tcpip_types.h: 352: TLSP_TCPIP = 56,
[; ;tcpip_types.h: 353: SKIP_TCPIP = 57,
[; ;tcpip_types.h: 354: IPV6_ICMP_TCPIP = 58,
[; ;tcpip_types.h: 355: IPV6_NoNxt_TCPIP = 59,
[; ;tcpip_types.h: 356: IPV6_Opts_TCPIP = 60,
[; ;tcpip_types.h: 357: CFTP_TCPIP = 62,
[; ;tcpip_types.h: 358: SAT_EXPAK_TCPIP = 64,
[; ;tcpip_types.h: 359: KRYPTOLAN_TCPIP = 65,
[; ;tcpip_types.h: 360: RVD_TCPIP = 66,
[; ;tcpip_types.h: 361: IPPC_TCPIP = 67,
[; ;tcpip_types.h: 362: SAT_MON_TCPIP = 69,
[; ;tcpip_types.h: 363: VISA_TCPIP = 70,
[; ;tcpip_types.h: 364: IPCV_TCPIP = 71,
[; ;tcpip_types.h: 365: CPNX_TCPIP = 72,
[; ;tcpip_types.h: 366: CPHB_TCPIP = 73,
[; ;tcpip_types.h: 367: WSN_TCPIP = 74,
[; ;tcpip_types.h: 368: PVP_TCPIP = 75,
[; ;tcpip_types.h: 369: BR_SAT_MON_TCPIP = 76,
[; ;tcpip_types.h: 370: SUN_ND_TCPIP = 77,
[; ;tcpip_types.h: 371: WB_MON_TCPIP = 78,
[; ;tcpip_types.h: 372: WB_EXPAK_TCPIP = 79,
[; ;tcpip_types.h: 373: ISO_IP_TCPIP = 80,
[; ;tcpip_types.h: 374: VMTP_TCPIP = 81,
[; ;tcpip_types.h: 375: SECURE_VMTP_TCPIP = 82,
[; ;tcpip_types.h: 376: VINES_TCPIP = 83,
[; ;tcpip_types.h: 377: TTP_TCPIP = 84,
[; ;tcpip_types.h: 378: IPTM_TCPIP = 84,
[; ;tcpip_types.h: 379: NSFNET_IGP_TCPIP = 85,
[; ;tcpip_types.h: 380: DGP_TCPIP = 86,
[; ;tcpip_types.h: 381: TCF_TCPIP = 87,
[; ;tcpip_types.h: 382: EIGRP_TCPIP = 88,
[; ;tcpip_types.h: 383: OSPFIGP_TCPIP = 89,
[; ;tcpip_types.h: 384: Sprite_RPC_TCPIP = 90,
[; ;tcpip_types.h: 385: LARP_TCPIP = 91,
[; ;tcpip_types.h: 386: MTP_TCPIP = 92,
[; ;tcpip_types.h: 387: AX25_TCPIP = 93,
[; ;tcpip_types.h: 388: IPIP_TCPIP = 94,
[; ;tcpip_types.h: 389: MICP_TCPIP = 95,
[; ;tcpip_types.h: 390: SCC_SP_TCPIP = 96,
[; ;tcpip_types.h: 391: ETHERIP_TCPIP = 97,
[; ;tcpip_types.h: 392: ENCAP_TCPIP = 98,
[; ;tcpip_types.h: 393: GMTP_TCPIP = 100,
[; ;tcpip_types.h: 394: IFMP_TCPIP = 101,
[; ;tcpip_types.h: 395: PNNI_TCPIP = 102,
[; ;tcpip_types.h: 396: PIM_TCPIP = 103,
[; ;tcpip_types.h: 397: ARIS_TCPIP = 104,
[; ;tcpip_types.h: 398: SCPS_TCPIP = 105,
[; ;tcpip_types.h: 399: QNX_TCPIP = 106,
[; ;tcpip_types.h: 400: A_N_TCPIP = 107,
[; ;tcpip_types.h: 401: IPComp_TCPIP = 108,
[; ;tcpip_types.h: 402: SNP_TCPIP = 109,
[; ;tcpip_types.h: 403: Compaq_Peer_TCPIP = 110,
[; ;tcpip_types.h: 404: IPX_in_IP_TCPIP = 111,
[; ;tcpip_types.h: 405: VRRP_TCPIP = 112,
[; ;tcpip_types.h: 406: PGM_TCPIP = 113,
[; ;tcpip_types.h: 407: L2TP_TCPIP = 115,
[; ;tcpip_types.h: 408: DDX_TCPIP = 116,
[; ;tcpip_types.h: 409: IATP_TCPIP = 117,
[; ;tcpip_types.h: 410: STP_TCPIP = 118,
[; ;tcpip_types.h: 411: SRP_TCPIP = 119,
[; ;tcpip_types.h: 412: UTI_TCPIP = 120,
[; ;tcpip_types.h: 413: SMP_TCPIP = 121,
[; ;tcpip_types.h: 414: SM_TCPIP = 122,
[; ;tcpip_types.h: 415: PTP_TCPIP = 123,
[; ;tcpip_types.h: 416: ISIS_TCPIP = 124,
[; ;tcpip_types.h: 417: FIRE_TCPIP = 125,
[; ;tcpip_types.h: 418: CRTP_TCPIP = 126,
[; ;tcpip_types.h: 419: CRUDP_TCPIP = 127,
[; ;tcpip_types.h: 420: SSCOPMCE_TCPIP = 128,
[; ;tcpip_types.h: 421: IPLT_TCPIP = 129,
[; ;tcpip_types.h: 422: SPS_TCPIP = 130,
[; ;tcpip_types.h: 423: PIPE_TCPIP = 131,
[; ;tcpip_types.h: 424: SCTP_TCPIP = 132,
[; ;tcpip_types.h: 425: FC_TCPIP = 133
[; ;tcpip_types.h: 426: } ipProtocolNumbers;
[; ;tcpip_types.h: 428: typedef struct
[; ;tcpip_types.h: 429: {
[; ;tcpip_types.h: 430: union{
[; ;tcpip_types.h: 431: uint32_t s_addr;
[; ;tcpip_types.h: 432: uint8_t s_addr_byte[4];
[; ;tcpip_types.h: 433: };
[; ;tcpip_types.h: 434: }inAddr_t;
[; ;tcpip_types.h: 436: typedef struct
[; ;tcpip_types.h: 437: {
[; ;tcpip_types.h: 438: union {
[; ;tcpip_types.h: 439: uint8_t s6_u8[16];
[; ;tcpip_types.h: 440: uint16_t s6_u16[8];
[; ;tcpip_types.h: 441: uint32_t s6_u32[4];
[; ;tcpip_types.h: 442: } s6;
[; ;tcpip_types.h: 446: }in6Addr_t;
[; ;tcpip_types.h: 448: typedef struct
[; ;tcpip_types.h: 449: {
[; ;tcpip_types.h: 450: uint16_t port;
[; ;tcpip_types.h: 451: inAddr_t addr;
[; ;tcpip_types.h: 452: }sockaddr_in_t;
[; ;tcpip_types.h: 454: typedef struct {
[; ;tcpip_types.h: 456: uint16_t in6_port;
[; ;tcpip_types.h: 457: uint32_t in6_flowinfo;
[; ;tcpip_types.h: 458: in6Addr_t in6_addr;
[; ;tcpip_types.h: 459: uint32_t in6_scope_id;
[; ;tcpip_types.h: 460: }sockaddr_in6_t;
[; ;tcpip_types.h: 462: extern const char *network_errors[];
[; ;tcpip_types.h: 464: typedef enum
[; ;tcpip_types.h: 465: {
[; ;tcpip_types.h: 466: ERROR =0,
[; ;tcpip_types.h: 467: SUCCESS,
[; ;tcpip_types.h: 468: LINK_NOT_FOUND,
[; ;tcpip_types.h: 469: BUFFER_BUSY,
[; ;tcpip_types.h: 470: TX_LOGIC_NOT_IDLE,
[; ;tcpip_types.h: 471: MAC_NOT_FOUND,
[; ;tcpip_types.h: 472: IP_WRONG_VERSION,
[; ;tcpip_types.h: 473: IPV4_CHECKSUM_FAILS,
[; ;tcpip_types.h: 474: DEST_IP_NOT_MATCHED,
[; ;tcpip_types.h: 475: ICMP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 476: UDP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 477: TCP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 478: DMA_TIMEOUT,
[; ;tcpip_types.h: 479: PORT_NOT_AVAILABLE,
[; ;tcpip_types.h: 480: ARP_IP_NOT_MATCHED,
[; ;tcpip_types.h: 481: EAPoL_PACKET_FAILURE,
[; ;tcpip_types.h: 482: INCORRECT_IPV4_HLEN,
[; ;tcpip_types.h: 483: IPV4_NO_OPTIONS,
[; ;tcpip_types.h: 484: TX_QUEUED
[; ;tcpip_types.h: 485: }error_msg;
[; ;tcpip_types.h: 487: typedef struct
[; ;tcpip_types.h: 488: {
[; ;tcpip_types.h: 489: inAddr_t dest_addr;
[; ;tcpip_types.h: 490: }destIP_t;
[; ;tcpip_types.h: 493: typedef int8_t socklistsize_t;
[; ;tcpip_types.h: 495: typedef void (*ip_receive_function_ptr)(int);
[; ;mac_address.h: 51: typedef union
[; ;mac_address.h: 52: {
[; ;mac_address.h: 53: uint8_t mac_array[6];
[; ;mac_address.h: 54: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;mac_address.h: 55: } mac48Address_t;
[; ;mac_address.h: 57: extern const mac48Address_t broadcastMAC;
[; ;mac_address.h: 58: extern const mac48Address_t macAddress;
[; ;mac_address.h: 59: extern mac48Address_t hostMacAddress;
[; ;mac_address.h: 61: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_driver.h: 49: typedef struct
[; ;ethernet_driver.h: 50: {
[; ;ethernet_driver.h: 51: uint16_t byteCount;
[; ;ethernet_driver.h: 52: unsigned long_drop_event:1;
[; ;ethernet_driver.h: 53: unsigned :1;
[; ;ethernet_driver.h: 54: unsigned excessCarrierEvent:1;
[; ;ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_driver.h: 56: unsigned crcError:1;
[; ;ethernet_driver.h: 57: unsigned lengthCheckError:1;
[; ;ethernet_driver.h: 58: unsigned lengthLongError:1;
[; ;ethernet_driver.h: 59: unsigned rxOK:1;
[; ;ethernet_driver.h: 60: unsigned rxMulticast:1;
[; ;ethernet_driver.h: 61: unsigned rxBroadcast:1;
[; ;ethernet_driver.h: 62: unsigned dribbleNibble:1;
[; ;ethernet_driver.h: 63: unsigned controlFrame:1;
[; ;ethernet_driver.h: 64: unsigned pauseControlFrame:1;
[; ;ethernet_driver.h: 65: unsigned unknownContrlFrame:1;
[; ;ethernet_driver.h: 66: unsigned vlanTagPresent:1;
[; ;ethernet_driver.h: 67: unsigned zero:1;
[; ;ethernet_driver.h: 68: }receiveStatusVector_t;
[; ;ethernet_driver.h: 70: typedef struct
[; ;ethernet_driver.h: 71: {
[; ;ethernet_driver.h: 72: unsigned error:1;
[; ;ethernet_driver.h: 73: unsigned pktReady:1;
[; ;ethernet_driver.h: 74: unsigned up:1;
[; ;ethernet_driver.h: 75: unsigned idle:1;
[; ;ethernet_driver.h: 76: unsigned linkChange:1;
[; ;ethernet_driver.h: 77: unsigned bufferBusy:1;
[; ;ethernet_driver.h: 78: unsigned :3;
[; ;ethernet_driver.h: 79: uint16_t saveRDPT;
[; ;ethernet_driver.h: 80: uint16_t saveWRPT;
[; ;ethernet_driver.h: 81: } ethernetDriver_t;
[; ;ethernet_driver.h: 83: typedef struct
[; ;ethernet_driver.h: 84: {
[; ;ethernet_driver.h: 85: uint16_t flags;
[; ;ethernet_driver.h: 86: uint16_t packetStart;
[; ;ethernet_driver.h: 87: uint16_t packetEnd;
[; ;ethernet_driver.h: 89: void *prevPacket;
[; ;ethernet_driver.h: 90: void *nextPacket;
[; ;ethernet_driver.h: 91: } txPacket_t;
[; ;ethernet_driver.h: 93: extern volatile ethernetDriver_t ethData;
[; ;ethernet_driver.h: 99: void ETH_Init(void);
[; ;ethernet_driver.h: 100: void ETH_EventHandler(void);
[; ;ethernet_driver.h: 101: void ETH_NextPacketUpdate();
[; ;ethernet_driver.h: 102: void ETH_ResetReceiver(void);
[; ;ethernet_driver.h: 103: void ETH_SendSystemReset(void);
[; ;ethernet_driver.h: 106: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_driver.h: 107: uint8_t ETH_Read8(void);
[; ;ethernet_driver.h: 108: uint16_t ETH_Read16(void);
[; ;ethernet_driver.h: 109: uint32_t ETH_Read24(void);
[; ;ethernet_driver.h: 110: uint32_t ETH_Read32(void);
[; ;ethernet_driver.h: 111: void ETH_Dump(uint16_t);
[; ;ethernet_driver.h: 112: void ETH_Flush(void);
[; ;ethernet_driver.h: 114: uint16_t ETH_GetFreeTxBufferSize(void);
[; ;ethernet_driver.h: 116: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_driver.h: 117: uint16_t ETH_WriteString(const char *string);
[; ;ethernet_driver.h: 118: uint16_t ETH_WriteBlock(const void *, uint16_t);
[; ;ethernet_driver.h: 119: void ETH_Write8(uint8_t);
[; ;ethernet_driver.h: 120: void ETH_Write16(uint16_t);
[; ;ethernet_driver.h: 121: void ETH_Write24(uint32_t data);
[; ;ethernet_driver.h: 122: void ETH_Write32(uint32_t);
[; ;ethernet_driver.h: 123: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_driver.h: 124: error_msg ETH_Copy(uint16_t);
[; ;ethernet_driver.h: 125: error_msg ETH_Send(void);
[; ;ethernet_driver.h: 127: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 128: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 130: void ETH_GetMAC(uint8_t *);
[; ;ethernet_driver.h: 131: void ETH_SetMAC(uint8_t *);
[; ;ethernet_driver.h: 132: uint16_t ETH_GetWritePtr();
[; ;ethernet_driver.h: 133: void ETH_SaveRDPT(void);
[; ;ethernet_driver.h: 134: void ETH_ResetReadPtr();
[; ;ethernet_driver.h: 135: uint16_t ETH_GetReadPtr(void);
[; ;ethernet_driver.h: 136: void ETH_SetReadPtr(uint16_t);
[; ;ethernet_driver.h: 137: uint16_t ETH_GetStatusVectorByteCount(void);
[; ;ethernet_driver.h: 138: void ETH_SetStatusVectorByteCount(uint16_t);
[; ;ethernet_driver.h: 140: void ETH_ResetByteCount(void);
[; ;ethernet_driver.h: 141: uint16_t ETH_GetByteCount(void);
[; ;ethernet_driver.h: 143: uint16_t ETH_ReadSavedWRPT(void);
[; ;ethernet_driver.h: 144: void ETH_SaveWRPT(void);
[; ;ethernet_driver.h: 145: void ETH_SetRxByteCount(uint16_t count);
[; ;ethernet_driver.h: 146: uint16_t ETH_GetRxByteCount();
[; ;ethernet_driver.h: 148: bool ETH_CheckLinkUp();
[; ;ethernet_driver.h: 150: void ETH_TxReset(void);
[; ;ethernet_driver.h: 151: void ETH_MoveBackReadPtr(uint16_t offset);
[; ;network.h: 58: void Network_Init(void);
[; ;network.h: 59: void Network_Read(void);
[; ;network.h: 60: void Network_Manage(void);
[; ;network.h: 61: void Network_WaitForLink(void);
[; ;network.h: 62: void timersInit();
[; ;udpv4.h: 59: extern uint16_t destPort;
[; ;udpv4.h: 60: extern udpHeader_t udpHeader;
[; ;udpv4.h: 61: extern ipv4Header_t ipv4Header;
[; ;udpv4.h: 81: error_msg UDP_Start(uint32_t destIP, uint16_t srcPort, uint16_t dstPort);
[; ;udpv4.h: 82: error_msg UDP_Send();
[; ;udpv4.h: 83: error_msg UDP_Receive(uint16_t udpcksm);
[; ;udpv4.h: 84: void udp_test(int len);
[; ;udpv4_port_handler_table.h: 46: typedef struct
[; ;udpv4_port_handler_table.h: 47: {
[; ;udpv4_port_handler_table.h: 48: uint16_t portNumber;
[; ;udpv4_port_handler_table.h: 49: ip_receive_function_ptr callBack;
[; ;udpv4_port_handler_table.h: 50: } udp_handler_t;
[; ;udpv4_port_handler_table.h: 52: typedef udp_handler_t * udp_table_iterator_t;
[; ;udpv4_port_handler_table.h: 54: udp_table_iterator_t udp_table_getIterator(void);
[; ;udpv4_port_handler_table.h: 55: udp_table_iterator_t udp_table_nextEntry(udp_table_iterator_t i);
[; ;ipv4.h: 66: void IPV4_Init(void);
[; ;ipv4.h: 73: error_msg IPV4_Packet(void);
[; ;ipv4.h: 90: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;ipv4.h: 101: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;ipv4.h: 115: error_msg IPV4_Send(uint16_t payloadLength);
[; ;ipv4.h: 122: uint16_t IPV4_GetStartPosition(void);
[; ;ipv4.h: 129: uint16_t IPV4_GetDatagramLength(void);
"58 mcc_generated_files/TCPIPLibrary/tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 80 `c
-> 73 `c
-> 67 `c
-> 49 `c
-> 54 `c
-> 70 `c
-> 49 `c
-> 56 `c
-> 51 `c
-> 52 `c
-> 54 `c
-> 32 `c
-> 69 `c
-> 116 `c
-> 104 `c
-> 101 `c
-> 114 `c
-> 110 `c
-> 101 `c
-> 116 `c
-> 0 `c
..
]
[; ;tcpip_config.h: 58: const char dhcpName[] = "PIC16F18346 Ethernet";
[; ;arpv4.h: 57: void ARPV4_Init(void);
[; ;arpv4.h: 69: error_msg ARPV4_Packet(void);
[; ;arpv4.h: 75: void ARPV4_Update(void);
[; ;arpv4.h: 86: mac48Address_t* ARPV4_Lookup(uint32_t ipAddress);
[; ;arpv4.h: 99: error_msg ARPV4_Request(uint32_t destAddress);
[; ;dhcp_client.h: 64: void DHCP_init(void);
[; ;dhcp_client.h: 75: void DHCP_Handler(int);
[; ;dhcp_client.h: 86: void DHCP_Manage(void);
[; ;dhcp_client.h: 98: void DHCP_WriteZeros(uint16_t length);
[; ;ip_database.h: 40: typedef struct {
[; ;ip_database.h: 41: uint32_t ipv4_myAddress;
[; ;ip_database.h: 42: uint32_t ipv4_dns[2];
[; ;ip_database.h: 43: uint32_t ipv4_subnetMask;
[; ;ip_database.h: 44: uint32_t ipv4_router;
[; ;ip_database.h: 45: uint32_t ipv4_gateway;
[; ;ip_database.h: 46: uint32_t ipv4_ntpAddress[2];
[; ;ip_database.h: 47: uint32_t ipv4_tftpAddress;
[; ;ip_database.h: 48: } ip_db_info_t;
[; ;ip_database.h: 51: extern ip_db_info_t ip_database_info;
[; ;ip_database.h: 72: void ipdb_init(void);
[; ;ip_database.h: 73: uint32_t makeStrToIpv4Address(char *str);
[; ;ip_database.h: 74: char *makeIpv4AddresstoStr(uint32_t addr);
[; ;lfsr.h: 5: typedef uint8_t lfsr_t;
[; ;lfsr.h: 6: int lfsr_getSequenceCount(void);
[; ;lfsr.h: 7: lfsr_t lfsr_getSequence(void);
[; ;lfsr.h: 8: void lfsr_reset(void);
[; ;lfsr.h: 9: void lfsr_setSequence(int s);
[; ;lfsr.h: 10: lfsr_t lfsr(void);
[; ;dhcp_client.c: 73: typedef enum
[; ;dhcp_client.c: 74: {
[; ;dhcp_client.c: 75: DHCP_DISCOVER = 1,
[; ;dhcp_client.c: 76: DHCP_OFFER, DHCP_REQUEST, DHCP_DECLINE, DHCP_ACK, DHCP_NACK, DHCP_RELEASE,
[; ;dhcp_client.c: 77: DHCP_INFORM, DHCP_FORCERENEW, DHCP_LEASEQUERY, DHCP_LEASEUNASSIGNED, DHCP_LEASEUNKNOWN,
[; ;dhcp_client.c: 78: DHCP_LEASEACTIVE, DHCP_BULKLEASEQUERY, DHCP_LEASEQUERYDONE
[; ;dhcp_client.c: 79: }dhcp_type;
[; ;dhcp_client.c: 81: typedef enum
[; ;dhcp_client.c: 82: {
[; ;dhcp_client.c: 83: SELECTING, REQUESTING, RENEWLEASE, BOUND
[; ;dhcp_client.c: 84: }dhcp_rx_client_state;
[; ;dhcp_client.c: 85: typedef enum
[; ;dhcp_client.c: 86: {
[; ;dhcp_client.c: 87: INIT_TIMER, WAITFORTIMER, STARTDISCOVER, STARTREQUEST
[; ;dhcp_client.c: 88: }dhcp_timer_client_state;
[; ;dhcp_client.c: 91: typedef struct
[; ;dhcp_client.c: 92: {
[; ;dhcp_client.c: 94: uint32_t dhcpIPAddress;
[; ;dhcp_client.c: 95: uint32_t subnetMask;
[; ;dhcp_client.c: 96: uint32_t routerAddress;
[; ;dhcp_client.c: 97: uint32_t dnsAddress[2];
[; ;dhcp_client.c: 98: uint32_t ntpAddress[2];
[; ;dhcp_client.c: 99: uint32_t gatewayAddress;
[; ;dhcp_client.c: 100: uint32_t xidValue;
[; ;dhcp_client.c: 101: uint32_t t1;
[; ;dhcp_client.c: 102: uint32_t t2;
[; ;dhcp_client.c: 103: uint32_t leasee_ip;
[; ;dhcp_client.c: 104: } dhcp_data_t;
[; ;dhcp_client.c: 106: typedef struct
[; ;dhcp_client.c: 107: {
[; ;dhcp_client.c: 109: dhcp_rx_client_state rxClientState;
[; ;dhcp_client.c: 110: dhcp_timer_client_state tmrClientState;
[; ;dhcp_client.c: 111: } dhcp_state_t;
"113 mcc_generated_files/TCPIPLibrary/dhcp_client.c
[v _dhcpData `S36 ~T0 @X0 1 e ]
[i _dhcpData
:U ..
:U ..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
:U ..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
..
:U ..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 3600 `i `l `ul
-> -> -> 0 `i `l `ul
..
..
]
[; ;dhcp_client.c: 113: dhcp_data_t dhcpData = {0,0,0,0,0,0,0,0,0,10,3600,0};
"114
[v _dhcpState `S37 ~T0 @X0 1 e ]
[i _dhcpState
:U ..
:U ..
. `E784 0
. `E790 0
..
..
]
[; ;dhcp_client.c: 114: dhcp_state_t dhcpState = {SELECTING,INIT_TIMER};
[; ;dhcp_client.c: 116: bool sendRequest(dhcp_type type);
"118
[v _sendDHCPDISCOVER `(uc ~T0 @X0 1 ef ]
"119
{
[; ;dhcp_client.c: 118: bool sendDHCPDISCOVER(void)
[; ;dhcp_client.c: 119: {
[e :U _sendDHCPDISCOVER ]
[f ]
[; ;dhcp_client.c: 120: dhcpData.dhcpIPAddress = (ip_database_info.ipv4_myAddress);
"120
[e = . _dhcpData 0 . _ip_database_info 0 ]
[; ;dhcp_client.c: 121: dhcpData.xidValue = lfsr();
"121
[e = . _dhcpData 6 -> ( _lfsr ..  `ul ]
[; ;dhcp_client.c: 122: dhcpData.xidValue <<= 8;
"122
[e =<< . _dhcpData 6 -> 8 `i ]
[; ;dhcp_client.c: 123: dhcpData.xidValue |= lfsr();
"123
[e =| . _dhcpData 6 -> ( _lfsr ..  `ul ]
[; ;dhcp_client.c: 124: dhcpData.xidValue <<= 8;
"124
[e =<< . _dhcpData 6 -> 8 `i ]
[; ;dhcp_client.c: 125: dhcpData.xidValue |= lfsr();
"125
[e =| . _dhcpData 6 -> ( _lfsr ..  `ul ]
[; ;dhcp_client.c: 126: dhcpData.xidValue <<= 8;
"126
[e =<< . _dhcpData 6 -> 8 `i ]
[; ;dhcp_client.c: 127: dhcpData.xidValue |= lfsr();
"127
[e =| . _dhcpData 6 -> ( _lfsr ..  `ul ]
[; ;dhcp_client.c: 128: return sendRequest(DHCP_DISCOVER);
"128
[e ) ( _sendRequest (1 . `E767 0 ]
[e $UE 38  ]
[; ;dhcp_client.c: 129: }
"129
[e :UE 38 ]
}
"131
[v _sendDHCPREQUEST `(uc ~T0 @X0 1 ef ]
"132
{
[; ;dhcp_client.c: 131: bool sendDHCPREQUEST(void)
[; ;dhcp_client.c: 132: {
[e :U _sendDHCPREQUEST ]
[f ]
[; ;dhcp_client.c: 133: return sendRequest(DHCP_REQUEST);
"133
[e ) ( _sendRequest (1 . `E767 2 ]
[e $UE 39  ]
[; ;dhcp_client.c: 134: }
"134
[e :UE 39 ]
}
"136
[v _sendDHCPDECLINE `(uc ~T0 @X0 1 ef ]
"137
{
[; ;dhcp_client.c: 136: bool sendDHCPDECLINE(void)
[; ;dhcp_client.c: 137: {
[e :U _sendDHCPDECLINE ]
[f ]
[; ;dhcp_client.c: 138: return sendRequest(DHCP_DECLINE);
"138
[e ) ( _sendRequest (1 . `E767 3 ]
[e $UE 40  ]
[; ;dhcp_client.c: 139: }
"139
[e :UE 40 ]
}
"141
[v _sendRequest `(uc ~T0 @X0 1 ef1`E767 ]
"142
{
[; ;dhcp_client.c: 141: bool sendRequest(dhcp_type type)
[; ;dhcp_client.c: 142: {
[e :U _sendRequest ]
"141
[v _type `E767 ~T0 @X0 1 r1 ]
"142
[f ]
"144
[v _started `E505 ~T0 @X0 1 a ]
[; ;dhcp_client.c: 144: error_msg started;
[; ;dhcp_client.c: 147: started = UDP_Start(0xFFFFFFFF,68,67);
"147
[e = _started ( _UDP_Start (3 , , -> -1 `ul -> -> 68 `i `ui -> -> 67 `i `ui ]
[; ;dhcp_client.c: 148: if(started==SUCCESS)
"148
[e $ ! == -> _started `i -> . `E505 1 `i 42  ]
[; ;dhcp_client.c: 149: {
"149
{
[; ;dhcp_client.c: 150: ETH_Write32(0x01010600);
"150
[e ( _ETH_Write32 (1 -> -> 16844288 `l `ul ]
[; ;dhcp_client.c: 151: ETH_Write32(dhcpData.xidValue);
"151
[e ( _ETH_Write32 (1 . _dhcpData 6 ]
[; ;dhcp_client.c: 152: ETH_Write32(0x00008000);
"152
[e ( _ETH_Write32 (1 -> -> 32768 `ui `ul ]
[; ;dhcp_client.c: 153: if(type == DHCP_REQUEST)
"153
[e $ ! == -> _type `i -> . `E767 2 `i 43  ]
[; ;dhcp_client.c: 154: {
"154
{
[; ;dhcp_client.c: 155: ETH_Write32(0);
"155
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
"156
}
[; ;dhcp_client.c: 156: }
[e $U 44  ]
"157
[e :U 43 ]
[; ;dhcp_client.c: 157: else
[; ;dhcp_client.c: 158: {
"158
{
[; ;dhcp_client.c: 159: ETH_Write32(dhcpData.dhcpIPAddress);
"159
[e ( _ETH_Write32 (1 . _dhcpData 0 ]
"160
}
[e :U 44 ]
[; ;dhcp_client.c: 160: }
[; ;dhcp_client.c: 161: ETH_Write32(0);
"161
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 162: ETH_Write32(0);
"162
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 163: ETH_Write32(0);
"163
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 164: ETH_WriteBlock((char *)&hostMacAddress,6);
"164
[e ( _ETH_WriteBlock (2 , -> -> &U _hostMacAddress `*uc `*Cv -> -> 6 `i `ui ]
[; ;dhcp_client.c: 165: DHCP_WriteZeros(202);
"165
[e ( _DHCP_WriteZeros (1 -> -> 202 `i `ui ]
[; ;dhcp_client.c: 166: ETH_Write32(0x63825363);
"166
[e ( _ETH_Write32 (1 -> -> 1669485411 `l `ul ]
[; ;dhcp_client.c: 169: ETH_Write8(12); ETH_Write8(strlen(dhcpName)); ETH_WriteString(dhcpName);
"169
[e ( _ETH_Write8 (1 -> -> 12 `i `uc ]
[e ( _ETH_Write8 (1 -> ( _strlen (1 &U _dhcpName `uc ]
[e ( _ETH_WriteString (1 &U _dhcpName ]
[; ;dhcp_client.c: 171: ETH_Write8(42); ETH_Write8(4); ETH_Write32(0);
"171
[e ( _ETH_Write8 (1 -> -> 42 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 4 `i `uc ]
[e ( _ETH_Write32 (1 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 173: ETH_Write8(53); ETH_Write8(1); ETH_Write8(type);
"173
[e ( _ETH_Write8 (1 -> -> 53 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 1 `i `uc ]
[e ( _ETH_Write8 (1 -> _type `uc ]
[; ;dhcp_client.c: 174: if(type == DHCP_REQUEST)
"174
[e $ ! == -> _type `i -> . `E767 2 `i 45  ]
[; ;dhcp_client.c: 175: {
"175
{
[; ;dhcp_client.c: 177: ETH_Write8(50);ETH_Write8(4);ETH_Write32(dhcpData.dhcpIPAddress);
"177
[e ( _ETH_Write8 (1 -> -> 50 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 4 `i `uc ]
[e ( _ETH_Write32 (1 . _dhcpData 0 ]
[; ;dhcp_client.c: 179: ETH_Write8(54);ETH_Write8(4);ETH_Write32(dhcpData.leasee_ip);
"179
[e ( _ETH_Write8 (1 -> -> 54 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 4 `i `uc ]
[e ( _ETH_Write32 (1 . _dhcpData 9 ]
"180
}
[e :U 45 ]
[; ;dhcp_client.c: 180: }
[; ;dhcp_client.c: 182: ETH_Write8(55); ETH_Write8(4); ETH_Write8(1); ETH_Write8(3); ETH_Write8(6); ETH_Write8(15);
"182
[e ( _ETH_Write8 (1 -> -> 55 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 4 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 1 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 3 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 6 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 15 `i `uc ]
[; ;dhcp_client.c: 184: ETH_Write8(57); ETH_Write8(2); ETH_Write16(512);
"184
[e ( _ETH_Write8 (1 -> -> 57 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 2 `i `uc ]
[e ( _ETH_Write16 (1 -> -> 512 `i `ui ]
[; ;dhcp_client.c: 186: ETH_Write8(61); ETH_Write8(7); ETH_Write8(1); ETH_WriteBlock(&hostMacAddress,6);
"186
[e ( _ETH_Write8 (1 -> -> 61 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 7 `i `uc ]
[e ( _ETH_Write8 (1 -> -> 1 `i `uc ]
[e ( _ETH_WriteBlock (2 , -> &U _hostMacAddress `*Cv -> -> 6 `i `ui ]
[; ;dhcp_client.c: 187: ETH_Write8(255);
"187
[e ( _ETH_Write8 (1 -> -> 255 `i `uc ]
[; ;dhcp_client.c: 192: UDP_Send();
"192
[e ( _UDP_Send ..  ]
[; ;dhcp_client.c: 193: return 1;
"193
[e ) -> -> 1 `i `uc ]
[e $UE 41  ]
"194
}
[e :U 42 ]
[; ;dhcp_client.c: 194: }
[; ;dhcp_client.c: 195: return 0;
"195
[e ) -> -> 0 `i `uc ]
[e $UE 41  ]
[; ;dhcp_client.c: 196: }
"196
[e :UE 41 ]
}
"198
[v _DHCP_init `(v ~T0 @X0 1 ef ]
"199
{
[; ;dhcp_client.c: 198: void DHCP_init(void)
[; ;dhcp_client.c: 199: {
[e :U _DHCP_init ]
[f ]
[; ;dhcp_client.c: 200: }
"200
[e :UE 46 ]
}
"202
[v _DHCP_Manage `(v ~T0 @X0 1 ef ]
"203
{
[; ;dhcp_client.c: 202: void DHCP_Manage(void)
[; ;dhcp_client.c: 203: {
[e :U _DHCP_Manage ]
[f ]
"204
[v F827 `l ~T0 @X0 1 s managementTimer ]
[i F827
-> -> 0 `i `l
]
"205
[v _now `l ~T0 @X0 1 a ]
[; ;dhcp_client.c: 204: static time_t managementTimer = 0;
[; ;dhcp_client.c: 205: time_t now;
[; ;dhcp_client.c: 206: now = time(0);
"206
[e = _now ( _time (1 -> -> 0 `i `*l ]
[; ;dhcp_client.c: 208: if(managementTimer <= now)
"208
[e $ ! <= F827 _now 48  ]
[; ;dhcp_client.c: 209: {
"209
{
[; ;dhcp_client.c: 210: switch(dhcpState.tmrClientState)
"210
[e $U 50  ]
[; ;dhcp_client.c: 211: {
"211
{
[; ;dhcp_client.c: 212: case INIT_TIMER:
"212
[e :U 51 ]
[; ;dhcp_client.c: 213: dhcpData.t1 = 4;
"213
[e = . _dhcpData 7 -> -> -> 4 `i `l `ul ]
[; ;dhcp_client.c: 214: dhcpState.tmrClientState = WAITFORTIMER;
"214
[e = . _dhcpState 1 . `E790 1 ]
[; ;dhcp_client.c: 215: break;
"215
[e $U 49  ]
[; ;dhcp_client.c: 216: case WAITFORTIMER:
"216
[e :U 52 ]
[; ;dhcp_client.c: 217: if(dhcpData.t1 == 2)
"217
[e $ ! == . _dhcpData 7 -> -> -> 2 `i `l `ul 53  ]
[; ;dhcp_client.c: 218: {
"218
{
[; ;dhcp_client.c: 219: dhcpState.tmrClientState = STARTDISCOVER;
"219
[e = . _dhcpState 1 . `E790 2 ]
"220
}
[; ;dhcp_client.c: 220: }
[e $U 54  ]
"221
[e :U 53 ]
[; ;dhcp_client.c: 221: else dhcpData.t1 --;
[e -- . _dhcpData 7 -> -> -> 1 `i `l `ul ]
[e :U 54 ]
[; ;dhcp_client.c: 222: if(dhcpData.t2 == 2)
"222
[e $ ! == . _dhcpData 8 -> -> -> 2 `i `l `ul 55  ]
[; ;dhcp_client.c: 223: {
"223
{
[; ;dhcp_client.c: 224: dhcpState.tmrClientState = STARTREQUEST;
"224
[e = . _dhcpState 1 . `E790 3 ]
"225
}
[; ;dhcp_client.c: 225: }
[e $U 56  ]
"226
[e :U 55 ]
[; ;dhcp_client.c: 226: else dhcpData.t2 --;
[e -- . _dhcpData 8 -> -> -> 1 `i `l `ul ]
[e :U 56 ]
[; ;dhcp_client.c: 227: break;
"227
[e $U 49  ]
[; ;dhcp_client.c: 228: case STARTDISCOVER:
"228
[e :U 57 ]
[; ;dhcp_client.c: 229: if(sendDHCPDISCOVER())
"229
[e $ ! != -> ( _sendDHCPDISCOVER ..  `i -> -> -> 0 `i `uc `i 58  ]
[; ;dhcp_client.c: 230: {
"230
{
[; ;dhcp_client.c: 231: dhcpData.t1 = 10;
"231
[e = . _dhcpData 7 -> -> -> 10 `i `l `ul ]
[; ;dhcp_client.c: 232: dhcpData.t2 = 2147483647;
"232
[e = . _dhcpData 8 -> -> 2147483647 `l `ul ]
[; ;dhcp_client.c: 233: dhcpState.rxClientState = SELECTING;
"233
[e = . _dhcpState 0 . `E784 0 ]
[; ;dhcp_client.c: 234: dhcpState.tmrClientState = WAITFORTIMER;
"234
[e = . _dhcpState 1 . `E790 1 ]
"235
}
[e :U 58 ]
[; ;dhcp_client.c: 235: }
[; ;dhcp_client.c: 236: break;
"236
[e $U 49  ]
[; ;dhcp_client.c: 237: case STARTREQUEST:
"237
[e :U 59 ]
[; ;dhcp_client.c: 238: if(sendDHCPREQUEST())
"238
[e $ ! != -> ( _sendDHCPREQUEST ..  `i -> -> -> 0 `i `uc `i 60  ]
[; ;dhcp_client.c: 239: {
"239
{
[; ;dhcp_client.c: 240: dhcpData.t1 = 30;
"240
[e = . _dhcpData 7 -> -> -> 30 `i `l `ul ]
[; ;dhcp_client.c: 241: dhcpData.t2 = 15;
"241
[e = . _dhcpData 8 -> -> -> 15 `i `l `ul ]
[; ;dhcp_client.c: 242: if(dhcpState.rxClientState == BOUND )dhcpState.rxClientState = RENEWLEASE;
"242
[e $ ! == -> . _dhcpState 0 `i -> . `E784 3 `i 61  ]
[e = . _dhcpState 0 . `E784 2 ]
[e $U 62  ]
"243
[e :U 61 ]
[; ;dhcp_client.c: 243: else dhcpState.rxClientState = REQUESTING;
[e = . _dhcpState 0 . `E784 1 ]
[e :U 62 ]
[; ;dhcp_client.c: 244: dhcpState.tmrClientState = WAITFORTIMER;
"244
[e = . _dhcpState 1 . `E790 1 ]
"245
}
[e :U 60 ]
[; ;dhcp_client.c: 245: }
[; ;dhcp_client.c: 246: break;
"246
[e $U 49  ]
[; ;dhcp_client.c: 247: default:
"247
[e :U 63 ]
[; ;dhcp_client.c: 248: dhcpState.tmrClientState = INIT_TIMER;
"248
[e = . _dhcpState 1 . `E790 0 ]
[; ;dhcp_client.c: 249: break;
"249
[e $U 49  ]
"250
}
[; ;dhcp_client.c: 250: }
[e $U 49  ]
"210
[e :U 50 ]
[e [\ . _dhcpState 1 , $ . `E790 0 51
 , $ . `E790 1 52
 , $ . `E790 2 57
 , $ . `E790 3 59
 63 ]
"250
[e :U 49 ]
"251
}
[e :U 48 ]
[; ;dhcp_client.c: 251: }
[; ;dhcp_client.c: 252: managementTimer = now + 1;
"252
[e = F827 + _now -> -> 1 `i `l ]
[; ;dhcp_client.c: 253: }
"253
[e :UE 47 ]
}
"255
[v _DHCP_Handler `(v ~T0 @X0 1 ef1`i ]
"256
{
[; ;dhcp_client.c: 255: void DHCP_Handler(int length)
[; ;dhcp_client.c: 256: {
[e :U _DHCP_Handler ]
"255
[v _length `i ~T0 @X0 1 r1 ]
"256
[f ]
"258
[v _chaddr `uc ~T0 @X0 -> 16 `i a ]
"259
[v _messageType `uc ~T0 @X0 1 a ]
"261
[v _acceptOffers `uc ~T0 @X0 1 a ]
"262
[v _declineOffers `uc ~T0 @X0 1 a ]
"263
[v _acceptNACK `uc ~T0 @X0 1 a ]
"264
[v _acceptACK `uc ~T0 @X0 1 a ]
"266
[v _siaddr `ul ~T0 @X0 1 a ]
[; ;dhcp_client.c: 258: uint8_t chaddr[16];
[; ;dhcp_client.c: 259: uint8_t messageType;
[; ;dhcp_client.c: 261: bool acceptOffers;
[; ;dhcp_client.c: 262: bool declineOffers;
[; ;dhcp_client.c: 263: bool acceptNACK;
[; ;dhcp_client.c: 264: bool acceptACK;
[; ;dhcp_client.c: 266: uint32_t siaddr;
[; ;dhcp_client.c: 270: switch(dhcpState.rxClientState)
"270
[e $U 66  ]
[; ;dhcp_client.c: 271: {
"271
{
[; ;dhcp_client.c: 272: default:
"272
[e :U 67 ]
[; ;dhcp_client.c: 273: case SELECTING:
"273
[e :U 68 ]
[; ;dhcp_client.c: 274: acceptOffers = 1;
"274
[e = _acceptOffers -> -> 1 `i `uc ]
[; ;dhcp_client.c: 275: declineOffers = 0;
"275
[e = _declineOffers -> -> 0 `i `uc ]
[; ;dhcp_client.c: 276: acceptNACK = 0;
"276
[e = _acceptNACK -> -> 0 `i `uc ]
[; ;dhcp_client.c: 277: acceptACK = 0;
"277
[e = _acceptACK -> -> 0 `i `uc ]
[; ;dhcp_client.c: 278: break;
"278
[e $U 65  ]
[; ;dhcp_client.c: 279: case REQUESTING:
"279
[e :U 69 ]
[; ;dhcp_client.c: 280: acceptOffers = 0;
"280
[e = _acceptOffers -> -> 0 `i `uc ]
[; ;dhcp_client.c: 281: declineOffers = 1;
"281
[e = _declineOffers -> -> 1 `i `uc ]
[; ;dhcp_client.c: 282: acceptNACK = 1;
"282
[e = _acceptNACK -> -> 1 `i `uc ]
[; ;dhcp_client.c: 283: acceptACK = 1;
"283
[e = _acceptACK -> -> 1 `i `uc ]
[; ;dhcp_client.c: 284: break;
"284
[e $U 65  ]
[; ;dhcp_client.c: 285: case RENEWLEASE:
"285
[e :U 70 ]
[; ;dhcp_client.c: 286: acceptOffers = 0;
"286
[e = _acceptOffers -> -> 0 `i `uc ]
[; ;dhcp_client.c: 287: acceptNACK = 1;
"287
[e = _acceptNACK -> -> 1 `i `uc ]
[; ;dhcp_client.c: 288: acceptACK = 1;
"288
[e = _acceptACK -> -> 1 `i `uc ]
[; ;dhcp_client.c: 289: break;
"289
[e $U 65  ]
[; ;dhcp_client.c: 290: case BOUND:
"290
[e :U 71 ]
[; ;dhcp_client.c: 291: acceptOffers = 0;
"291
[e = _acceptOffers -> -> 0 `i `uc ]
[; ;dhcp_client.c: 292: acceptNACK = 0;
"292
[e = _acceptNACK -> -> 0 `i `uc ]
[; ;dhcp_client.c: 293: acceptACK = 0;
"293
[e = _acceptACK -> -> 0 `i `uc ]
[; ;dhcp_client.c: 294: break;
"294
[e $U 65  ]
"295
}
[; ;dhcp_client.c: 295: }
[e $U 65  ]
"270
[e :U 66 ]
[e [\ . _dhcpState 0 , $ . `E784 0 68
 , $ . `E784 1 69
 , $ . `E784 2 70
 , $ . `E784 3 71
 67 ]
"295
[e :U 65 ]
[; ;dhcp_client.c: 297: if(acceptOffers || declineOffers || acceptNACK || acceptACK)
"297
[e $ ! || || || != -> _acceptOffers `i -> -> -> 0 `i `uc `i != -> _declineOffers `i -> -> -> 0 `i `uc `i != -> _acceptNACK `i -> -> -> 0 `i `uc `i != -> _acceptACK `i -> -> -> 0 `i `uc `i 72  ]
[; ;dhcp_client.c: 298: {
"298
{
"299
[v _localData `S36 ~T0 @X0 1 a ]
[v F838 `S36 ~T0 @X0 1 s ]
[i F838
:U ..
:U ..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
:U ..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
..
:U ..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
..
-> -> -> 0 `i `l `ul
-> -> -> 0 `i `l `ul
-> -> -> 3600 `i `l `ul
-> -> -> 3600 `i `l `ul
-> -> -> 0 `i `l `ul
..
..
]
[; ;dhcp_client.c: 299: dhcp_data_t localData = {0,0,0,0,0,0,0,0,0,3600,3600,0};
[e = _localData F838 ]
[; ;dhcp_client.c: 300: localData.xidValue = dhcpData.xidValue;
"300
[e = . _localData 6 . _dhcpData 6 ]
[; ;dhcp_client.c: 302: if(length > 240)
"302
[e $ ! > _length -> 240 `i 73  ]
[; ;dhcp_client.c: 303: {
"303
{
[; ;dhcp_client.c: 304: if(0x0201 == ETH_Read16())
"304
[e $ ! == -> -> 513 `i `ui ( _ETH_Read16 ..  74  ]
[; ;dhcp_client.c: 305: {
"305
{
[; ;dhcp_client.c: 306: if(0x06 == ETH_Read8())
"306
[e $ ! == -> 6 `i -> ( _ETH_Read8 ..  `i 75  ]
[; ;dhcp_client.c: 307: {
"307
{
[; ;dhcp_client.c: 308: ETH_Read8();
"308
[e ( _ETH_Read8 ..  ]
[; ;dhcp_client.c: 309: if(dhcpData.xidValue == ETH_Read32())
"309
[e $ ! == . _dhcpData 6 ( _ETH_Read32 ..  76  ]
[; ;dhcp_client.c: 310: {
"310
{
[; ;dhcp_client.c: 311: ETH_Read16();
"311
[e ( _ETH_Read16 ..  ]
[; ;dhcp_client.c: 312: ETH_Read16();
"312
[e ( _ETH_Read16 ..  ]
[; ;dhcp_client.c: 313: ETH_Read32();
"313
[e ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 314: localData.dhcpIPAddress = ETH_Read32();
"314
[e = . _localData 0 ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 315: if((localData.dhcpIPAddress != 0xFFFFFFFF) && (localData.dhcpIPAddress != 0x7F000001))
"315
[e $ ! && != . _localData 0 -> -1 `ul != . _localData 0 -> -> 2130706433 `l `ul 77  ]
[; ;dhcp_client.c: 316: {
"316
{
[; ;dhcp_client.c: 317: siaddr = ETH_Read32();
"317
[e = _siaddr ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 318: if((siaddr != 0xFFFFFFFF) && (siaddr != 0x7F000001))
"318
[e $ ! && != _siaddr -> -1 `ul != _siaddr -> -> 2130706433 `l `ul 78  ]
[; ;dhcp_client.c: 319: {
"319
{
[; ;dhcp_client.c: 320: ETH_Read32();
"320
[e ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 321: ETH_ReadBlock(chaddr,sizeof(chaddr));
"321
[e ( _ETH_ReadBlock (2 , -> &U _chaddr `*v -> # _chaddr `ui ]
[; ;dhcp_client.c: 322: if(memcmp(chaddr, &hostMacAddress.s, 6)== 0 || memcmp(chaddr, &broadcastMAC.s, 6)== 0 || (strlen(chaddr)== 0))
"322
[e $ ! || || == ( _memcmp (3 , , -> &U _chaddr `*Cv -> &U . _hostMacAddress 1 `*Cv -> -> 6 `i `ui -> 0 `i == ( _memcmp (3 , , -> &U _chaddr `*Cv -> &U . _broadcastMAC 1 `*Cv -> -> 6 `i `ui -> 0 `i == ( _strlen (1 -> &U _chaddr `*Cuc -> -> 0 `i `ui 79  ]
[; ;dhcp_client.c: 323: {
"323
{
[; ;dhcp_client.c: 324: ETH_Dump(64);
"324
[e ( _ETH_Dump (1 -> -> 64 `i `ui ]
[; ;dhcp_client.c: 325: ETH_Dump(128);
"325
[e ( _ETH_Dump (1 -> -> 128 `i `ui ]
[; ;dhcp_client.c: 326: if(ETH_Read32() == 0x63825363)
"326
[e $ ! == ( _ETH_Read32 ..  -> -> 1669485411 `l `ul 80  ]
[; ;dhcp_client.c: 327: {
"327
{
[; ;dhcp_client.c: 328: length -= 240;
"328
[e =- _length -> 240 `i ]
[; ;dhcp_client.c: 329: while(length>0)
"329
[e $U 81  ]
[e :U 82 ]
[; ;dhcp_client.c: 330: {
"330
{
"332
[v _option `uc ~T0 @X0 1 a ]
[v _optionLength `uc ~T0 @X0 1 a ]
[; ;dhcp_client.c: 332: uint8_t option, optionLength;
[; ;dhcp_client.c: 333: option = ETH_Read8();
"333
[e = _option ( _ETH_Read8 ..  ]
[; ;dhcp_client.c: 334: optionLength = ETH_Read8();
"334
[e = _optionLength ( _ETH_Read8 ..  ]
[; ;dhcp_client.c: 335: length -= 2 + optionLength;
"335
[e =- _length + -> 2 `i -> _optionLength `i ]
[; ;dhcp_client.c: 336: switch(option)
"336
[e $U 85  ]
[; ;dhcp_client.c: 337: {
"337
{
[; ;dhcp_client.c: 338: case 1:
"338
[e :U 86 ]
[; ;dhcp_client.c: 339: localData.subnetMask = ETH_Read32();
"339
[e = . _localData 1 ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 340: break;
"340
[e $U 84  ]
[; ;dhcp_client.c: 341: case 3:
"341
[e :U 87 ]
[; ;dhcp_client.c: 342: localData.routerAddress = ETH_Read32();
"342
[e = . _localData 2 ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 343: break;
"343
[e $U 84  ]
[; ;dhcp_client.c: 344: case 6:
"344
[e :U 88 ]
[; ;dhcp_client.c: 345: {
"345
{
"346
[v _count `uc ~T0 @X0 1 a ]
[; ;dhcp_client.c: 346: uint8_t count=0;
[e = _count -> -> 0 `i `uc ]
[; ;dhcp_client.c: 347: while(optionLength >= 4)
"347
[e $U 89  ]
[e :U 90 ]
[; ;dhcp_client.c: 348: {
"348
{
"349
[v _a `ul ~T0 @X0 1 a ]
[; ;dhcp_client.c: 349: uint32_t a = ETH_Read32();
[e = _a ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 350: if(count < 2)
"350
[e $ ! < -> _count `i -> 2 `i 92  ]
[; ;dhcp_client.c: 351: localData.dnsAddress[count++] = a;
"351
[e = *U + &U . _localData 3 * -> ++ _count -> -> 1 `i `uc `ux -> -> # *U &U . _localData 3 `ui `ux _a ]
[e :U 92 ]
[; ;dhcp_client.c: 353: optionLength -= 4;
"353
[e =- _optionLength -> -> 4 `i `uc ]
"354
}
[e :U 89 ]
"347
[e $ >= -> _optionLength `i -> 4 `i 90  ]
[e :U 91 ]
"355
}
[; ;dhcp_client.c: 354: }
[; ;dhcp_client.c: 355: }
[; ;dhcp_client.c: 356: break;
"356
[e $U 84  ]
[; ;dhcp_client.c: 357: case 42:
"357
[e :U 93 ]
[; ;dhcp_client.c: 358: {
"358
{
"359
[v _count `uc ~T0 @X0 1 a ]
[; ;dhcp_client.c: 359: uint8_t count=0;
[e = _count -> -> 0 `i `uc ]
[; ;dhcp_client.c: 360: while(optionLength >= 4)
"360
[e $U 94  ]
[e :U 95 ]
[; ;dhcp_client.c: 361: {
"361
{
"362
[v _a `ul ~T0 @X0 1 a ]
[; ;dhcp_client.c: 362: uint32_t a = ETH_Read32();
[e = _a ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 363: if(count < 2)
"363
[e $ ! < -> _count `i -> 2 `i 97  ]
[; ;dhcp_client.c: 364: localData.ntpAddress[count++] = a;
"364
[e = *U + &U . _localData 4 * -> ++ _count -> -> 1 `i `uc `ux -> -> # *U &U . _localData 4 `ui `ux _a ]
[e :U 97 ]
[; ;dhcp_client.c: 366: optionLength -= 4;
"366
[e =- _optionLength -> -> 4 `i `uc ]
"367
}
[e :U 94 ]
"360
[e $ >= -> _optionLength `i -> 4 `i 95  ]
[e :U 96 ]
"368
}
[; ;dhcp_client.c: 367: }
[; ;dhcp_client.c: 368: }
[; ;dhcp_client.c: 369: break;
"369
[e $U 84  ]
[; ;dhcp_client.c: 370: case 51:
"370
[e :U 98 ]
[; ;dhcp_client.c: 371: if(optionLength >= 4)
"371
[e $ ! >= -> _optionLength `i -> 4 `i 99  ]
[; ;dhcp_client.c: 372: {
"372
{
[; ;dhcp_client.c: 373: localData.t1 = ETH_Read32();
"373
[e = . _localData 7 ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 374: localData.t2 = localData.t1 >> 1;
"374
[e = . _localData 8 >> . _localData 7 -> 1 `i ]
[; ;dhcp_client.c: 375: optionLength -= 4;
"375
[e =- _optionLength -> -> 4 `i `uc ]
"376
}
[e :U 99 ]
[; ;dhcp_client.c: 376: }
[; ;dhcp_client.c: 377: break;
"377
[e $U 84  ]
[; ;dhcp_client.c: 378: case 54:
"378
[e :U 100 ]
[; ;dhcp_client.c: 379: localData.leasee_ip = ETH_Read32();
"379
[e = . _localData 9 ( _ETH_Read32 ..  ]
[; ;dhcp_client.c: 380: optionLength -= 4;
"380
[e =- _optionLength -> -> 4 `i `uc ]
[; ;dhcp_client.c: 381: break;
"381
[e $U 84  ]
[; ;dhcp_client.c: 382: case 53:
"382
[e :U 101 ]
[; ;dhcp_client.c: 383: messageType=ETH_Read8();
"383
[e = _messageType ( _ETH_Read8 ..  ]
[; ;dhcp_client.c: 384: optionLength -=1;
"384
[e =- _optionLength -> -> 1 `i `uc ]
[; ;dhcp_client.c: 385: break;
"385
[e $U 84  ]
[; ;dhcp_client.c: 386: default:
"386
[e :U 102 ]
[; ;dhcp_client.c: 387: ETH_Dump(optionLength);
"387
[e ( _ETH_Dump (1 -> _optionLength `ui ]
[; ;dhcp_client.c: 388: break;
"388
[e $U 84  ]
"389
}
[; ;dhcp_client.c: 389: }
[e $U 84  ]
"336
[e :U 85 ]
[e [\ _option , $ -> -> 1 `i `uc 86
 , $ -> -> 3 `i `uc 87
 , $ -> -> 6 `i `uc 88
 , $ -> -> 42 `i `uc 93
 , $ -> -> 51 `i `uc 98
 , $ -> -> 54 `i `uc 100
 , $ -> -> 53 `i `uc 101
 102 ]
"389
[e :U 84 ]
"390
}
[e :U 81 ]
"329
[e $ > _length -> 0 `i 82  ]
[e :U 83 ]
"391
}
[; ;dhcp_client.c: 390: }
[; ;dhcp_client.c: 391: }
[e $U 103  ]
"392
[e :U 80 ]
[; ;dhcp_client.c: 392: else
[; ;dhcp_client.c: 393: {
"393
{
"395
}
[e :U 103 ]
"396
}
[; ;dhcp_client.c: 395: }
[; ;dhcp_client.c: 396: }
[e $U 104  ]
"397
[e :U 79 ]
[; ;dhcp_client.c: 397: else
[; ;dhcp_client.c: 398: {
"398
{
"400
}
[e :U 104 ]
"401
}
[; ;dhcp_client.c: 400: }
[; ;dhcp_client.c: 401: }
[e $U 105  ]
"402
[e :U 78 ]
[; ;dhcp_client.c: 402: else
[; ;dhcp_client.c: 403: {
"403
{
"405
}
[e :U 105 ]
"406
}
[; ;dhcp_client.c: 405: }
[; ;dhcp_client.c: 406: }
[e $U 106  ]
"407
[e :U 77 ]
[; ;dhcp_client.c: 407: else
[; ;dhcp_client.c: 408: {
"408
{
"410
}
[e :U 106 ]
"411
}
[; ;dhcp_client.c: 410: }
[; ;dhcp_client.c: 411: }
[e $U 107  ]
"412
[e :U 76 ]
[; ;dhcp_client.c: 412: else
[; ;dhcp_client.c: 413: {
"413
{
"415
}
[e :U 107 ]
"416
}
[; ;dhcp_client.c: 415: }
[; ;dhcp_client.c: 416: }
[e $U 108  ]
"417
[e :U 75 ]
[; ;dhcp_client.c: 417: else
[; ;dhcp_client.c: 418: {
"418
{
"420
}
[e :U 108 ]
"421
}
[; ;dhcp_client.c: 420: }
[; ;dhcp_client.c: 421: }
[e $U 109  ]
"422
[e :U 74 ]
[; ;dhcp_client.c: 422: else
[; ;dhcp_client.c: 423: {
"423
{
"425
}
[e :U 109 ]
"426
}
[; ;dhcp_client.c: 425: }
[; ;dhcp_client.c: 426: }
[e $U 110  ]
"427
[e :U 73 ]
[; ;dhcp_client.c: 427: else
[; ;dhcp_client.c: 428: {
"428
{
"430
}
[e :U 110 ]
[; ;dhcp_client.c: 430: }
[; ;dhcp_client.c: 431: switch(messageType)
"431
[e $U 112  ]
[; ;dhcp_client.c: 432: {
"432
{
[; ;dhcp_client.c: 433: case DHCP_OFFER:
"433
[e :U 113 ]
[; ;dhcp_client.c: 434: if(acceptOffers)
"434
[e $ ! != -> _acceptOffers `i -> -> -> 0 `i `uc `i 114  ]
[; ;dhcp_client.c: 435: {
"435
{
[; ;dhcp_client.c: 436: dhcpData = localData;
"436
[e = _dhcpData _localData ]
[; ;dhcp_client.c: 437: sendDHCPREQUEST();
"437
[e ( _sendDHCPREQUEST ..  ]
[; ;dhcp_client.c: 438: dhcpState.rxClientState = REQUESTING;
"438
[e = . _dhcpState 0 . `E784 1 ]
"439
}
[e :U 114 ]
[; ;dhcp_client.c: 439: }
[; ;dhcp_client.c: 440: if(declineOffers)
"440
[e $ ! != -> _declineOffers `i -> -> -> 0 `i `uc `i 115  ]
[; ;dhcp_client.c: 441: {
"441
{
[; ;dhcp_client.c: 442: sendDHCPDECLINE();
"442
[e ( _sendDHCPDECLINE ..  ]
"443
}
[e :U 115 ]
[; ;dhcp_client.c: 443: }
[; ;dhcp_client.c: 444: break;
"444
[e $U 111  ]
[; ;dhcp_client.c: 445: case DHCP_ACK:
"445
[e :U 116 ]
[; ;dhcp_client.c: 446: if(acceptACK)
"446
[e $ ! != -> _acceptACK `i -> -> -> 0 `i `uc `i 117  ]
[; ;dhcp_client.c: 447: {
"447
{
[; ;dhcp_client.c: 448: dhcpData.t1 = localData.t1;
"448
[e = . _dhcpData 7 . _localData 7 ]
[; ;dhcp_client.c: 449: dhcpData.t2 = localData.t2;
"449
[e = . _dhcpData 8 . _localData 8 ]
[; ;dhcp_client.c: 450: do{ ip_database_info.ipv4_myAddress = dhcpData.dhcpIPAddress; } while(0);
"450
[e :U 120 ]
{
[e = . _ip_database_info 0 . _dhcpData 0 ]
}
[e :U 119 ]
[; ;dhcp_client.c: 451: do{ if(0 < 2) ip_database_info.ipv4_dns[0] = dhcpData.dnsAddress[0]; } while(0);
"451
[e :U 123 ]
{
[e $ ! < -> 0 `i -> 2 `i 124  ]
[e = *U + &U . _ip_database_info 1 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _ip_database_info 1 `ui `ux *U + &U . _dhcpData 3 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _dhcpData 3 `ui `ux ]
[e :U 124 ]
}
[e :U 122 ]
[; ;dhcp_client.c: 452: do{ if(1 < 2) ip_database_info.ipv4_dns[1] = dhcpData.dnsAddress[1]; } while(0);
"452
[e :U 127 ]
{
[e $ ! < -> 1 `i -> 2 `i 128  ]
[e = *U + &U . _ip_database_info 1 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _ip_database_info 1 `ui `ux *U + &U . _dhcpData 3 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _dhcpData 3 `ui `ux ]
[e :U 128 ]
}
[e :U 126 ]
[; ;dhcp_client.c: 453: do{ ip_database_info.ipv4_router = dhcpData.routerAddress; } while(0);
"453
[e :U 131 ]
{
[e = . _ip_database_info 3 . _dhcpData 2 ]
}
[e :U 130 ]
[; ;dhcp_client.c: 454: do{ ip_database_info.ipv4_gateway = dhcpData.gatewayAddress; } while(0);
"454
[e :U 134 ]
{
[e = . _ip_database_info 4 . _dhcpData 5 ]
}
[e :U 133 ]
[; ;dhcp_client.c: 455: do{ ip_database_info.ipv4_subnetMask = dhcpData.subnetMask; } while(0);
"455
[e :U 137 ]
{
[e = . _ip_database_info 2 . _dhcpData 1 ]
}
[e :U 136 ]
[; ;dhcp_client.c: 456: if(dhcpData.ntpAddress[0])
"456
[e $ ! != *U + &U . _dhcpData 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _dhcpData 4 `ui `ux -> -> 0 `i `ul 138  ]
[; ;dhcp_client.c: 457: {
"457
{
[; ;dhcp_client.c: 458: do{ if(0 < 2) ip_database_info.ipv4_ntpAddress[0] = dhcpData.ntpAddress[0]; } while(0);
"458
[e :U 141 ]
{
[e $ ! < -> 0 `i -> 2 `i 142  ]
[e = *U + &U . _ip_database_info 5 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _ip_database_info 5 `ui `ux *U + &U . _dhcpData 4 * -> -> -> 0 `i `ui `ux -> -> # *U &U . _dhcpData 4 `ui `ux ]
[e :U 142 ]
}
[e :U 140 ]
[; ;dhcp_client.c: 459: if(dhcpData.ntpAddress[1])
"459
[e $ ! != *U + &U . _dhcpData 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _dhcpData 4 `ui `ux -> -> 0 `i `ul 143  ]
[; ;dhcp_client.c: 460: do{ if(1 < 2) ip_database_info.ipv4_ntpAddress[1] = dhcpData.ntpAddress[1]; } while(0);
"460
[e :U 146 ]
{
[e $ ! < -> 1 `i -> 2 `i 147  ]
[e = *U + &U . _ip_database_info 5 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _ip_database_info 5 `ui `ux *U + &U . _dhcpData 4 * -> -> -> 1 `i `ui `ux -> -> # *U &U . _dhcpData 4 `ui `ux ]
[e :U 147 ]
}
[e :U 145 ]
[e :U 143 ]
"461
}
[e :U 138 ]
[; ;dhcp_client.c: 461: }
[; ;dhcp_client.c: 462: dhcpState.rxClientState = BOUND;
"462
[e = . _dhcpState 0 . `E784 3 ]
"463
}
[e :U 117 ]
[; ;dhcp_client.c: 463: }
[; ;dhcp_client.c: 464: break;
"464
[e $U 111  ]
[; ;dhcp_client.c: 465: case DHCP_NACK:
"465
[e :U 148 ]
[; ;dhcp_client.c: 466: if(acceptNACK)
"466
[e $ ! != -> _acceptNACK `i -> -> -> 0 `i `uc `i 149  ]
[; ;dhcp_client.c: 467: {
"467
{
[; ;dhcp_client.c: 468: dhcpData.t1 = 0;
"468
[e = . _dhcpData 7 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 469: dhcpData.t2 = 0;
"469
[e = . _dhcpData 8 -> -> -> 0 `i `l `ul ]
[; ;dhcp_client.c: 470: dhcpState.rxClientState = SELECTING;
"470
[e = . _dhcpState 0 . `E784 0 ]
"471
}
[e :U 149 ]
[; ;dhcp_client.c: 471: }
[; ;dhcp_client.c: 472: break;
"472
[e $U 111  ]
[; ;dhcp_client.c: 473: default:
"473
[e :U 150 ]
[; ;dhcp_client.c: 474: break;
"474
[e $U 111  ]
"475
}
[; ;dhcp_client.c: 475: }
[e $U 111  ]
"431
[e :U 112 ]
[e [\ _messageType , $ -> . `E767 1 `uc 113
 , $ -> . `E767 4 `uc 116
 , $ -> . `E767 5 `uc 148
 150 ]
"475
[e :U 111 ]
"476
}
[; ;dhcp_client.c: 476: }
[e $U 151  ]
"477
[e :U 72 ]
[; ;dhcp_client.c: 477: else
[; ;dhcp_client.c: 478: {
"478
{
"480
}
[e :U 151 ]
[; ;dhcp_client.c: 480: }
[; ;dhcp_client.c: 481: }
"481
[e :UE 64 ]
}
"483
[v _DHCP_WriteZeros `(v ~T0 @X0 1 ef1`ui ]
"484
{
[; ;dhcp_client.c: 483: void DHCP_WriteZeros(uint16_t length)
[; ;dhcp_client.c: 484: {
[e :U _DHCP_WriteZeros ]
"483
[v _length `ui ~T0 @X0 1 r1 ]
"484
[f ]
[; ;dhcp_client.c: 485: while(length--)
"485
[e $U 153  ]
[e :U 154 ]
[; ;dhcp_client.c: 486: {
"486
{
[; ;dhcp_client.c: 487: ETH_Write8(0);
"487
[e ( _ETH_Write8 (1 -> -> 0 `i `uc ]
"488
}
[e :U 153 ]
"485
[e $ != -- _length -> -> 1 `i `ui -> -> 0 `i `ui 154  ]
[e :U 155 ]
[; ;dhcp_client.c: 488: }
[; ;dhcp_client.c: 489: }
"489
[e :UE 152 ]
}
