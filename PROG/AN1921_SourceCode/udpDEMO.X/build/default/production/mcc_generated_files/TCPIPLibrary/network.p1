Version 3.2 HI-TECH Software Intermediate Code
"99 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Init `(v ~T0 @X0 0 ef ]
"57 mcc_generated_files/TCPIPLibrary/arpv4.h
[v _ARPV4_Init `(v ~T0 @X0 0 ef ]
"66 mcc_generated_files/TCPIPLibrary/ipv4.h
[v _IPV4_Init `(v ~T0 @X0 0 ef ]
"64 mcc_generated_files/TCPIPLibrary/dhcp_client.h
[v _DHCP_init `(v ~T0 @X0 0 ef ]
"31 mcc_generated_files/TCPIPLibrary/rtcc.h
[v _rtcc_init `(v ~T0 @X0 0 ef ]
"61 mcc_generated_files/TCPIPLibrary/network.h
[v _Network_WaitForLink `(v ~T0 @X0 0 ef ]
"62
[v _timersInit `(v ~T0 @X0 0 ef ]
"30 C:\Program Files (x86)\Microchip\xc8\v1.42\include\time.h
[v _time `(l ~T0 @X0 0 ef1`*l ]
"148 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_CheckLinkUp `(uc ~T0 @X0 0 ef ]
"100
[v _ETH_EventHandler `(v ~T0 @X0 0 ef ]
"59 mcc_generated_files/TCPIPLibrary/network.h
[v _Network_Read `(v ~T0 @X0 0 ef ]
"86 mcc_generated_files/TCPIPLibrary/dhcp_client.h
[v _DHCP_Manage `(v ~T0 @X0 0 ef ]
"75 mcc_generated_files/TCPIPLibrary/arpv4.h
[v _ARPV4_Update `(v ~T0 @X0 0 ef ]
"67 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[u S6 `ui 1 `ui 1 `ui 1 ]
[n S6 . type length tpid ]
"63
[s S5 `uc -> 6 `i `uc -> 6 `i `S6 1 ]
[n S5 . destinationMAC sourceMAC id ]
"71 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[s S32 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 :3 `uc 1 `ui 1 `ui 1 ]
[n S32 . error pktReady up idle linkChange bufferBusy . saveRDPT saveWRPT ]
"93
[v _ethData `VS32 ~T0 @X0 0 e ]
"101
[v _ETH_NextPacketUpdate `(v ~T0 @X0 0 ef ]
"106
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"115 mcc_generated_files/TCPIPLibrary/network.c
[c E417 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .. ]
[n E417 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED EAPoL_PACKET_FAILURE INCORRECT_IPV4_HLEN IPV4_NO_OPTIONS TX_QUEUED  ]
"69 mcc_generated_files/TCPIPLibrary/arpv4.h
[v _ARPV4_Packet `(E417 ~T0 @X0 0 ef ]
"73 mcc_generated_files/TCPIPLibrary/ipv4.h
[v _IPV4_Packet `(E417 ~T0 @X0 0 ef ]
"112 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Flush `(v ~T0 @X0 0 ef ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;time.h: 8: typedef long time_t;
[; ;time.h: 9: struct tm {
[; ;time.h: 10: int tm_sec;
[; ;time.h: 11: int tm_min;
[; ;time.h: 12: int tm_hour;
[; ;time.h: 13: int tm_mday;
[; ;time.h: 14: int tm_mon;
[; ;time.h: 15: int tm_year;
[; ;time.h: 16: int tm_wday;
[; ;time.h: 17: int tm_yday;
[; ;time.h: 18: int tm_isdst;
[; ;time.h: 19: };
[; ;time.h: 25: extern int time_zone;
[; ;time.h: 30: extern time_t time(time_t *);
[; ;time.h: 31: extern int stime(time_t *);
[; ;time.h: 47: extern char * asctime(const struct tm *) ;
[; ;time.h: 48: extern char * ctime(const time_t *) ;
[; ;time.h: 49: extern struct tm * gmtime(const time_t *) ;
[; ;time.h: 50: extern struct tm * localtime(const time_t *) ;
[; ;time.h: 51: extern size_t strftime(char *, size_t, const char *, const struct tm *) ;
[; ;time.h: 52: extern time_t mktime(struct tm *);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 38: typedef signed long int int32_t;
[; ;stdint.h: 45: typedef unsigned char uint8_t;
[; ;stdint.h: 51: typedef unsigned int uint16_t;
[; ;stdint.h: 67: typedef unsigned long int uint32_t;
[; ;stdint.h: 75: typedef signed char int_least8_t;
[; ;stdint.h: 82: typedef signed int int_least16_t;
[; ;stdint.h: 104: typedef signed long int int_least32_t;
[; ;stdint.h: 111: typedef unsigned char uint_least8_t;
[; ;stdint.h: 117: typedef unsigned int uint_least16_t;
[; ;stdint.h: 136: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 145: typedef signed char int_fast8_t;
[; ;stdint.h: 152: typedef signed int int_fast16_t;
[; ;stdint.h: 174: typedef signed long int int_fast32_t;
[; ;stdint.h: 181: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 187: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 206: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 212: typedef int32_t intmax_t;
[; ;stdint.h: 217: typedef uint32_t uintmax_t;
[; ;stdint.h: 222: typedef int16_t intptr_t;
[; ;stdint.h: 227: typedef uint16_t uintptr_t;
[; ;tcpip_types.h: 49: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;tcpip_types.h: 51: typedef union
[; ;tcpip_types.h: 52: {
[; ;tcpip_types.h: 53: uint16_t value;
[; ;tcpip_types.h: 54: struct
[; ;tcpip_types.h: 55: {
[; ;tcpip_types.h: 56: unsigned int priorityCodePoint:3;
[; ;tcpip_types.h: 57: unsigned int dropEligible:1;
[; ;tcpip_types.h: 58: unsigned int vlanId:12;
[; ;tcpip_types.h: 59: };
[; ;tcpip_types.h: 60: } tci_t;
[; ;tcpip_types.h: 62: typedef struct
[; ;tcpip_types.h: 63: {
[; ;tcpip_types.h: 64: uint8_t destinationMAC[6];
[; ;tcpip_types.h: 65: uint8_t sourceMAC[6];
[; ;tcpip_types.h: 66: union
[; ;tcpip_types.h: 67: {
[; ;tcpip_types.h: 68: uint16_t type;
[; ;tcpip_types.h: 69: uint16_t length;
[; ;tcpip_types.h: 70: uint16_t tpid;
[; ;tcpip_types.h: 71: }id;
[; ;tcpip_types.h: 76: } ethernetFrame_t;
"78 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;tcpip_types.h: 78: uint8_t Control_Byte = 0x00;
[; ;tcpip_types.h: 131: typedef struct
[; ;tcpip_types.h: 132: {
[; ;tcpip_types.h: 133: unsigned ihl:4;
[; ;tcpip_types.h: 134: unsigned version:4;
[; ;tcpip_types.h: 135: unsigned ecn:2;
[; ;tcpip_types.h: 136: unsigned dscp:6;
[; ;tcpip_types.h: 137: uint16_t length;
[; ;tcpip_types.h: 138: uint16_t identifcation;
[; ;tcpip_types.h: 139: unsigned fragmentOffsetHigh:5;
[; ;tcpip_types.h: 140: unsigned :1;
[; ;tcpip_types.h: 141: unsigned dontFragment:1;
[; ;tcpip_types.h: 142: unsigned moreFragments:1;
[; ;tcpip_types.h: 143: uint8_t fragmentOffsetLow;
[; ;tcpip_types.h: 144: uint8_t timeToLive;
[; ;tcpip_types.h: 145: uint8_t protocol;
[; ;tcpip_types.h: 146: uint16_t headerCksm;
[; ;tcpip_types.h: 147: uint32_t srcIpAddress;
[; ;tcpip_types.h: 148: uint32_t dstIpAddress;
[; ;tcpip_types.h: 151: } ipv4Header_t;
[; ;tcpip_types.h: 154: typedef struct
[; ;tcpip_types.h: 155: {
[; ;tcpip_types.h: 156: uint32_t srcIpAddress;
[; ;tcpip_types.h: 157: uint32_t dstIpAddress;
[; ;tcpip_types.h: 158: uint8_t protocol;
[; ;tcpip_types.h: 159: uint8_t z;
[; ;tcpip_types.h: 160: uint16_t length;
[; ;tcpip_types.h: 161: } ipv4_pseudo_header_t;
[; ;tcpip_types.h: 163: typedef struct
[; ;tcpip_types.h: 164: {
[; ;tcpip_types.h: 165: union
[; ;tcpip_types.h: 166: {
[; ;tcpip_types.h: 167: uint16_t typeCode;
[; ;tcpip_types.h: 168: struct
[; ;tcpip_types.h: 169: {
[; ;tcpip_types.h: 170: uint8_t code;
[; ;tcpip_types.h: 171: uint8_t type;
[; ;tcpip_types.h: 172: };
[; ;tcpip_types.h: 173: };
[; ;tcpip_types.h: 174: uint16_t checksum;
[; ;tcpip_types.h: 175: } icmpHeader_t;
[; ;tcpip_types.h: 178: typedef struct
[; ;tcpip_types.h: 179: {
[; ;tcpip_types.h: 180: union
[; ;tcpip_types.h: 181: {
[; ;tcpip_types.h: 182: uint16_t typeCode;
[; ;tcpip_types.h: 183: struct
[; ;tcpip_types.h: 184: {
[; ;tcpip_types.h: 185: uint8_t code;
[; ;tcpip_types.h: 186: uint8_t type;
[; ;tcpip_types.h: 187: };
[; ;tcpip_types.h: 188: };
[; ;tcpip_types.h: 189: uint16_t checksum;
[; ;tcpip_types.h: 190: } icmpv6Header_t;
[; ;tcpip_types.h: 193: typedef enum
[; ;tcpip_types.h: 194: {
[; ;tcpip_types.h: 195: ECHO_REPLY = 0x0000,
[; ;tcpip_types.h: 197: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;tcpip_types.h: 198: DEST_HOST_UNREACHABLE = 0x0301,
[; ;tcpip_types.h: 199: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;tcpip_types.h: 200: DEST_PORT_UNREACHABLE = 0x0303,
[; ;tcpip_types.h: 201: FRAGMENTATION_REQUIRED = 0x0304,
[; ;tcpip_types.h: 202: SOURCE_ROUTE_FAILED = 0x0305,
[; ;tcpip_types.h: 203: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;tcpip_types.h: 204: SOURCE_HOST_ISOLATED = 0x0307,
[; ;tcpip_types.h: 205: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;tcpip_types.h: 206: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;tcpip_types.h: 207: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;tcpip_types.h: 208: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;tcpip_types.h: 209: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;tcpip_types.h: 210: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;tcpip_types.h: 211: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;tcpip_types.h: 213: SOURCE_QUENCH = 0x0400,
[; ;tcpip_types.h: 215: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;tcpip_types.h: 216: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;tcpip_types.h: 217: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;tcpip_types.h: 218: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;tcpip_types.h: 220: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;tcpip_types.h: 222: ECHO_REQUEST = 0x0800,
[; ;tcpip_types.h: 225: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_1 = 0x082A,
[; ;tcpip_types.h: 226: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_2 = 0x08FC,
[; ;tcpip_types.h: 228: ROUTER_ADVERTISEMENT = 0x0900,
[; ;tcpip_types.h: 229: ROUTER_SOLICITATION = 0x0A00,
[; ;tcpip_types.h: 230: TRACEROUTE = 0x3000
[; ;tcpip_types.h: 231: } icmpTypeCodes_t;
[; ;tcpip_types.h: 233: typedef struct
[; ;tcpip_types.h: 234: {
[; ;tcpip_types.h: 235: uint16_t srcPort;
[; ;tcpip_types.h: 236: uint16_t dstPort;
[; ;tcpip_types.h: 237: uint16_t length;
[; ;tcpip_types.h: 238: uint16_t checksum;
[; ;tcpip_types.h: 239: } udpHeader_t;
[; ;tcpip_types.h: 241: typedef struct
[; ;tcpip_types.h: 242: {
[; ;tcpip_types.h: 243: uint16_t sourcePort;
[; ;tcpip_types.h: 244: uint16_t destPort;
[; ;tcpip_types.h: 245: uint32_t sequenceNumber;
[; ;tcpip_types.h: 246: uint32_t ackNumber;
[; ;tcpip_types.h: 247: union{
[; ;tcpip_types.h: 248: uint8_t byte13;
[; ;tcpip_types.h: 249: struct{
[; ;tcpip_types.h: 250: uint8_t ns:1;
[; ;tcpip_types.h: 251: uint8_t reserved:3;
[; ;tcpip_types.h: 252: uint8_t dataOffset:4;
[; ;tcpip_types.h: 253: };
[; ;tcpip_types.h: 254: };
[; ;tcpip_types.h: 256: union{
[; ;tcpip_types.h: 257: uint8_t flags;
[; ;tcpip_types.h: 258: struct{
[; ;tcpip_types.h: 259: uint8_t fin:1;
[; ;tcpip_types.h: 260: uint8_t syn:1;
[; ;tcpip_types.h: 261: uint8_t rst:1;
[; ;tcpip_types.h: 262: uint8_t psh:1;
[; ;tcpip_types.h: 263: uint8_t ack:1;
[; ;tcpip_types.h: 264: uint8_t urg:1;
[; ;tcpip_types.h: 265: uint8_t ece:1;
[; ;tcpip_types.h: 266: uint8_t cwr:1;
[; ;tcpip_types.h: 267: };
[; ;tcpip_types.h: 268: };
[; ;tcpip_types.h: 270: uint16_t windowSize;
[; ;tcpip_types.h: 271: uint16_t checksum;
[; ;tcpip_types.h: 272: uint16_t urgentPtr;
[; ;tcpip_types.h: 276: } tcpHeader_t;
[; ;tcpip_types.h: 278: typedef struct
[; ;tcpip_types.h: 279: {
[; ;tcpip_types.h: 280: uint16_t version:4;
[; ;tcpip_types.h: 281: uint16_t trafficClass:8;
[; ;tcpip_types.h: 282: uint16_t flowLabel1stNibble:4;
[; ;tcpip_types.h: 284: uint16_t flowLabelRest;
[; ;tcpip_types.h: 285: uint16_t payloadLength;
[; ;tcpip_types.h: 286: uint8_t nextHeader;
[; ;tcpip_types.h: 287: uint8_t hopLimit;
[; ;tcpip_types.h: 288: uint8_t srcAddress[16];
[; ;tcpip_types.h: 289: uint8_t dstAddress[16];
[; ;tcpip_types.h: 291: } ipv6Header_t;
[; ;tcpip_types.h: 294: typedef enum
[; ;tcpip_types.h: 295: {
[; ;tcpip_types.h: 296: HOPOPT_TCPIP = 0,
[; ;tcpip_types.h: 297: ICMP_TCPIP = 1,
[; ;tcpip_types.h: 298: IGMP_TCPIP = 2,
[; ;tcpip_types.h: 299: GGP_TCPIP = 3,
[; ;tcpip_types.h: 300: IPV4_TCPIP = 4,
[; ;tcpip_types.h: 301: ST_TCPIP = 5,
[; ;tcpip_types.h: 302: TCP_TCPIP = 6,
[; ;tcpip_types.h: 303: CBT_TCPIP = 7,
[; ;tcpip_types.h: 304: EGP_TCPIP = 8,
[; ;tcpip_types.h: 305: IGP_TCPIP = 9,
[; ;tcpip_types.h: 306: BBN_RCC_MON_TCPIP = 10,
[; ;tcpip_types.h: 307: NVP_II_TCPIP = 11,
[; ;tcpip_types.h: 308: PUP_TCPIP = 12,
[; ;tcpip_types.h: 309: ARGUS_TCPIP = 13,
[; ;tcpip_types.h: 310: EMCON_TCPIP = 14,
[; ;tcpip_types.h: 311: XNET_TCPIP = 15,
[; ;tcpip_types.h: 312: CHAOS_TCPIP = 16,
[; ;tcpip_types.h: 313: UDP_TCPIP = 17,
[; ;tcpip_types.h: 314: MUX_TCPIP = 18,
[; ;tcpip_types.h: 315: DCN_MEAS_TCPIP = 19,
[; ;tcpip_types.h: 316: HMP_TCPIP = 20,
[; ;tcpip_types.h: 317: PRM_TCPIP = 21,
[; ;tcpip_types.h: 318: XNS_IDP_TCPIP = 22,
[; ;tcpip_types.h: 319: TRUNK_1_TCPIP = 23,
[; ;tcpip_types.h: 320: TRUNK_2_TCPIP = 24,
[; ;tcpip_types.h: 321: LEAF_1_TCPIP = 25,
[; ;tcpip_types.h: 322: LEAF_2_TCPIP = 26,
[; ;tcpip_types.h: 323: RDP_TCPIP = 27,
[; ;tcpip_types.h: 324: IRTP_TCPIP = 28,
[; ;tcpip_types.h: 325: ISO_TP4_TCPIP = 29,
[; ;tcpip_types.h: 326: NETBLT_TCPIP = 30,
[; ;tcpip_types.h: 327: MFE_NSP_TCPIP = 31,
[; ;tcpip_types.h: 328: MERIT_INP_TCPIP = 32,
[; ;tcpip_types.h: 329: DCCP_TCPIP = 33,
[; ;tcpip_types.h: 330: THREEPC_TCPIP = 34,
[; ;tcpip_types.h: 331: IDPR_TCPIP = 35,
[; ;tcpip_types.h: 332: XTP_TCPIP = 36,
[; ;tcpip_types.h: 333: DDP_TCPIP = 37,
[; ;tcpip_types.h: 334: IDPR_CMTP_TCPIP = 38,
[; ;tcpip_types.h: 335: TPpp_TCPIP = 39,
[; ;tcpip_types.h: 336: IL_TCPIP = 40,
[; ;tcpip_types.h: 337: IPV6_TUNNEL_TCPIP = 41,
[; ;tcpip_types.h: 338: SDRP_TCPIP = 42,
[; ;tcpip_types.h: 339: IPV6_Route_TCPIP = 43,
[; ;tcpip_types.h: 340: IPV6_Frag_TCPIP = 44,
[; ;tcpip_types.h: 341: IDRP_TCPIP = 45,
[; ;tcpip_types.h: 342: RSVP_TCPIP = 46,
[; ;tcpip_types.h: 343: GRE_TCPIP = 47,
[; ;tcpip_types.h: 344: DSR_TCPIP = 48,
[; ;tcpip_types.h: 345: BNA_TCPIP = 49,
[; ;tcpip_types.h: 346: ESP_TCPIP = 50,
[; ;tcpip_types.h: 347: AH_TCPIP = 51,
[; ;tcpip_types.h: 348: I_NLSP_TCPIP = 52,
[; ;tcpip_types.h: 349: SWIPE_TCPIP = 53,
[; ;tcpip_types.h: 350: NARP_TCPIP = 54,
[; ;tcpip_types.h: 351: MOBILE_TCPIP = 55,
[; ;tcpip_types.h: 352: TLSP_TCPIP = 56,
[; ;tcpip_types.h: 353: SKIP_TCPIP = 57,
[; ;tcpip_types.h: 354: IPV6_ICMP_TCPIP = 58,
[; ;tcpip_types.h: 355: IPV6_NoNxt_TCPIP = 59,
[; ;tcpip_types.h: 356: IPV6_Opts_TCPIP = 60,
[; ;tcpip_types.h: 357: CFTP_TCPIP = 62,
[; ;tcpip_types.h: 358: SAT_EXPAK_TCPIP = 64,
[; ;tcpip_types.h: 359: KRYPTOLAN_TCPIP = 65,
[; ;tcpip_types.h: 360: RVD_TCPIP = 66,
[; ;tcpip_types.h: 361: IPPC_TCPIP = 67,
[; ;tcpip_types.h: 362: SAT_MON_TCPIP = 69,
[; ;tcpip_types.h: 363: VISA_TCPIP = 70,
[; ;tcpip_types.h: 364: IPCV_TCPIP = 71,
[; ;tcpip_types.h: 365: CPNX_TCPIP = 72,
[; ;tcpip_types.h: 366: CPHB_TCPIP = 73,
[; ;tcpip_types.h: 367: WSN_TCPIP = 74,
[; ;tcpip_types.h: 368: PVP_TCPIP = 75,
[; ;tcpip_types.h: 369: BR_SAT_MON_TCPIP = 76,
[; ;tcpip_types.h: 370: SUN_ND_TCPIP = 77,
[; ;tcpip_types.h: 371: WB_MON_TCPIP = 78,
[; ;tcpip_types.h: 372: WB_EXPAK_TCPIP = 79,
[; ;tcpip_types.h: 373: ISO_IP_TCPIP = 80,
[; ;tcpip_types.h: 374: VMTP_TCPIP = 81,
[; ;tcpip_types.h: 375: SECURE_VMTP_TCPIP = 82,
[; ;tcpip_types.h: 376: VINES_TCPIP = 83,
[; ;tcpip_types.h: 377: TTP_TCPIP = 84,
[; ;tcpip_types.h: 378: IPTM_TCPIP = 84,
[; ;tcpip_types.h: 379: NSFNET_IGP_TCPIP = 85,
[; ;tcpip_types.h: 380: DGP_TCPIP = 86,
[; ;tcpip_types.h: 381: TCF_TCPIP = 87,
[; ;tcpip_types.h: 382: EIGRP_TCPIP = 88,
[; ;tcpip_types.h: 383: OSPFIGP_TCPIP = 89,
[; ;tcpip_types.h: 384: Sprite_RPC_TCPIP = 90,
[; ;tcpip_types.h: 385: LARP_TCPIP = 91,
[; ;tcpip_types.h: 386: MTP_TCPIP = 92,
[; ;tcpip_types.h: 387: AX25_TCPIP = 93,
[; ;tcpip_types.h: 388: IPIP_TCPIP = 94,
[; ;tcpip_types.h: 389: MICP_TCPIP = 95,
[; ;tcpip_types.h: 390: SCC_SP_TCPIP = 96,
[; ;tcpip_types.h: 391: ETHERIP_TCPIP = 97,
[; ;tcpip_types.h: 392: ENCAP_TCPIP = 98,
[; ;tcpip_types.h: 393: GMTP_TCPIP = 100,
[; ;tcpip_types.h: 394: IFMP_TCPIP = 101,
[; ;tcpip_types.h: 395: PNNI_TCPIP = 102,
[; ;tcpip_types.h: 396: PIM_TCPIP = 103,
[; ;tcpip_types.h: 397: ARIS_TCPIP = 104,
[; ;tcpip_types.h: 398: SCPS_TCPIP = 105,
[; ;tcpip_types.h: 399: QNX_TCPIP = 106,
[; ;tcpip_types.h: 400: A_N_TCPIP = 107,
[; ;tcpip_types.h: 401: IPComp_TCPIP = 108,
[; ;tcpip_types.h: 402: SNP_TCPIP = 109,
[; ;tcpip_types.h: 403: Compaq_Peer_TCPIP = 110,
[; ;tcpip_types.h: 404: IPX_in_IP_TCPIP = 111,
[; ;tcpip_types.h: 405: VRRP_TCPIP = 112,
[; ;tcpip_types.h: 406: PGM_TCPIP = 113,
[; ;tcpip_types.h: 407: L2TP_TCPIP = 115,
[; ;tcpip_types.h: 408: DDX_TCPIP = 116,
[; ;tcpip_types.h: 409: IATP_TCPIP = 117,
[; ;tcpip_types.h: 410: STP_TCPIP = 118,
[; ;tcpip_types.h: 411: SRP_TCPIP = 119,
[; ;tcpip_types.h: 412: UTI_TCPIP = 120,
[; ;tcpip_types.h: 413: SMP_TCPIP = 121,
[; ;tcpip_types.h: 414: SM_TCPIP = 122,
[; ;tcpip_types.h: 415: PTP_TCPIP = 123,
[; ;tcpip_types.h: 416: ISIS_TCPIP = 124,
[; ;tcpip_types.h: 417: FIRE_TCPIP = 125,
[; ;tcpip_types.h: 418: CRTP_TCPIP = 126,
[; ;tcpip_types.h: 419: CRUDP_TCPIP = 127,
[; ;tcpip_types.h: 420: SSCOPMCE_TCPIP = 128,
[; ;tcpip_types.h: 421: IPLT_TCPIP = 129,
[; ;tcpip_types.h: 422: SPS_TCPIP = 130,
[; ;tcpip_types.h: 423: PIPE_TCPIP = 131,
[; ;tcpip_types.h: 424: SCTP_TCPIP = 132,
[; ;tcpip_types.h: 425: FC_TCPIP = 133
[; ;tcpip_types.h: 426: } ipProtocolNumbers;
[; ;tcpip_types.h: 428: typedef struct
[; ;tcpip_types.h: 429: {
[; ;tcpip_types.h: 430: union{
[; ;tcpip_types.h: 431: uint32_t s_addr;
[; ;tcpip_types.h: 432: uint8_t s_addr_byte[4];
[; ;tcpip_types.h: 433: };
[; ;tcpip_types.h: 434: }inAddr_t;
[; ;tcpip_types.h: 436: typedef struct
[; ;tcpip_types.h: 437: {
[; ;tcpip_types.h: 438: union {
[; ;tcpip_types.h: 439: uint8_t s6_u8[16];
[; ;tcpip_types.h: 440: uint16_t s6_u16[8];
[; ;tcpip_types.h: 441: uint32_t s6_u32[4];
[; ;tcpip_types.h: 442: } s6;
[; ;tcpip_types.h: 446: }in6Addr_t;
[; ;tcpip_types.h: 448: typedef struct
[; ;tcpip_types.h: 449: {
[; ;tcpip_types.h: 450: uint16_t port;
[; ;tcpip_types.h: 451: inAddr_t addr;
[; ;tcpip_types.h: 452: }sockaddr_in_t;
[; ;tcpip_types.h: 454: typedef struct {
[; ;tcpip_types.h: 456: uint16_t in6_port;
[; ;tcpip_types.h: 457: uint32_t in6_flowinfo;
[; ;tcpip_types.h: 458: in6Addr_t in6_addr;
[; ;tcpip_types.h: 459: uint32_t in6_scope_id;
[; ;tcpip_types.h: 460: }sockaddr_in6_t;
[; ;tcpip_types.h: 462: extern const char *network_errors[];
[; ;tcpip_types.h: 464: typedef enum
[; ;tcpip_types.h: 465: {
[; ;tcpip_types.h: 466: ERROR =0,
[; ;tcpip_types.h: 467: SUCCESS,
[; ;tcpip_types.h: 468: LINK_NOT_FOUND,
[; ;tcpip_types.h: 469: BUFFER_BUSY,
[; ;tcpip_types.h: 470: TX_LOGIC_NOT_IDLE,
[; ;tcpip_types.h: 471: MAC_NOT_FOUND,
[; ;tcpip_types.h: 472: IP_WRONG_VERSION,
[; ;tcpip_types.h: 473: IPV4_CHECKSUM_FAILS,
[; ;tcpip_types.h: 474: DEST_IP_NOT_MATCHED,
[; ;tcpip_types.h: 475: ICMP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 476: UDP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 477: TCP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 478: DMA_TIMEOUT,
[; ;tcpip_types.h: 479: PORT_NOT_AVAILABLE,
[; ;tcpip_types.h: 480: ARP_IP_NOT_MATCHED,
[; ;tcpip_types.h: 481: EAPoL_PACKET_FAILURE,
[; ;tcpip_types.h: 482: INCORRECT_IPV4_HLEN,
[; ;tcpip_types.h: 483: IPV4_NO_OPTIONS,
[; ;tcpip_types.h: 484: TX_QUEUED
[; ;tcpip_types.h: 485: }error_msg;
[; ;tcpip_types.h: 487: typedef struct
[; ;tcpip_types.h: 488: {
[; ;tcpip_types.h: 489: inAddr_t dest_addr;
[; ;tcpip_types.h: 490: }destIP_t;
[; ;tcpip_types.h: 493: typedef int8_t socklistsize_t;
[; ;tcpip_types.h: 495: typedef void (*ip_receive_function_ptr)(int);
[; ;network.h: 58: void Network_Init(void);
[; ;network.h: 59: void Network_Read(void);
[; ;network.h: 60: void Network_Manage(void);
[; ;network.h: 61: void Network_WaitForLink(void);
[; ;network.h: 62: void timersInit();
"58 mcc_generated_files/TCPIPLibrary/tcpip_config.h
[v _dhcpName `Cuc ~T0 @X0 -> 0 `x e ]
[i _dhcpName
:U ..
-> 80 `c
-> 73 `c
-> 67 `c
-> 49 `c
-> 54 `c
-> 70 `c
-> 49 `c
-> 56 `c
-> 51 `c
-> 52 `c
-> 54 `c
-> 32 `c
-> 69 `c
-> 116 `c
-> 104 `c
-> 101 `c
-> 114 `c
-> 110 `c
-> 101 `c
-> 116 `c
-> 0 `c
..
]
[; ;tcpip_config.h: 58: const char dhcpName[] = "PIC16F18346 Ethernet";
[; ;dhcp_client.h: 64: void DHCP_init(void);
[; ;dhcp_client.h: 75: void DHCP_Handler(int);
[; ;dhcp_client.h: 86: void DHCP_Manage(void);
[; ;dhcp_client.h: 98: void DHCP_WriteZeros(uint16_t length);
[; ;mac_address.h: 51: typedef union
[; ;mac_address.h: 52: {
[; ;mac_address.h: 53: uint8_t mac_array[6];
[; ;mac_address.h: 54: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;mac_address.h: 55: } mac48Address_t;
[; ;mac_address.h: 57: extern const mac48Address_t broadcastMAC;
[; ;mac_address.h: 58: extern const mac48Address_t macAddress;
[; ;mac_address.h: 59: extern mac48Address_t hostMacAddress;
[; ;mac_address.h: 61: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_driver.h: 49: typedef struct
[; ;ethernet_driver.h: 50: {
[; ;ethernet_driver.h: 51: uint16_t byteCount;
[; ;ethernet_driver.h: 52: unsigned long_drop_event:1;
[; ;ethernet_driver.h: 53: unsigned :1;
[; ;ethernet_driver.h: 54: unsigned excessCarrierEvent:1;
[; ;ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_driver.h: 56: unsigned crcError:1;
[; ;ethernet_driver.h: 57: unsigned lengthCheckError:1;
[; ;ethernet_driver.h: 58: unsigned lengthLongError:1;
[; ;ethernet_driver.h: 59: unsigned rxOK:1;
[; ;ethernet_driver.h: 60: unsigned rxMulticast:1;
[; ;ethernet_driver.h: 61: unsigned rxBroadcast:1;
[; ;ethernet_driver.h: 62: unsigned dribbleNibble:1;
[; ;ethernet_driver.h: 63: unsigned controlFrame:1;
[; ;ethernet_driver.h: 64: unsigned pauseControlFrame:1;
[; ;ethernet_driver.h: 65: unsigned unknownContrlFrame:1;
[; ;ethernet_driver.h: 66: unsigned vlanTagPresent:1;
[; ;ethernet_driver.h: 67: unsigned zero:1;
[; ;ethernet_driver.h: 68: }receiveStatusVector_t;
[; ;ethernet_driver.h: 70: typedef struct
[; ;ethernet_driver.h: 71: {
[; ;ethernet_driver.h: 72: unsigned error:1;
[; ;ethernet_driver.h: 73: unsigned pktReady:1;
[; ;ethernet_driver.h: 74: unsigned up:1;
[; ;ethernet_driver.h: 75: unsigned idle:1;
[; ;ethernet_driver.h: 76: unsigned linkChange:1;
[; ;ethernet_driver.h: 77: unsigned bufferBusy:1;
[; ;ethernet_driver.h: 78: unsigned :3;
[; ;ethernet_driver.h: 79: uint16_t saveRDPT;
[; ;ethernet_driver.h: 80: uint16_t saveWRPT;
[; ;ethernet_driver.h: 81: } ethernetDriver_t;
[; ;ethernet_driver.h: 83: typedef struct
[; ;ethernet_driver.h: 84: {
[; ;ethernet_driver.h: 85: uint16_t flags;
[; ;ethernet_driver.h: 86: uint16_t packetStart;
[; ;ethernet_driver.h: 87: uint16_t packetEnd;
[; ;ethernet_driver.h: 89: void *prevPacket;
[; ;ethernet_driver.h: 90: void *nextPacket;
[; ;ethernet_driver.h: 91: } txPacket_t;
[; ;ethernet_driver.h: 93: extern volatile ethernetDriver_t ethData;
[; ;ethernet_driver.h: 99: void ETH_Init(void);
[; ;ethernet_driver.h: 100: void ETH_EventHandler(void);
[; ;ethernet_driver.h: 101: void ETH_NextPacketUpdate();
[; ;ethernet_driver.h: 102: void ETH_ResetReceiver(void);
[; ;ethernet_driver.h: 103: void ETH_SendSystemReset(void);
[; ;ethernet_driver.h: 106: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_driver.h: 107: uint8_t ETH_Read8(void);
[; ;ethernet_driver.h: 108: uint16_t ETH_Read16(void);
[; ;ethernet_driver.h: 109: uint32_t ETH_Read24(void);
[; ;ethernet_driver.h: 110: uint32_t ETH_Read32(void);
[; ;ethernet_driver.h: 111: void ETH_Dump(uint16_t);
[; ;ethernet_driver.h: 112: void ETH_Flush(void);
[; ;ethernet_driver.h: 114: uint16_t ETH_GetFreeTxBufferSize(void);
[; ;ethernet_driver.h: 116: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_driver.h: 117: uint16_t ETH_WriteString(const char *string);
[; ;ethernet_driver.h: 118: uint16_t ETH_WriteBlock(const void *, uint16_t);
[; ;ethernet_driver.h: 119: void ETH_Write8(uint8_t);
[; ;ethernet_driver.h: 120: void ETH_Write16(uint16_t);
[; ;ethernet_driver.h: 121: void ETH_Write24(uint32_t data);
[; ;ethernet_driver.h: 122: void ETH_Write32(uint32_t);
[; ;ethernet_driver.h: 123: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_driver.h: 124: error_msg ETH_Copy(uint16_t);
[; ;ethernet_driver.h: 125: error_msg ETH_Send(void);
[; ;ethernet_driver.h: 127: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 128: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 130: void ETH_GetMAC(uint8_t *);
[; ;ethernet_driver.h: 131: void ETH_SetMAC(uint8_t *);
[; ;ethernet_driver.h: 132: uint16_t ETH_GetWritePtr();
[; ;ethernet_driver.h: 133: void ETH_SaveRDPT(void);
[; ;ethernet_driver.h: 134: void ETH_ResetReadPtr();
[; ;ethernet_driver.h: 135: uint16_t ETH_GetReadPtr(void);
[; ;ethernet_driver.h: 136: void ETH_SetReadPtr(uint16_t);
[; ;ethernet_driver.h: 137: uint16_t ETH_GetStatusVectorByteCount(void);
[; ;ethernet_driver.h: 138: void ETH_SetStatusVectorByteCount(uint16_t);
[; ;ethernet_driver.h: 140: void ETH_ResetByteCount(void);
[; ;ethernet_driver.h: 141: uint16_t ETH_GetByteCount(void);
[; ;ethernet_driver.h: 143: uint16_t ETH_ReadSavedWRPT(void);
[; ;ethernet_driver.h: 144: void ETH_SaveWRPT(void);
[; ;ethernet_driver.h: 145: void ETH_SetRxByteCount(uint16_t count);
[; ;ethernet_driver.h: 146: uint16_t ETH_GetRxByteCount();
[; ;ethernet_driver.h: 148: bool ETH_CheckLinkUp();
[; ;ethernet_driver.h: 150: void ETH_TxReset(void);
[; ;ethernet_driver.h: 151: void ETH_MoveBackReadPtr(uint16_t offset);
[; ;arpv4.h: 57: void ARPV4_Init(void);
[; ;arpv4.h: 69: error_msg ARPV4_Packet(void);
[; ;arpv4.h: 75: void ARPV4_Update(void);
[; ;arpv4.h: 86: mac48Address_t* ARPV4_Lookup(uint32_t ipAddress);
[; ;arpv4.h: 99: error_msg ARPV4_Request(uint32_t destAddress);
[; ;ipv4.h: 66: void IPV4_Init(void);
[; ;ipv4.h: 73: error_msg IPV4_Packet(void);
[; ;ipv4.h: 90: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;ipv4.h: 101: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;ipv4.h: 115: error_msg IPV4_Send(uint16_t payloadLength);
[; ;ipv4.h: 122: uint16_t IPV4_GetStartPosition(void);
[; ;ipv4.h: 129: uint16_t IPV4_GetDatagramLength(void);
[; ;rtcc.h: 31: void rtcc_init(void);
[; ;rtcc.h: 32: void rtcc_handler(void);
[; ;rtcc.h: 33: void rtcc_set(time_t *);
[; ;rtcc.h: 38: time_t time(time_t *t);
[; ;ip_database.h: 40: typedef struct {
[; ;ip_database.h: 41: uint32_t ipv4_myAddress;
[; ;ip_database.h: 42: uint32_t ipv4_dns[2];
[; ;ip_database.h: 43: uint32_t ipv4_subnetMask;
[; ;ip_database.h: 44: uint32_t ipv4_router;
[; ;ip_database.h: 45: uint32_t ipv4_gateway;
[; ;ip_database.h: 46: uint32_t ipv4_ntpAddress[2];
[; ;ip_database.h: 47: uint32_t ipv4_tftpAddress;
[; ;ip_database.h: 48: } ip_db_info_t;
[; ;ip_database.h: 51: extern ip_db_info_t ip_database_info;
[; ;ip_database.h: 72: void ipdb_init(void);
[; ;ip_database.h: 73: uint32_t makeStrToIpv4Address(char *str);
[; ;ip_database.h: 74: char *makeIpv4AddresstoStr(uint32_t addr);
"52 mcc_generated_files/TCPIPLibrary/network.c
[v _arpTimer `l ~T0 @X0 1 e ]
[; ;network.c: 52: time_t arpTimer;
"54
[v _Network_Init `(v ~T0 @X0 1 ef ]
"55
{
[; ;network.c: 54: void Network_Init(void)
[; ;network.c: 55: {
[e :U _Network_Init ]
[f ]
[; ;network.c: 56: ETH_Init();
"56
[e ( _ETH_Init ..  ]
[; ;network.c: 57: ARPV4_Init();
"57
[e ( _ARPV4_Init ..  ]
[; ;network.c: 58: IPV4_Init();
"58
[e ( _IPV4_Init ..  ]
[; ;network.c: 59: DHCP_init();
"59
[e ( _DHCP_init ..  ]
[; ;network.c: 60: rtcc_init();
"60
[e ( _rtcc_init ..  ]
[; ;network.c: 61: Network_WaitForLink();
"61
[e ( _Network_WaitForLink ..  ]
[; ;network.c: 62: timersInit();
"62
[e ( _timersInit ..  ]
[; ;network.c: 63: }
"63
[e :UE 35 ]
}
"65
[v _timersInit `(v ~T0 @X0 1 ef ]
"66
{
[; ;network.c: 65: void timersInit()
[; ;network.c: 66: {
[e :U _timersInit ]
[f ]
[; ;network.c: 67: time(&arpTimer);
"67
[e ( _time (1 &U _arpTimer ]
[; ;network.c: 68: arpTimer += 10;
"68
[e =+ _arpTimer -> -> 10 `i `l ]
[; ;network.c: 69: }
"69
[e :UE 36 ]
}
"71
[v _Network_WaitForLink `(v ~T0 @X0 1 ef ]
"72
{
[; ;network.c: 71: void Network_WaitForLink(void)
[; ;network.c: 72: {
[e :U _Network_WaitForLink ]
[f ]
[; ;network.c: 73: while(!ETH_CheckLinkUp());
"73
[e $U 38  ]
[e :U 39 ]
[e :U 38 ]
[e $ ! != -> ( _ETH_CheckLinkUp ..  `i -> -> -> 0 `i `uc `i 39  ]
[e :U 40 ]
[; ;network.c: 74: }
"74
[e :UE 37 ]
}
"76
[v _Network_Manage `(v ~T0 @X0 1 ef ]
"77
{
[; ;network.c: 76: void Network_Manage(void)
[; ;network.c: 77: {
[e :U _Network_Manage ]
[f ]
"78
[v _now `l ~T0 @X0 1 a ]
"79
[v F659 `l ~T0 @X0 1 s nowPv ]
[i F659
-> -> 0 `i `l
]
[; ;network.c: 78: time_t now;
[; ;network.c: 79: static time_t nowPv = 0;
[; ;network.c: 81: ETH_EventHandler();
"81
[e ( _ETH_EventHandler ..  ]
[; ;network.c: 82: Network_Read();
"82
[e ( _Network_Read ..  ]
[; ;network.c: 83: DHCP_Manage();
"83
[e ( _DHCP_Manage ..  ]
[; ;network.c: 86: time(&now);
"86
[e ( _time (1 &U _now ]
[; ;network.c: 87: if(now >= arpTimer)
"87
[e $ ! >= _now _arpTimer 42  ]
[; ;network.c: 88: {
"88
{
[; ;network.c: 89: ARPV4_Update();
"89
[e ( _ARPV4_Update ..  ]
[; ;network.c: 90: arpTimer += 10;
"90
[e =+ _arpTimer -> -> 10 `i `l ]
"91
}
[e :U 42 ]
[; ;network.c: 91: }
[; ;network.c: 92: if(now > nowPv)
"92
[e $ ! > _now F659 43  ]
[; ;network.c: 93: {
"93
{
"96
}
[e :U 43 ]
[; ;network.c: 96: }
[; ;network.c: 97: nowPv = now;
"97
[e = F659 _now ]
[; ;network.c: 98: }
"98
[e :UE 41 ]
}
"100
[v _Network_Read `(v ~T0 @X0 1 ef ]
"101
{
[; ;network.c: 100: void Network_Read(void)
[; ;network.c: 101: {
[e :U _Network_Read ]
[f ]
"102
[v _header `S5 ~T0 @X0 1 a ]
"103
[v _debug_str `uc ~T0 @X0 -> 80 `i a ]
[; ;network.c: 102: ethernetFrame_t header;
[; ;network.c: 103: char debug_str[80];
[; ;network.c: 105: if(ethData.pktReady)
"105
[e $ ! != -> . _ethData 1 `i -> -> -> 0 `i `Vuc `i 45  ]
[; ;network.c: 106: {
"106
{
[; ;network.c: 107: ETH_NextPacketUpdate();
"107
[e ( _ETH_NextPacketUpdate ..  ]
[; ;network.c: 108: ETH_ReadBlock((char *)&header, sizeof(header));
"108
[e ( _ETH_ReadBlock (2 , -> -> &U _header `*uc `*v -> # _header `ui ]
[; ;network.c: 109: header.id.type = ((((uint16_t)header.id.type & (uint16_t)0xFF00) >> 8) | (((uint16_t)header.id.type & (uint16_t)0x00FF) << 8));
"109
[e = . . _header 2 0 | >> & . . _header 2 0 -> 65280 `ui -> 8 `i << & . . _header 2 0 -> -> 255 `i `ui -> 8 `i ]
[; ;network.c: 110: switch (header.id.type)
"110
[e $U 47  ]
[; ;network.c: 111: {
"111
{
[; ;network.c: 112: case 0x8100:
"112
[e :U 48 ]
[; ;network.c: 113: break;
"113
[e $U 46  ]
[; ;network.c: 114: case 0x0806:
"114
[e :U 49 ]
[; ;network.c: 115: ARPV4_Packet();
"115
[e ( _ARPV4_Packet ..  ]
[; ;network.c: 116: break;
"116
[e $U 46  ]
[; ;network.c: 117: case 0x0800:
"117
[e :U 50 ]
[; ;network.c: 118: IPV4_Packet();
"118
[e ( _IPV4_Packet ..  ]
[; ;network.c: 119: break;
"119
[e $U 46  ]
[; ;network.c: 120: case 0x86DD:
"120
[e :U 51 ]
[; ;network.c: 121: break;
"121
[e $U 46  ]
[; ;network.c: 122: default:
"122
[e :U 52 ]
[; ;network.c: 123: break;
"123
[e $U 46  ]
"124
}
[; ;network.c: 124: }
[e $U 46  ]
"110
[e :U 47 ]
[e [\ . . _header 2 0 , $ -> 33024 `ui 48
 , $ -> -> 2054 `i `ui 49
 , $ -> -> 2048 `i `ui 50
 , $ -> 34525 `ui 51
 52 ]
"124
[e :U 46 ]
[; ;network.c: 125: ETH_Flush();
"125
[e ( _ETH_Flush ..  ]
"126
}
[e :U 45 ]
[; ;network.c: 126: }
[; ;network.c: 127: }
"127
[e :UE 44 ]
}
