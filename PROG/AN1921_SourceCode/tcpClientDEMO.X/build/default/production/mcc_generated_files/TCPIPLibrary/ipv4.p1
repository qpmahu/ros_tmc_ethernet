Version 3.2 HI-TECH Software Intermediate Code
"132 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[s S6 :4 `uc 1 :4 `uc 1 :2 `uc 1 :6 `uc 1 `ui 1 `ui 1 :5 `uc 1 :1 `uc 1 :1 `uc 1 :1 `uc 1 `uc 1 `uc 1 `uc 1 `ui 1 `ul 1 `ul 1 ]
[n S6 . ihl version ecn dscp length identifcation fragmentOffsetHigh . dontFragment moreFragments fragmentOffsetLow timeToLive protocol headerCksm srcIpAddress dstIpAddress ]
"72 mcc_generated_files/TCPIPLibrary/ip_database.h
[v _ipdb_init `(v ~T0 @X0 0 ef ]
"155 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[s S7 `ul 1 `ul 1 `uc 1 `uc 1 `ui 1 ]
[n S7 . srcIpAddress dstIpAddress protocol z length ]
"101 mcc_generated_files/TCPIPLibrary/ipv4.c
[c E390 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .. ]
[n E390 . ERROR SUCCESS LINK_NOT_FOUND BUFFER_BUSY TX_LOGIC_NOT_IDLE MAC_NOT_FOUND IP_WRONG_VERSION IPV4_CHECKSUM_FAILS DEST_IP_NOT_MATCHED ICMP_CHECKSUM_FAILS UDP_CHECKSUM_FAILS TCP_CHECKSUM_FAILS DMA_TIMEOUT PORT_NOT_AVAILABLE ARP_IP_NOT_MATCHED EAPoL_PACKET_FAILURE INCORRECT_IPV4_HLEN IPV4_NO_OPTIONS TX_QUEUED  ]
"128 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_RxComputeChecksum `(ui ~T0 @X0 0 ef2`ui`ui ]
"55 mcc_generated_files/TCPIPLibrary/ipv4.c
[v _IPV4_SaveStartPosition `(v ~T0 @X0 0 sf ]
"106 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_ReadBlock `(ui ~T0 @X0 0 ef2`*v`ui ]
"40 mcc_generated_files/TCPIPLibrary/ip_database.h
[s S35 `ul 1 `ul -> 2 `i `ul 1 `ul 1 `ul 1 `ul -> 2 `i `ul 1 ]
[n S35 . ipv4_myAddress ipv4_dns ipv4_subnetMask ipv4_router ipv4_gateway ipv4_ntpAddress ipv4_tftpAddress ]
"51
[v _ip_database_info `S35 ~T0 @X0 0 e ]
"111 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_Dump `(v ~T0 @X0 0 ef1`ui ]
"58 mcc_generated_files/TCPIPLibrary/icmp.h
[v _ICMP_Receive `(E390 ~T0 @X0 0 ef1`*S6 ]
"61 mcc_generated_files/TCPIPLibrary/ipv4.c
[v _TCP_Recv `(v ~T0 @X0 0 ef2`ul`ui ]
"154
[c E234 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 62 64 65 66 67 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 100 101 102 103 104 105 106 107 108 109 110 111 112 113 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 .. ]
[n E234 . HOPOPT_TCPIP ICMP_TCPIP IGMP_TCPIP GGP_TCPIP IPV4_TCPIP ST_TCPIP TCP_TCPIP CBT_TCPIP EGP_TCPIP IGP_TCPIP BBN_RCC_MON_TCPIP NVP_II_TCPIP PUP_TCPIP ARGUS_TCPIP EMCON_TCPIP XNET_TCPIP CHAOS_TCPIP UDP_TCPIP MUX_TCPIP DCN_MEAS_TCPIP HMP_TCPIP PRM_TCPIP XNS_IDP_TCPIP TRUNK_1_TCPIP TRUNK_2_TCPIP LEAF_1_TCPIP LEAF_2_TCPIP RDP_TCPIP IRTP_TCPIP ISO_TP4_TCPIP NETBLT_TCPIP MFE_NSP_TCPIP MERIT_INP_TCPIP DCCP_TCPIP THREEPC_TCPIP IDPR_TCPIP XTP_TCPIP DDP_TCPIP IDPR_CMTP_TCPIP TPpp_TCPIP IL_TCPIP IPV6_TUNNEL_TCPIP SDRP_TCPIP IPV6_Route_TCPIP IPV6_Frag_TCPIP IDRP_TCPIP RSVP_TCPIP GRE_TCPIP DSR_TCPIP BNA_TCPIP ESP_TCPIP AH_TCPIP I_NLSP_TCPIP SWIPE_TCPIP NARP_TCPIP MOBILE_TCPIP TLSP_TCPIP SKIP_TCPIP IPV6_ICMP_TCPIP IPV6_NoNxt_TCPIP IPV6_Opts_TCPIP CFTP_TCPIP SAT_EXPAK_TCPIP KRYPTOLAN_TCPIP RVD_TCPIP IPPC_TCPIP SAT_MON_TCPIP VISA_TCPIP IPCV_TCPIP CPNX_TCPIP CPHB_TCPIP WSN_TCPIP PVP_TCPIP BR_SAT_MON_TCPIP SUN_ND_TCPIP WB_MON_TCPIP WB_EXPAK_TCPIP ISO_IP_TCPIP VMTP_TCPIP SECURE_VMTP_TCPIP VINES_TCPIP TTP_TCPIP IPTM_TCPIP NSFNET_IGP_TCPIP DGP_TCPIP TCF_TCPIP EIGRP_TCPIP OSPFIGP_TCPIP Sprite_RPC_TCPIP LARP_TCPIP MTP_TCPIP AX25_TCPIP IPIP_TCPIP MICP_TCPIP SCC_SP_TCPIP ETHERIP_TCPIP ENCAP_TCPIP GMTP_TCPIP IFMP_TCPIP PNNI_TCPIP PIM_TCPIP ARIS_TCPIP SCPS_TCPIP QNX_TCPIP A_N_TCPIP IPComp_TCPIP SNP_TCPIP Compaq_Peer_TCPIP IPX_in_IP_TCPIP VRRP_TCPIP PGM_TCPIP L2TP_TCPIP DDX_TCPIP IATP_TCPIP STP_TCPIP SRP_TCPIP UTI_TCPIP SMP_TCPIP SM_TCPIP PTP_TCPIP ISIS_TCPIP FIRE_TCPIP CRTP_TCPIP CRUDP_TCPIP SSCOPMCE_TCPIP IPLT_TCPIP SPS_TCPIP PIPE_TCPIP SCTP_TCPIP FC_TCPIP  ]
"54 mcc_generated_files/TCPIPLibrary/mac_address.h
[s S29 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S29 . byte1 byte2 byte3 byte4 byte5 byte6 ]
"52
[u S28 `uc -> 6 `i `S29 1 ]
[n S28 . mac_array s ]
"86 mcc_generated_files/TCPIPLibrary/arpv4.h
[v _ARPV4_Lookup `(*S28 ~T0 @X0 0 ef1`ul ]
"99
[v _ARPV4_Request `(E390 ~T0 @X0 0 ef1`ul ]
"57 mcc_generated_files/TCPIPLibrary/mac_address.h
[v _broadcastMAC `CS28 ~T0 @X0 0 e ]
"116 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_WriteStart `(E390 ~T0 @X0 0 ef2`*CS28`ui ]
"120
[v _ETH_Write16 `(v ~T0 @X0 0 ef1`ui ]
"122
[v _ETH_Write32 `(v ~T0 @X0 0 ef1`ul ]
"119
[v _ETH_Write8 `(v ~T0 @X0 0 ef1`uc ]
"123
[v _ETH_Insert `(v ~T0 @X0 0 ef3`*uc`ui`ui ]
"67 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[u S5 `ui 1 `ui 1 `ui 1 ]
[n S5 . type length tpid ]
"63
[s S4 `uc -> 6 `i `uc -> 6 `i `S5 1 ]
[n S4 . destinationMAC sourceMAC id ]
"127 mcc_generated_files/TCPIPLibrary/ethernet_driver.h
[v _ETH_TxComputeChecksum `(ui ~T0 @X0 0 ef3`ui`ui`ui ]
"125
[v _ETH_Send `(E390 ~T0 @X0 0 ef ]
"135
[v _ETH_GetReadPtr `(ui ~T0 @X0 0 ef ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 105: typedef signed long int int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 151: typedef unsigned long int uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 196: typedef signed long int int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 237: typedef unsigned long int uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;xc8\pic\include\__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;stddef.h: 6: typedef int ptrdiff_t;
[; ;tcpip_types.h: 49: typedef enum {TCB_ERROR = -1, TCB_NO_ERROR = 0} tcbError_t;
[; ;tcpip_types.h: 51: typedef union
[; ;tcpip_types.h: 52: {
[; ;tcpip_types.h: 53: uint16_t value;
[; ;tcpip_types.h: 54: struct
[; ;tcpip_types.h: 55: {
[; ;tcpip_types.h: 56: unsigned int priorityCodePoint:3;
[; ;tcpip_types.h: 57: unsigned int dropEligible:1;
[; ;tcpip_types.h: 58: unsigned int vlanId:12;
[; ;tcpip_types.h: 59: };
[; ;tcpip_types.h: 60: } tci_t;
[; ;tcpip_types.h: 62: typedef struct
[; ;tcpip_types.h: 63: {
[; ;tcpip_types.h: 64: uint8_t destinationMAC[6];
[; ;tcpip_types.h: 65: uint8_t sourceMAC[6];
[; ;tcpip_types.h: 66: union
[; ;tcpip_types.h: 67: {
[; ;tcpip_types.h: 68: uint16_t type;
[; ;tcpip_types.h: 69: uint16_t length;
[; ;tcpip_types.h: 70: uint16_t tpid;
[; ;tcpip_types.h: 71: }id;
[; ;tcpip_types.h: 76: } ethernetFrame_t;
"78 mcc_generated_files/TCPIPLibrary/tcpip_types.h
[v _Control_Byte `uc ~T0 @X0 1 e ]
[i _Control_Byte
-> -> 0 `i `uc
]
[; ;tcpip_types.h: 78: uint8_t Control_Byte = 0x00;
[; ;tcpip_types.h: 131: typedef struct
[; ;tcpip_types.h: 132: {
[; ;tcpip_types.h: 133: unsigned ihl:4;
[; ;tcpip_types.h: 134: unsigned version:4;
[; ;tcpip_types.h: 135: unsigned ecn:2;
[; ;tcpip_types.h: 136: unsigned dscp:6;
[; ;tcpip_types.h: 137: uint16_t length;
[; ;tcpip_types.h: 138: uint16_t identifcation;
[; ;tcpip_types.h: 139: unsigned fragmentOffsetHigh:5;
[; ;tcpip_types.h: 140: unsigned :1;
[; ;tcpip_types.h: 141: unsigned dontFragment:1;
[; ;tcpip_types.h: 142: unsigned moreFragments:1;
[; ;tcpip_types.h: 143: uint8_t fragmentOffsetLow;
[; ;tcpip_types.h: 144: uint8_t timeToLive;
[; ;tcpip_types.h: 145: uint8_t protocol;
[; ;tcpip_types.h: 146: uint16_t headerCksm;
[; ;tcpip_types.h: 147: uint32_t srcIpAddress;
[; ;tcpip_types.h: 148: uint32_t dstIpAddress;
[; ;tcpip_types.h: 151: } ipv4Header_t;
[; ;tcpip_types.h: 154: typedef struct
[; ;tcpip_types.h: 155: {
[; ;tcpip_types.h: 156: uint32_t srcIpAddress;
[; ;tcpip_types.h: 157: uint32_t dstIpAddress;
[; ;tcpip_types.h: 158: uint8_t protocol;
[; ;tcpip_types.h: 159: uint8_t z;
[; ;tcpip_types.h: 160: uint16_t length;
[; ;tcpip_types.h: 161: } ipv4_pseudo_header_t;
[; ;tcpip_types.h: 163: typedef struct
[; ;tcpip_types.h: 164: {
[; ;tcpip_types.h: 165: union
[; ;tcpip_types.h: 166: {
[; ;tcpip_types.h: 167: uint16_t typeCode;
[; ;tcpip_types.h: 168: struct
[; ;tcpip_types.h: 169: {
[; ;tcpip_types.h: 170: uint8_t code;
[; ;tcpip_types.h: 171: uint8_t type;
[; ;tcpip_types.h: 172: };
[; ;tcpip_types.h: 173: };
[; ;tcpip_types.h: 174: uint16_t checksum;
[; ;tcpip_types.h: 175: } icmpHeader_t;
[; ;tcpip_types.h: 178: typedef struct
[; ;tcpip_types.h: 179: {
[; ;tcpip_types.h: 180: union
[; ;tcpip_types.h: 181: {
[; ;tcpip_types.h: 182: uint16_t typeCode;
[; ;tcpip_types.h: 183: struct
[; ;tcpip_types.h: 184: {
[; ;tcpip_types.h: 185: uint8_t code;
[; ;tcpip_types.h: 186: uint8_t type;
[; ;tcpip_types.h: 187: };
[; ;tcpip_types.h: 188: };
[; ;tcpip_types.h: 189: uint16_t checksum;
[; ;tcpip_types.h: 190: } icmpv6Header_t;
[; ;tcpip_types.h: 193: typedef enum
[; ;tcpip_types.h: 194: {
[; ;tcpip_types.h: 195: ECHO_REPLY = 0x0000,
[; ;tcpip_types.h: 197: DEST_NETWORK_UNREACHABLE = 0x0300,
[; ;tcpip_types.h: 198: DEST_HOST_UNREACHABLE = 0x0301,
[; ;tcpip_types.h: 199: DEST_PROTOCOL_UNREACHABLE = 0x0302,
[; ;tcpip_types.h: 200: DEST_PORT_UNREACHABLE = 0x0303,
[; ;tcpip_types.h: 201: FRAGMENTATION_REQUIRED = 0x0304,
[; ;tcpip_types.h: 202: SOURCE_ROUTE_FAILED = 0x0305,
[; ;tcpip_types.h: 203: DESTINATION_NETWORK_UNKNOWN = 0x0306,
[; ;tcpip_types.h: 204: SOURCE_HOST_ISOLATED = 0x0307,
[; ;tcpip_types.h: 205: NETWORK_ADMINISTRATIVELY_PROHIBITED = 0x0308,
[; ;tcpip_types.h: 206: HOST_ADMINISTRATIVELY_PROHIBITED = 0x0309,
[; ;tcpip_types.h: 207: NETWORK_UNREACHABLE_FOR_TOS = 0x030A,
[; ;tcpip_types.h: 208: HOST_UNREACHABLE_FOR_TOS = 0x030B,
[; ;tcpip_types.h: 209: COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 0x030C,
[; ;tcpip_types.h: 210: HOST_PRECEDENCE_VIOLATION = 0x030D,
[; ;tcpip_types.h: 211: PRECEDENCE_CUTOFF_IN_EFFECT = 0x030E,
[; ;tcpip_types.h: 213: SOURCE_QUENCH = 0x0400,
[; ;tcpip_types.h: 215: REDIRECT_DATAGRAM_FOR_THE_NETWORK = 0x0500,
[; ;tcpip_types.h: 216: REDIRECT_DATAGRAM_FOR_THE_HOST = 0x0501,
[; ;tcpip_types.h: 217: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_NETWORK = 0x0502,
[; ;tcpip_types.h: 218: REDIRECT_DATAGRAM_FOR_THE_TOS_AND_HOST = 0x0503,
[; ;tcpip_types.h: 220: ALTERNATE_HOST_ADDRESS = 0x0600,
[; ;tcpip_types.h: 222: ECHO_REQUEST = 0x0800,
[; ;tcpip_types.h: 225: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_1 = 0x082A,
[; ;tcpip_types.h: 226: UNASSIGNED_ECHO_TYPE_CODE_REQUEST_2 = 0x08FC,
[; ;tcpip_types.h: 228: ROUTER_ADVERTISEMENT = 0x0900,
[; ;tcpip_types.h: 229: ROUTER_SOLICITATION = 0x0A00,
[; ;tcpip_types.h: 230: TRACEROUTE = 0x3000
[; ;tcpip_types.h: 231: } icmpTypeCodes_t;
[; ;tcpip_types.h: 233: typedef struct
[; ;tcpip_types.h: 234: {
[; ;tcpip_types.h: 235: uint16_t srcPort;
[; ;tcpip_types.h: 236: uint16_t dstPort;
[; ;tcpip_types.h: 237: uint16_t length;
[; ;tcpip_types.h: 238: uint16_t checksum;
[; ;tcpip_types.h: 239: } udpHeader_t;
[; ;tcpip_types.h: 241: typedef struct
[; ;tcpip_types.h: 242: {
[; ;tcpip_types.h: 243: uint16_t sourcePort;
[; ;tcpip_types.h: 244: uint16_t destPort;
[; ;tcpip_types.h: 245: uint32_t sequenceNumber;
[; ;tcpip_types.h: 246: uint32_t ackNumber;
[; ;tcpip_types.h: 247: union{
[; ;tcpip_types.h: 248: uint8_t byte13;
[; ;tcpip_types.h: 249: struct{
[; ;tcpip_types.h: 250: uint8_t ns:1;
[; ;tcpip_types.h: 251: uint8_t reserved:3;
[; ;tcpip_types.h: 252: uint8_t dataOffset:4;
[; ;tcpip_types.h: 253: };
[; ;tcpip_types.h: 254: };
[; ;tcpip_types.h: 256: union{
[; ;tcpip_types.h: 257: uint8_t flags;
[; ;tcpip_types.h: 258: struct{
[; ;tcpip_types.h: 259: uint8_t fin:1;
[; ;tcpip_types.h: 260: uint8_t syn:1;
[; ;tcpip_types.h: 261: uint8_t rst:1;
[; ;tcpip_types.h: 262: uint8_t psh:1;
[; ;tcpip_types.h: 263: uint8_t ack:1;
[; ;tcpip_types.h: 264: uint8_t urg:1;
[; ;tcpip_types.h: 265: uint8_t ece:1;
[; ;tcpip_types.h: 266: uint8_t cwr:1;
[; ;tcpip_types.h: 267: };
[; ;tcpip_types.h: 268: };
[; ;tcpip_types.h: 270: uint16_t windowSize;
[; ;tcpip_types.h: 271: uint16_t checksum;
[; ;tcpip_types.h: 272: uint16_t urgentPtr;
[; ;tcpip_types.h: 276: } tcpHeader_t;
[; ;tcpip_types.h: 278: typedef struct
[; ;tcpip_types.h: 279: {
[; ;tcpip_types.h: 280: uint16_t version:4;
[; ;tcpip_types.h: 281: uint16_t trafficClass:8;
[; ;tcpip_types.h: 282: uint16_t flowLabel1stNibble:4;
[; ;tcpip_types.h: 284: uint16_t flowLabelRest;
[; ;tcpip_types.h: 285: uint16_t payloadLength;
[; ;tcpip_types.h: 286: uint8_t nextHeader;
[; ;tcpip_types.h: 287: uint8_t hopLimit;
[; ;tcpip_types.h: 288: uint8_t srcAddress[16];
[; ;tcpip_types.h: 289: uint8_t dstAddress[16];
[; ;tcpip_types.h: 291: } ipv6Header_t;
[; ;tcpip_types.h: 294: typedef enum
[; ;tcpip_types.h: 295: {
[; ;tcpip_types.h: 296: HOPOPT_TCPIP = 0,
[; ;tcpip_types.h: 297: ICMP_TCPIP = 1,
[; ;tcpip_types.h: 298: IGMP_TCPIP = 2,
[; ;tcpip_types.h: 299: GGP_TCPIP = 3,
[; ;tcpip_types.h: 300: IPV4_TCPIP = 4,
[; ;tcpip_types.h: 301: ST_TCPIP = 5,
[; ;tcpip_types.h: 302: TCP_TCPIP = 6,
[; ;tcpip_types.h: 303: CBT_TCPIP = 7,
[; ;tcpip_types.h: 304: EGP_TCPIP = 8,
[; ;tcpip_types.h: 305: IGP_TCPIP = 9,
[; ;tcpip_types.h: 306: BBN_RCC_MON_TCPIP = 10,
[; ;tcpip_types.h: 307: NVP_II_TCPIP = 11,
[; ;tcpip_types.h: 308: PUP_TCPIP = 12,
[; ;tcpip_types.h: 309: ARGUS_TCPIP = 13,
[; ;tcpip_types.h: 310: EMCON_TCPIP = 14,
[; ;tcpip_types.h: 311: XNET_TCPIP = 15,
[; ;tcpip_types.h: 312: CHAOS_TCPIP = 16,
[; ;tcpip_types.h: 313: UDP_TCPIP = 17,
[; ;tcpip_types.h: 314: MUX_TCPIP = 18,
[; ;tcpip_types.h: 315: DCN_MEAS_TCPIP = 19,
[; ;tcpip_types.h: 316: HMP_TCPIP = 20,
[; ;tcpip_types.h: 317: PRM_TCPIP = 21,
[; ;tcpip_types.h: 318: XNS_IDP_TCPIP = 22,
[; ;tcpip_types.h: 319: TRUNK_1_TCPIP = 23,
[; ;tcpip_types.h: 320: TRUNK_2_TCPIP = 24,
[; ;tcpip_types.h: 321: LEAF_1_TCPIP = 25,
[; ;tcpip_types.h: 322: LEAF_2_TCPIP = 26,
[; ;tcpip_types.h: 323: RDP_TCPIP = 27,
[; ;tcpip_types.h: 324: IRTP_TCPIP = 28,
[; ;tcpip_types.h: 325: ISO_TP4_TCPIP = 29,
[; ;tcpip_types.h: 326: NETBLT_TCPIP = 30,
[; ;tcpip_types.h: 327: MFE_NSP_TCPIP = 31,
[; ;tcpip_types.h: 328: MERIT_INP_TCPIP = 32,
[; ;tcpip_types.h: 329: DCCP_TCPIP = 33,
[; ;tcpip_types.h: 330: THREEPC_TCPIP = 34,
[; ;tcpip_types.h: 331: IDPR_TCPIP = 35,
[; ;tcpip_types.h: 332: XTP_TCPIP = 36,
[; ;tcpip_types.h: 333: DDP_TCPIP = 37,
[; ;tcpip_types.h: 334: IDPR_CMTP_TCPIP = 38,
[; ;tcpip_types.h: 335: TPpp_TCPIP = 39,
[; ;tcpip_types.h: 336: IL_TCPIP = 40,
[; ;tcpip_types.h: 337: IPV6_TUNNEL_TCPIP = 41,
[; ;tcpip_types.h: 338: SDRP_TCPIP = 42,
[; ;tcpip_types.h: 339: IPV6_Route_TCPIP = 43,
[; ;tcpip_types.h: 340: IPV6_Frag_TCPIP = 44,
[; ;tcpip_types.h: 341: IDRP_TCPIP = 45,
[; ;tcpip_types.h: 342: RSVP_TCPIP = 46,
[; ;tcpip_types.h: 343: GRE_TCPIP = 47,
[; ;tcpip_types.h: 344: DSR_TCPIP = 48,
[; ;tcpip_types.h: 345: BNA_TCPIP = 49,
[; ;tcpip_types.h: 346: ESP_TCPIP = 50,
[; ;tcpip_types.h: 347: AH_TCPIP = 51,
[; ;tcpip_types.h: 348: I_NLSP_TCPIP = 52,
[; ;tcpip_types.h: 349: SWIPE_TCPIP = 53,
[; ;tcpip_types.h: 350: NARP_TCPIP = 54,
[; ;tcpip_types.h: 351: MOBILE_TCPIP = 55,
[; ;tcpip_types.h: 352: TLSP_TCPIP = 56,
[; ;tcpip_types.h: 353: SKIP_TCPIP = 57,
[; ;tcpip_types.h: 354: IPV6_ICMP_TCPIP = 58,
[; ;tcpip_types.h: 355: IPV6_NoNxt_TCPIP = 59,
[; ;tcpip_types.h: 356: IPV6_Opts_TCPIP = 60,
[; ;tcpip_types.h: 357: CFTP_TCPIP = 62,
[; ;tcpip_types.h: 358: SAT_EXPAK_TCPIP = 64,
[; ;tcpip_types.h: 359: KRYPTOLAN_TCPIP = 65,
[; ;tcpip_types.h: 360: RVD_TCPIP = 66,
[; ;tcpip_types.h: 361: IPPC_TCPIP = 67,
[; ;tcpip_types.h: 362: SAT_MON_TCPIP = 69,
[; ;tcpip_types.h: 363: VISA_TCPIP = 70,
[; ;tcpip_types.h: 364: IPCV_TCPIP = 71,
[; ;tcpip_types.h: 365: CPNX_TCPIP = 72,
[; ;tcpip_types.h: 366: CPHB_TCPIP = 73,
[; ;tcpip_types.h: 367: WSN_TCPIP = 74,
[; ;tcpip_types.h: 368: PVP_TCPIP = 75,
[; ;tcpip_types.h: 369: BR_SAT_MON_TCPIP = 76,
[; ;tcpip_types.h: 370: SUN_ND_TCPIP = 77,
[; ;tcpip_types.h: 371: WB_MON_TCPIP = 78,
[; ;tcpip_types.h: 372: WB_EXPAK_TCPIP = 79,
[; ;tcpip_types.h: 373: ISO_IP_TCPIP = 80,
[; ;tcpip_types.h: 374: VMTP_TCPIP = 81,
[; ;tcpip_types.h: 375: SECURE_VMTP_TCPIP = 82,
[; ;tcpip_types.h: 376: VINES_TCPIP = 83,
[; ;tcpip_types.h: 377: TTP_TCPIP = 84,
[; ;tcpip_types.h: 378: IPTM_TCPIP = 84,
[; ;tcpip_types.h: 379: NSFNET_IGP_TCPIP = 85,
[; ;tcpip_types.h: 380: DGP_TCPIP = 86,
[; ;tcpip_types.h: 381: TCF_TCPIP = 87,
[; ;tcpip_types.h: 382: EIGRP_TCPIP = 88,
[; ;tcpip_types.h: 383: OSPFIGP_TCPIP = 89,
[; ;tcpip_types.h: 384: Sprite_RPC_TCPIP = 90,
[; ;tcpip_types.h: 385: LARP_TCPIP = 91,
[; ;tcpip_types.h: 386: MTP_TCPIP = 92,
[; ;tcpip_types.h: 387: AX25_TCPIP = 93,
[; ;tcpip_types.h: 388: IPIP_TCPIP = 94,
[; ;tcpip_types.h: 389: MICP_TCPIP = 95,
[; ;tcpip_types.h: 390: SCC_SP_TCPIP = 96,
[; ;tcpip_types.h: 391: ETHERIP_TCPIP = 97,
[; ;tcpip_types.h: 392: ENCAP_TCPIP = 98,
[; ;tcpip_types.h: 393: GMTP_TCPIP = 100,
[; ;tcpip_types.h: 394: IFMP_TCPIP = 101,
[; ;tcpip_types.h: 395: PNNI_TCPIP = 102,
[; ;tcpip_types.h: 396: PIM_TCPIP = 103,
[; ;tcpip_types.h: 397: ARIS_TCPIP = 104,
[; ;tcpip_types.h: 398: SCPS_TCPIP = 105,
[; ;tcpip_types.h: 399: QNX_TCPIP = 106,
[; ;tcpip_types.h: 400: A_N_TCPIP = 107,
[; ;tcpip_types.h: 401: IPComp_TCPIP = 108,
[; ;tcpip_types.h: 402: SNP_TCPIP = 109,
[; ;tcpip_types.h: 403: Compaq_Peer_TCPIP = 110,
[; ;tcpip_types.h: 404: IPX_in_IP_TCPIP = 111,
[; ;tcpip_types.h: 405: VRRP_TCPIP = 112,
[; ;tcpip_types.h: 406: PGM_TCPIP = 113,
[; ;tcpip_types.h: 407: L2TP_TCPIP = 115,
[; ;tcpip_types.h: 408: DDX_TCPIP = 116,
[; ;tcpip_types.h: 409: IATP_TCPIP = 117,
[; ;tcpip_types.h: 410: STP_TCPIP = 118,
[; ;tcpip_types.h: 411: SRP_TCPIP = 119,
[; ;tcpip_types.h: 412: UTI_TCPIP = 120,
[; ;tcpip_types.h: 413: SMP_TCPIP = 121,
[; ;tcpip_types.h: 414: SM_TCPIP = 122,
[; ;tcpip_types.h: 415: PTP_TCPIP = 123,
[; ;tcpip_types.h: 416: ISIS_TCPIP = 124,
[; ;tcpip_types.h: 417: FIRE_TCPIP = 125,
[; ;tcpip_types.h: 418: CRTP_TCPIP = 126,
[; ;tcpip_types.h: 419: CRUDP_TCPIP = 127,
[; ;tcpip_types.h: 420: SSCOPMCE_TCPIP = 128,
[; ;tcpip_types.h: 421: IPLT_TCPIP = 129,
[; ;tcpip_types.h: 422: SPS_TCPIP = 130,
[; ;tcpip_types.h: 423: PIPE_TCPIP = 131,
[; ;tcpip_types.h: 424: SCTP_TCPIP = 132,
[; ;tcpip_types.h: 425: FC_TCPIP = 133
[; ;tcpip_types.h: 426: } ipProtocolNumbers;
[; ;tcpip_types.h: 428: typedef struct
[; ;tcpip_types.h: 429: {
[; ;tcpip_types.h: 430: union{
[; ;tcpip_types.h: 431: uint32_t s_addr;
[; ;tcpip_types.h: 432: uint8_t s_addr_byte[4];
[; ;tcpip_types.h: 433: };
[; ;tcpip_types.h: 434: }inAddr_t;
[; ;tcpip_types.h: 436: typedef struct
[; ;tcpip_types.h: 437: {
[; ;tcpip_types.h: 438: union {
[; ;tcpip_types.h: 439: uint8_t s6_u8[16];
[; ;tcpip_types.h: 440: uint16_t s6_u16[8];
[; ;tcpip_types.h: 441: uint32_t s6_u32[4];
[; ;tcpip_types.h: 442: } s6;
[; ;tcpip_types.h: 446: }in6Addr_t;
[; ;tcpip_types.h: 448: typedef struct
[; ;tcpip_types.h: 449: {
[; ;tcpip_types.h: 450: uint16_t port;
[; ;tcpip_types.h: 451: inAddr_t addr;
[; ;tcpip_types.h: 452: }sockaddr_in_t;
[; ;tcpip_types.h: 454: typedef struct {
[; ;tcpip_types.h: 456: uint16_t in6_port;
[; ;tcpip_types.h: 457: uint32_t in6_flowinfo;
[; ;tcpip_types.h: 458: in6Addr_t in6_addr;
[; ;tcpip_types.h: 459: uint32_t in6_scope_id;
[; ;tcpip_types.h: 460: }sockaddr_in6_t;
[; ;tcpip_types.h: 462: extern const char *network_errors[];
[; ;tcpip_types.h: 464: typedef enum
[; ;tcpip_types.h: 465: {
[; ;tcpip_types.h: 466: ERROR =0,
[; ;tcpip_types.h: 467: SUCCESS,
[; ;tcpip_types.h: 468: LINK_NOT_FOUND,
[; ;tcpip_types.h: 469: BUFFER_BUSY,
[; ;tcpip_types.h: 470: TX_LOGIC_NOT_IDLE,
[; ;tcpip_types.h: 471: MAC_NOT_FOUND,
[; ;tcpip_types.h: 472: IP_WRONG_VERSION,
[; ;tcpip_types.h: 473: IPV4_CHECKSUM_FAILS,
[; ;tcpip_types.h: 474: DEST_IP_NOT_MATCHED,
[; ;tcpip_types.h: 475: ICMP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 476: UDP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 477: TCP_CHECKSUM_FAILS,
[; ;tcpip_types.h: 478: DMA_TIMEOUT,
[; ;tcpip_types.h: 479: PORT_NOT_AVAILABLE,
[; ;tcpip_types.h: 480: ARP_IP_NOT_MATCHED,
[; ;tcpip_types.h: 481: EAPoL_PACKET_FAILURE,
[; ;tcpip_types.h: 482: INCORRECT_IPV4_HLEN,
[; ;tcpip_types.h: 483: IPV4_NO_OPTIONS,
[; ;tcpip_types.h: 484: TX_QUEUED
[; ;tcpip_types.h: 485: }error_msg;
[; ;tcpip_types.h: 487: typedef struct
[; ;tcpip_types.h: 488: {
[; ;tcpip_types.h: 489: inAddr_t dest_addr;
[; ;tcpip_types.h: 490: }destIP_t;
[; ;tcpip_types.h: 493: typedef int8_t socklistsize_t;
[; ;tcpip_types.h: 495: typedef void (*ip_receive_function_ptr)(int);
[; ;network.h: 58: void Network_Init(void);
[; ;network.h: 59: void Network_Read(void);
[; ;network.h: 60: void Network_Manage(void);
[; ;network.h: 61: void Network_WaitForLink(void);
[; ;network.h: 62: void timersInit();
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;mac_address.h: 51: typedef union
[; ;mac_address.h: 52: {
[; ;mac_address.h: 53: uint8_t mac_array[6];
[; ;mac_address.h: 54: struct { uint8_t byte1,byte2,byte3,byte4,byte5,byte6; } s;
[; ;mac_address.h: 55: } mac48Address_t;
[; ;mac_address.h: 57: extern const mac48Address_t broadcastMAC;
[; ;mac_address.h: 58: extern const mac48Address_t macAddress;
[; ;mac_address.h: 59: extern mac48Address_t hostMacAddress;
[; ;mac_address.h: 61: const mac48Address_t *MAC_getAddress(void);
[; ;ethernet_driver.h: 49: typedef struct
[; ;ethernet_driver.h: 50: {
[; ;ethernet_driver.h: 51: uint16_t byteCount;
[; ;ethernet_driver.h: 52: unsigned long_drop_event:1;
[; ;ethernet_driver.h: 53: unsigned :1;
[; ;ethernet_driver.h: 54: unsigned excessCarrierEvent:1;
[; ;ethernet_driver.h: 55: unsigned :1;
[; ;ethernet_driver.h: 56: unsigned crcError:1;
[; ;ethernet_driver.h: 57: unsigned lengthCheckError:1;
[; ;ethernet_driver.h: 58: unsigned lengthLongError:1;
[; ;ethernet_driver.h: 59: unsigned rxOK:1;
[; ;ethernet_driver.h: 60: unsigned rxMulticast:1;
[; ;ethernet_driver.h: 61: unsigned rxBroadcast:1;
[; ;ethernet_driver.h: 62: unsigned dribbleNibble:1;
[; ;ethernet_driver.h: 63: unsigned controlFrame:1;
[; ;ethernet_driver.h: 64: unsigned pauseControlFrame:1;
[; ;ethernet_driver.h: 65: unsigned unknownContrlFrame:1;
[; ;ethernet_driver.h: 66: unsigned vlanTagPresent:1;
[; ;ethernet_driver.h: 67: unsigned zero:1;
[; ;ethernet_driver.h: 68: }receiveStatusVector_t;
[; ;ethernet_driver.h: 70: typedef struct
[; ;ethernet_driver.h: 71: {
[; ;ethernet_driver.h: 72: unsigned error:1;
[; ;ethernet_driver.h: 73: unsigned pktReady:1;
[; ;ethernet_driver.h: 74: unsigned up:1;
[; ;ethernet_driver.h: 75: unsigned idle:1;
[; ;ethernet_driver.h: 76: unsigned linkChange:1;
[; ;ethernet_driver.h: 77: unsigned bufferBusy:1;
[; ;ethernet_driver.h: 78: unsigned :3;
[; ;ethernet_driver.h: 79: uint16_t saveRDPT;
[; ;ethernet_driver.h: 80: uint16_t saveWRPT;
[; ;ethernet_driver.h: 81: } ethernetDriver_t;
[; ;ethernet_driver.h: 83: typedef struct
[; ;ethernet_driver.h: 84: {
[; ;ethernet_driver.h: 85: uint16_t flags;
[; ;ethernet_driver.h: 86: uint16_t packetStart;
[; ;ethernet_driver.h: 87: uint16_t packetEnd;
[; ;ethernet_driver.h: 89: void *prevPacket;
[; ;ethernet_driver.h: 90: void *nextPacket;
[; ;ethernet_driver.h: 91: } txPacket_t;
[; ;ethernet_driver.h: 93: extern volatile ethernetDriver_t ethData;
[; ;ethernet_driver.h: 99: void ETH_Init(void);
[; ;ethernet_driver.h: 100: void ETH_EventHandler(void);
[; ;ethernet_driver.h: 101: void ETH_NextPacketUpdate();
[; ;ethernet_driver.h: 102: void ETH_ResetReceiver(void);
[; ;ethernet_driver.h: 103: void ETH_SendSystemReset(void);
[; ;ethernet_driver.h: 106: uint16_t ETH_ReadBlock(void*, uint16_t);
[; ;ethernet_driver.h: 107: uint8_t ETH_Read8(void);
[; ;ethernet_driver.h: 108: uint16_t ETH_Read16(void);
[; ;ethernet_driver.h: 109: uint32_t ETH_Read24(void);
[; ;ethernet_driver.h: 110: uint32_t ETH_Read32(void);
[; ;ethernet_driver.h: 111: void ETH_Dump(uint16_t);
[; ;ethernet_driver.h: 112: void ETH_Flush(void);
[; ;ethernet_driver.h: 114: uint16_t ETH_GetFreeTxBufferSize(void);
[; ;ethernet_driver.h: 116: error_msg ETH_WriteStart(const mac48Address_t *dest_mac, uint16_t type);
[; ;ethernet_driver.h: 117: uint16_t ETH_WriteString(const char *string);
[; ;ethernet_driver.h: 118: uint16_t ETH_WriteBlock(const void *, uint16_t);
[; ;ethernet_driver.h: 119: void ETH_Write8(uint8_t);
[; ;ethernet_driver.h: 120: void ETH_Write16(uint16_t);
[; ;ethernet_driver.h: 121: void ETH_Write24(uint32_t data);
[; ;ethernet_driver.h: 122: void ETH_Write32(uint32_t);
[; ;ethernet_driver.h: 123: void ETH_Insert(char *,uint16_t, uint16_t);
[; ;ethernet_driver.h: 124: error_msg ETH_Copy(uint16_t);
[; ;ethernet_driver.h: 125: error_msg ETH_Send(void);
[; ;ethernet_driver.h: 127: uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 128: uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed);
[; ;ethernet_driver.h: 130: void ETH_GetMAC(uint8_t *);
[; ;ethernet_driver.h: 131: void ETH_SetMAC(uint8_t *);
[; ;ethernet_driver.h: 132: uint16_t ETH_GetWritePtr();
[; ;ethernet_driver.h: 133: void ETH_SaveRDPT(void);
[; ;ethernet_driver.h: 134: void ETH_ResetReadPtr();
[; ;ethernet_driver.h: 135: uint16_t ETH_GetReadPtr(void);
[; ;ethernet_driver.h: 136: void ETH_SetReadPtr(uint16_t);
[; ;ethernet_driver.h: 137: uint16_t ETH_GetStatusVectorByteCount(void);
[; ;ethernet_driver.h: 138: void ETH_SetStatusVectorByteCount(uint16_t);
[; ;ethernet_driver.h: 140: void ETH_ResetByteCount(void);
[; ;ethernet_driver.h: 141: uint16_t ETH_GetByteCount(void);
[; ;ethernet_driver.h: 143: uint16_t ETH_ReadSavedWRPT(void);
[; ;ethernet_driver.h: 144: void ETH_SaveWRPT(void);
[; ;ethernet_driver.h: 145: void ETH_SetRxByteCount(uint16_t count);
[; ;ethernet_driver.h: 146: uint16_t ETH_GetRxByteCount();
[; ;ethernet_driver.h: 148: bool ETH_CheckLinkUp();
[; ;ethernet_driver.h: 150: void ETH_TxReset(void);
[; ;ethernet_driver.h: 151: void ETH_MoveBackReadPtr(uint16_t offset);
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;ipv4.h: 66: void IPV4_Init(void);
[; ;ipv4.h: 73: error_msg IPV4_Packet(void);
[; ;ipv4.h: 90: error_msg IPv4_Start(uint32_t dstAddress, ipProtocolNumbers protocol);
[; ;ipv4.h: 101: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen);
[; ;ipv4.h: 115: error_msg IPV4_Send(uint16_t payloadLength);
[; ;ipv4.h: 122: uint16_t IPV4_GetStartPosition(void);
[; ;ipv4.h: 129: uint16_t IPV4_GetDatagramLength(void);
[; ;icmp.h: 58: error_msg ICMP_Receive(ipv4Header_t *ipv4Hdr);
[; ;icmp.h: 68: error_msg ICMP_EchoReply(ipv4Header_t *ipv4Hdr);
[; ;icmp.h: 80: error_msg ICMP_PortUnreachable(uint32_t srcIPAddress,uint32_t destIPAddress, uint16_t length);
[; ;icmp.h: 89: bool isPortUnreachable(uint16_t port);
[; ;icmp.h: 95: void resetPortUnreachable(void);
[; ;arpv4.h: 57: void ARPV4_Init(void);
[; ;arpv4.h: 69: error_msg ARPV4_Packet(void);
[; ;arpv4.h: 75: void ARPV4_Update(void);
[; ;arpv4.h: 86: mac48Address_t* ARPV4_Lookup(uint32_t ipAddress);
[; ;arpv4.h: 99: error_msg ARPV4_Request(uint32_t destAddress);
[; ;tcpv4.h: 61: typedef enum
[; ;tcpv4.h: 62: {
[; ;tcpv4.h: 63: CLOSED = 0,
[; ;tcpv4.h: 64: LISTEN, SYN_SENT, SYN_RECEIVED, ESTABLISHED, FIN_WAIT_1, FIN_WAIT_2, CLOSE_WAIT, CLOSING, LAST_ACK, TIME_WAIT,
[; ;tcpv4.h: 65: }tcp_fsm_states_t;
[; ;tcpv4.h: 67: typedef enum
[; ;tcpv4.h: 68: {
[; ;tcpv4.h: 69: CLOSE = 0,
[; ;tcpv4.h: 70: ACTIVE_OPEN, PASIVE_OPEN, RCV_SYN, RCV_ACK, RCV_SYNACK, RCV_FIN, RCV_FINACK, RX_PACKET, RCV_RST, RCV_RSTACK,
[; ;tcpv4.h: 71: RCV_PSHACK, TIMEOUT,
[; ;tcpv4.h: 72: NOP
[; ;tcpv4.h: 73: }tcpEvent_t;
[; ;tcpv4.h: 76: typedef enum
[; ;tcpv4.h: 77: {
[; ;tcpv4.h: 78: NOT_A_SOCKET = 0,
[; ;tcpv4.h: 79: SOCKET_CLOSED,
[; ;tcpv4.h: 80: SOCKET_IN_PROGRESS,
[; ;tcpv4.h: 81: SOCKET_CONNECTED,
[; ;tcpv4.h: 82: SOCKET_CLOSING
[; ;tcpv4.h: 83: } socketState_t;
[; ;tcpv4.h: 85: typedef struct
[; ;tcpv4.h: 86: {
[; ;tcpv4.h: 87: uint32_t localIP;
[; ;tcpv4.h: 88: uint16_t localPort;
[; ;tcpv4.h: 89: uint32_t remoteIP;
[; ;tcpv4.h: 90: uint16_t remotePort;
[; ;tcpv4.h: 91: }tcpSocket_t;
[; ;tcpv4.h: 93: typedef enum
[; ;tcpv4.h: 94: {
[; ;tcpv4.h: 95: NO_BUFF = 0,
[; ;tcpv4.h: 96: RX_BUFF_IN_USE,
[; ;tcpv4.h: 97: TX_BUFF_IN_USE
[; ;tcpv4.h: 98: }tcpBufferState_t;
[; ;tcpv4.h: 100: typedef struct
[; ;tcpv4.h: 101: {
[; ;tcpv4.h: 102: uint16_t localPort;
[; ;tcpv4.h: 104: uint32_t destIP;
[; ;tcpv4.h: 105: uint16_t destPort;
[; ;tcpv4.h: 107: uint32_t remoteSeqno;
[; ;tcpv4.h: 108: uint32_t remoteAck;
[; ;tcpv4.h: 110: uint32_t localSeqno;
[; ;tcpv4.h: 111: uint32_t localLastAck;
[; ;tcpv4.h: 113: uint16_t remoteWnd;
[; ;tcpv4.h: 114: uint16_t localWnd;
[; ;tcpv4.h: 116: uint16_t mss;
[; ;tcpv4.h: 118: uint8_t *rxBufferStart;
[; ;tcpv4.h: 119: uint8_t *rxBufferPtr;
[; ;tcpv4.h: 120: tcpBufferState_t rxBufState;
[; ;tcpv4.h: 122: uint8_t *txBufferStart;
[; ;tcpv4.h: 123: uint8_t *txBufferPtr;
[; ;tcpv4.h: 124: uint16_t bytesToSend;
[; ;tcpv4.h: 125: tcpBufferState_t txBufState;
[; ;tcpv4.h: 126: uint16_t bytesSent;
[; ;tcpv4.h: 127: bool payloadSave;
[; ;tcpv4.h: 129: tcp_fsm_states_t fsmState;
[; ;tcpv4.h: 130: tcpEvent_t connectionEvent;
[; ;tcpv4.h: 133: void *nextTCB;
[; ;tcpv4.h: 134: void *prevTCB;
[; ;tcpv4.h: 136: uint16_t timeout;
[; ;tcpv4.h: 137: uint16_t timeoutReloadValue;
[; ;tcpv4.h: 138: uint8_t timeoutsCount;
[; ;tcpv4.h: 139: uint8_t flags;
[; ;tcpv4.h: 141: socketState_t socketState;
[; ;tcpv4.h: 142: }tcpTCB_t;
[; ;tcpv4.h: 144: typedef enum
[; ;tcpv4.h: 145: {
[; ;tcpv4.h: 146: TCP_EOP = 0u,
[; ;tcpv4.h: 147: TCP_NOP = 1u,
[; ;tcpv4.h: 148: TCP_MSS = 2u,
[; ;tcpv4.h: 195: }tcp_options_t;
[; ;tcpv4.h: 211: void TCP_Init(void);
[; ;tcpv4.h: 227: tcbError_t TCP_SocketInit(tcpTCB_t *tcb_ptr);
[; ;tcpv4.h: 242: tcbError_t TCP_SocketRemove(tcpTCB_t *tcb_ptr);
[; ;tcpv4.h: 256: socketState_t TCP_SocketPoll(tcpTCB_t *tcbPtr);
[; ;tcpv4.h: 273: bool TCP_Bind(tcpTCB_t *tcbPtr, uint16_t port);
[; ;tcpv4.h: 291: bool TCP_Listen(tcpTCB_t *tcbPtr);
[; ;tcpv4.h: 307: bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr);
[; ;tcpv4.h: 321: bool TCP_Close(tcpTCB_t *tcbPtr);
[; ;tcpv4.h: 336: bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen);
[; ;tcpv4.h: 351: bool TCP_SendDone(tcpTCB_t *tcbPtr);
[; ;tcpv4.h: 370: bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen);
[; ;tcpv4.h: 384: int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr);
[; ;tcpv4.h: 397: int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr);
[; ;tcpv4.h: 409: void TCP_Update(void);
[; ;ip_database.h: 40: typedef struct {
[; ;ip_database.h: 41: uint32_t ipv4_myAddress;
[; ;ip_database.h: 42: uint32_t ipv4_dns[2];
[; ;ip_database.h: 43: uint32_t ipv4_subnetMask;
[; ;ip_database.h: 44: uint32_t ipv4_router;
[; ;ip_database.h: 45: uint32_t ipv4_gateway;
[; ;ip_database.h: 46: uint32_t ipv4_ntpAddress[2];
[; ;ip_database.h: 47: uint32_t ipv4_tftpAddress;
[; ;ip_database.h: 48: } ip_db_info_t;
[; ;ip_database.h: 51: extern ip_db_info_t ip_database_info;
[; ;ip_database.h: 72: void ipdb_init(void);
[; ;ip_database.h: 73: uint32_t makeStrToIpv4Address(char *str);
[; ;ip_database.h: 74: char *makeIpv4AddresstoStr(uint32_t addr);
"52 mcc_generated_files/TCPIPLibrary/ipv4.c
[v _remoteIpv4Address `ul ~T0 @X0 1 e ]
[; ;ipv4.c: 52: uint32_t remoteIpv4Address;
"53
[v _ipv4StartPosition `ui ~T0 @X0 1 e ]
[; ;ipv4.c: 53: uint16_t ipv4StartPosition;
"54
[v _ipv4Header `S6 ~T0 @X0 1 e ]
[; ;ipv4.c: 54: ipv4Header_t ipv4Header;
[; ;ipv4.c: 55: static void IPV4_SaveStartPosition(void);
[; ;ipv4.c: 61: extern void TCP_Recv(uint32_t, uint16_t);
"63
[v _IPV4_Init `(v ~T0 @X0 1 ef ]
"64
{
[; ;ipv4.c: 63: void IPV4_Init(void)
[; ;ipv4.c: 64: {
[e :U _IPV4_Init ]
[f ]
[; ;ipv4.c: 65: ipdb_init();
"65
[e ( _ipdb_init ..  ]
[; ;ipv4.c: 66: }
"66
[e :UE 36 ]
}
"68
[v _IPV4_PseudoHeaderChecksum `(ui ~T0 @X0 1 ef1`ui ]
"69
{
[; ;ipv4.c: 68: uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen)
[; ;ipv4.c: 69: {
[e :U _IPV4_PseudoHeaderChecksum ]
"68
[v _payloadLen `ui ~T0 @X0 1 r1 ]
"69
[f ]
"70
[v _tmp `S7 ~T0 @X0 1 a ]
"71
[v _len `uc ~T0 @X0 1 a ]
"72
[v _cksm `ul ~T0 @X0 1 a ]
[; ;ipv4.c: 70: ipv4_pseudo_header_t tmp;
[; ;ipv4.c: 71: uint8_t len;
[; ;ipv4.c: 72: uint32_t cksm = 0;
[e = _cksm -> -> -> 0 `i `l `ul ]
"73
[v _v `*ui ~T0 @X0 1 a ]
[; ;ipv4.c: 73: uint16_t *v;
[; ;ipv4.c: 75: tmp.srcIpAddress = ipv4Header.srcIpAddress;
"75
[e = . _tmp 0 . _ipv4Header 14 ]
[; ;ipv4.c: 76: tmp.dstIpAddress = ipv4Header.dstIpAddress;
"76
[e = . _tmp 1 . _ipv4Header 15 ]
[; ;ipv4.c: 77: tmp.protocol = ipv4Header.protocol;
"77
[e = . _tmp 2 . _ipv4Header 12 ]
[; ;ipv4.c: 78: tmp.z = 0;
"78
[e = . _tmp 3 -> -> 0 `i `uc ]
[; ;ipv4.c: 79: tmp.length = payloadLen;
"79
[e = . _tmp 4 _payloadLen ]
[; ;ipv4.c: 81: len = sizeof(tmp);
"81
[e = _len -> -> # _tmp `ui `uc ]
[; ;ipv4.c: 82: len = len >> 1;
"82
[e = _len -> >> -> _len `i -> 1 `i `uc ]
[; ;ipv4.c: 84: v = (uint16_t *) &tmp;
"84
[e = _v -> &U _tmp `*ui ]
[; ;ipv4.c: 86: while(len)
"86
[e $U 38  ]
[e :U 39 ]
[; ;ipv4.c: 87: {
"87
{
[; ;ipv4.c: 88: cksm += *v;
"88
[e =+ _cksm -> *U _v `ul ]
[; ;ipv4.c: 89: len--;
"89
[e -- _len -> -> 1 `i `uc ]
[; ;ipv4.c: 90: v++;
"90
[e ++ _v * -> -> 1 `i `x -> -> # *U _v `i `x ]
"91
}
[e :U 38 ]
"86
[e $ != -> _len `i -> -> -> 0 `i `uc `i 39  ]
[e :U 40 ]
[; ;ipv4.c: 91: }
[; ;ipv4.c: 94: cksm = (cksm & 0x0FFFF) + (cksm>>16);
"94
[e = _cksm + & _cksm -> -> 65535 `ui `ul >> _cksm -> 16 `i ]
[; ;ipv4.c: 97: return cksm;
"97
[e ) -> _cksm `ui ]
[e $UE 37  ]
[; ;ipv4.c: 98: }
"98
[e :UE 37 ]
}
"100
[v _IPV4_Packet `(E390 ~T0 @X0 1 ef ]
"101
{
[; ;ipv4.c: 100: error_msg IPV4_Packet(void)
[; ;ipv4.c: 101: {
[e :U _IPV4_Packet ]
[f ]
"102
[v _cksm `ui ~T0 @X0 1 a ]
[; ;ipv4.c: 102: uint16_t cksm = 0;
[e = _cksm -> -> 0 `i `ui ]
"103
[v _length `ui ~T0 @X0 1 a ]
[; ;ipv4.c: 103: uint16_t length = 0;
[e = _length -> -> 0 `i `ui ]
"104
[v _addrTemp `ul ~T0 @X0 1 a ]
"105
[v _msg `uc ~T0 @X0 -> 40 `i a ]
"106
[v _hdrLen `uc ~T0 @X0 1 a ]
[; ;ipv4.c: 104: uint32_t addrTemp;
[; ;ipv4.c: 105: char msg[40];
[; ;ipv4.c: 106: uint8_t hdrLen;
[; ;ipv4.c: 109: cksm = ETH_RxComputeChecksum(sizeof(ipv4Header_t), 0);
"109
[e = _cksm ( _ETH_RxComputeChecksum (2 , -> # `S6 `ui -> -> 0 `i `ui ]
[; ;ipv4.c: 110: if (cksm != 0)
"110
[e $ ! != _cksm -> -> 0 `i `ui 42  ]
[; ;ipv4.c: 111: {
"111
{
[; ;ipv4.c: 112: return IPV4_CHECKSUM_FAILS;
"112
[e ) . `E390 7 ]
[e $UE 41  ]
"113
}
[e :U 42 ]
[; ;ipv4.c: 113: }
[; ;ipv4.c: 115: IPV4_SaveStartPosition();
"115
[e ( _IPV4_SaveStartPosition ..  ]
[; ;ipv4.c: 116: ETH_ReadBlock((char *)&ipv4Header, sizeof(ipv4Header_t));
"116
[e ( _ETH_ReadBlock (2 , -> -> &U _ipv4Header `*uc `*v -> # `S6 `ui ]
[; ;ipv4.c: 117: if(ipv4Header.version != 4)
"117
[e $ ! != -> . _ipv4Header 1 `i -> 4 `i 43  ]
[; ;ipv4.c: 118: {
"118
{
[; ;ipv4.c: 119: return IP_WRONG_VERSION;
"119
[e ) . `E390 6 ]
[e $UE 41  ]
"120
}
[e :U 43 ]
[; ;ipv4.c: 120: }
[; ;ipv4.c: 122: addrTemp = ipv4Header.dstIpAddress;
"122
[e = _addrTemp . _ipv4Header 15 ]
[; ;ipv4.c: 123: ipv4Header.dstIpAddress = ((((uint32_t)addrTemp&(uint32_t)0xff000000) >> 24) | (((uint32_t)addrTemp&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)addrTemp&(uint32_t)0x0000ff00) << 8) | (((uint32_t)addrTemp&(uint32_t)0x000000ff) << 24) );
"123
[e = . _ipv4Header 15 | | | >> & _addrTemp -> 4278190080 `ul -> 24 `i >> & _addrTemp -> -> 16711680 `l `ul -> 8 `i << & _addrTemp -> -> 65280 `ui `ul -> 8 `i << & _addrTemp -> -> 255 `i `ul -> 24 `i ]
[; ;ipv4.c: 124: addrTemp++;
"124
[e ++ _addrTemp -> -> -> 1 `i `l `ul ]
[; ;ipv4.c: 126: addrTemp = ipv4Header.srcIpAddress;
"126
[e = _addrTemp . _ipv4Header 14 ]
[; ;ipv4.c: 127: ipv4Header.srcIpAddress = ((((uint32_t)addrTemp&(uint32_t)0xff000000) >> 24) | (((uint32_t)addrTemp&(uint32_t)0x00ff0000) >> 8) | (((uint32_t)addrTemp&(uint32_t)0x0000ff00) << 8) | (((uint32_t)addrTemp&(uint32_t)0x000000ff) << 24) );
"127
[e = . _ipv4Header 14 | | | >> & _addrTemp -> 4278190080 `ul -> 24 `i >> & _addrTemp -> -> 16711680 `l `ul -> 8 `i << & _addrTemp -> -> 65280 `ui `ul -> 8 `i << & _addrTemp -> -> 255 `i `ul -> 24 `i ]
[; ;ipv4.c: 129: if(ipv4Header.srcIpAddress == 0xFFFFFFFF)
"129
[e $ ! == . _ipv4Header 14 -> 4294967295 `ul 44  ]
[; ;ipv4.c: 130: return DEST_IP_NOT_MATCHED;
"130
[e ) . `E390 8 ]
[e $UE 41  ]
[e :U 44 ]
[; ;ipv4.c: 133: if(ipv4Header.dstIpAddress == (ip_database_info.ipv4_myAddress) || (ipv4Header.dstIpAddress == 0)||
[; ;ipv4.c: 134: ((ipv4Header.dstIpAddress == 0xFFFFFFFF)
[; ;ipv4.c: 135: ||((ipv4Header.dstIpAddress|0XFF000000 == 0xFFFFFFFF && (((ip_database_info.ipv4_myAddress)|0x00FFFFFF)== ipv4Header.dstIpAddress)))
[; ;ipv4.c: 136: ||((ipv4Header.dstIpAddress|0xFFFF0000 == 0xFFFFFFFF && (((ip_database_info.ipv4_myAddress)|0x0000FFFF)== ipv4Header.dstIpAddress)))
[; ;ipv4.c: 137: ||((ipv4Header.dstIpAddress|0xFFFFFF00 == 0xFFFFFFFF && (((ip_database_info.ipv4_myAddress)|0X000000FF)== ipv4Header.dstIpAddress))))
[; ;ipv4.c: 138: || (ipv4Header.dstIpAddress == 0xE0000001))
"138
[e $ ! || || || == . _ipv4Header 15 . _ip_database_info 0 == . _ipv4Header 15 -> -> -> 0 `i `l `ul || || || == . _ipv4Header 15 -> 4294967295 `ul && != | . _ipv4Header 15 -> -> -> == -> 4278190080 `ul -> 4294967295 `ul `i `l `ul -> -> 0 `i `ul == | . _ip_database_info 0 -> -> 16777215 `l `ul . _ipv4Header 15 && != | . _ipv4Header 15 -> -> -> == -> 4294901760 `ul -> 4294967295 `ul `i `l `ul -> -> 0 `i `ul == | . _ip_database_info 0 -> -> 65535 `ui `ul . _ipv4Header 15 && != | . _ipv4Header 15 -> -> -> == -> 4294967040 `ul -> 4294967295 `ul `i `l `ul -> -> 0 `i `ul == | . _ip_database_info 0 -> -> -> 255 `i `l `ul . _ipv4Header 15 == . _ipv4Header 15 -> 3758096385 `ul 45  ]
[; ;ipv4.c: 139: {
"139
{
[; ;ipv4.c: 140: ipv4Header.length = ((((uint16_t)ipv4Header.length & (uint16_t)0xFF00) >> 8) | (((uint16_t)ipv4Header.length & (uint16_t)0x00FF) << 8));
"140
[e = . _ipv4Header 4 | >> & . _ipv4Header 4 -> 65280 `ui -> 8 `i << & . _ipv4Header 4 -> -> 255 `i `ui -> 8 `i ]
[; ;ipv4.c: 142: hdrLen = (uint8_t)(ipv4Header.ihl << 2);
"142
[e = _hdrLen -> << -> . _ipv4Header 0 `i -> 2 `i `uc ]
[; ;ipv4.c: 144: if(ipv4Header.ihl < 5)
"144
[e $ ! < -> . _ipv4Header 0 `i -> 5 `i 46  ]
[; ;ipv4.c: 145: return INCORRECT_IPV4_HLEN;
"145
[e ) . `E390 16 ]
[e $UE 41  ]
[e :U 46 ]
[; ;ipv4.c: 147: if (ipv4Header.ihl > 5)
"147
[e $ ! > -> . _ipv4Header 0 `i -> 5 `i 47  ]
[; ;ipv4.c: 148: {
"148
{
[; ;ipv4.c: 150: ETH_Dump((uint16_t)(hdrLen - sizeof(ipv4Header_t)));
"150
[e ( _ETH_Dump (1 - -> _hdrLen `ui -> # `S6 `ui ]
[; ;ipv4.c: 151: return IPV4_NO_OPTIONS;
"151
[e ) . `E390 17 ]
[e $UE 41  ]
"152
}
[e :U 47 ]
[; ;ipv4.c: 152: }
[; ;ipv4.c: 154: switch((ipProtocolNumbers)ipv4Header.protocol)
"154
[e $U 49  ]
[; ;ipv4.c: 155: {
"155
{
[; ;ipv4.c: 156: case ICMP_TCPIP:
"156
[e :U 50 ]
[; ;ipv4.c: 157: {
"157
{
[; ;ipv4.c: 159: if((ipv4Header.dstIpAddress == 0))
"159
[e $ ! == . _ipv4Header 15 -> -> -> 0 `i `l `ul 51  ]
[; ;ipv4.c: 160: {
"160
{
[; ;ipv4.c: 161: return DEST_IP_NOT_MATCHED;
"161
[e ) . `E390 8 ]
[e $UE 41  ]
"162
}
[e :U 51 ]
[; ;ipv4.c: 162: }
[; ;ipv4.c: 163: length = ipv4Header.length - hdrLen;
"163
[e = _length - . _ipv4Header 4 -> _hdrLen `ui ]
[; ;ipv4.c: 164: cksm = ETH_RxComputeChecksum(length, 0);
"164
[e = _cksm ( _ETH_RxComputeChecksum (2 , _length -> -> 0 `i `ui ]
[; ;ipv4.c: 166: if (cksm == 0)
"166
[e $ ! == _cksm -> -> 0 `i `ui 52  ]
[; ;ipv4.c: 167: {
"167
{
[; ;ipv4.c: 168: ICMP_Receive(&ipv4Header);
"168
[e ( _ICMP_Receive (1 &U _ipv4Header ]
"169
}
[; ;ipv4.c: 169: }
[e $U 53  ]
"170
[e :U 52 ]
[; ;ipv4.c: 170: else
[; ;ipv4.c: 171: {
"171
{
[; ;ipv4.c: 172: return ICMP_CHECKSUM_FAILS;
"172
[e ) . `E390 9 ]
[e $UE 41  ]
"173
}
[e :U 53 ]
"174
}
[; ;ipv4.c: 173: }
[; ;ipv4.c: 174: }
[; ;ipv4.c: 175: break;
"175
[e $U 48  ]
[; ;ipv4.c: 176: case TCP_TCPIP:
"176
[e :U 54 ]
[; ;ipv4.c: 179: length = ipv4Header.length - hdrLen;
"179
[e = _length - . _ipv4Header 4 -> _hdrLen `ui ]
[; ;ipv4.c: 180: cksm = IPV4_PseudoHeaderChecksum(length);
"180
[e = _cksm ( _IPV4_PseudoHeaderChecksum (1 _length ]
[; ;ipv4.c: 181: cksm = ETH_RxComputeChecksum(length, cksm);
"181
[e = _cksm ( _ETH_RxComputeChecksum (2 , _length _cksm ]
[; ;ipv4.c: 184: if (cksm == 0 && (ipv4Header.dstIpAddress != 0xFFFFFFFF) && (ipv4Header.dstIpAddress != 0))
"184
[e $ ! && && == _cksm -> -> 0 `i `ui != . _ipv4Header 15 -> 4294967295 `ul != . _ipv4Header 15 -> -> -> 0 `i `l `ul 55  ]
[; ;ipv4.c: 185: {
"185
{
[; ;ipv4.c: 186: remoteIpv4Address = ipv4Header.srcIpAddress;
"186
[e = _remoteIpv4Address . _ipv4Header 14 ]
[; ;ipv4.c: 187: TCP_Recv(remoteIpv4Address, length);
"187
[e ( _TCP_Recv (2 , _remoteIpv4Address _length ]
"188
}
[e :U 55 ]
[; ;ipv4.c: 188: }
[; ;ipv4.c: 189: break;
"189
[e $U 48  ]
[; ;ipv4.c: 190: default:
"190
[e :U 56 ]
[; ;ipv4.c: 191: ETH_Dump(ipv4Header.length);
"191
[e ( _ETH_Dump (1 . _ipv4Header 4 ]
[; ;ipv4.c: 192: break;
"192
[e $U 48  ]
"193
}
[; ;ipv4.c: 193: }
[e $U 48  ]
"154
[e :U 49 ]
[e [\ -> . _ipv4Header 12 `E234 , $ . `E234 1 50
 , $ . `E234 6 54
 56 ]
"193
[e :U 48 ]
[; ;ipv4.c: 194: return SUCCESS;
"194
[e ) . `E390 1 ]
[e $UE 41  ]
"195
}
[; ;ipv4.c: 195: }
[e $U 57  ]
"196
[e :U 45 ]
[; ;ipv4.c: 196: else
[; ;ipv4.c: 197: {
"197
{
[; ;ipv4.c: 198: return DEST_IP_NOT_MATCHED;
"198
[e ) . `E390 8 ]
[e $UE 41  ]
"199
}
[e :U 57 ]
[; ;ipv4.c: 199: }
[; ;ipv4.c: 200: }
"200
[e :UE 41 ]
}
"202
[v _IPv4_Start `(E390 ~T0 @X0 1 ef2`ul`E234 ]
"203
{
[; ;ipv4.c: 202: error_msg IPv4_Start(uint32_t destAddress, ipProtocolNumbers protocol)
[; ;ipv4.c: 203: {
[e :U _IPv4_Start ]
"202
[v _destAddress `ul ~T0 @X0 1 r1 ]
[v _protocol `E234 ~T0 @X0 1 r2 ]
"203
[f ]
"204
[v _ret `E390 ~T0 @X0 1 a ]
[; ;ipv4.c: 204: error_msg ret = ERROR;
[e = _ret . `E390 0 ]
[v _macAddress `*CS28 ~T0 @X0 1 a ]
"207
[v _targetAddress `ul ~T0 @X0 1 a ]
[; ;ipv4.c: 206: const mac48Address_t *macAddress;
[; ;ipv4.c: 207: uint32_t targetAddress;
[; ;ipv4.c: 210: if((((ip_database_info.ipv4_myAddress) != 0) || (protocol == UDP_TCPIP))
[; ;ipv4.c: 211: && ((ip_database_info.ipv4_myAddress) != 0x7F000001))
"211
[e $ ! && || != . _ip_database_info 0 -> -> -> 0 `i `l `ul == -> _protocol `i -> . `E234 17 `i != . _ip_database_info 0 -> -> 2130706433 `l `ul 59  ]
[; ;ipv4.c: 212: {
"212
{
[; ;ipv4.c: 213: if(((destAddress == 0xFFFFFFFF)
[; ;ipv4.c: 214: |((destAddress | 0XFF000000) == 0xFFFFFFFF)
[; ;ipv4.c: 215: |((destAddress | 0xFFFF0000 )== 0xFFFFFFFF)
[; ;ipv4.c: 216: |((destAddress | 0xFFFFFF00) == 0xFFFFFFFF))==0)
"216
[e $ ! == -> | | | == _destAddress -> 4294967295 `ul == | _destAddress -> 4278190080 `ul -> 4294967295 `ul == | _destAddress -> 4294901760 `ul -> 4294967295 `ul == | _destAddress -> 4294967040 `ul -> 4294967295 `ul `i -> 0 `i 60  ]
[; ;ipv4.c: 217: {
"217
{
[; ;ipv4.c: 218: if( ((destAddress ^ (ip_database_info.ipv4_myAddress)) & (ip_database_info.ipv4_subnetMask)) == 0)
"218
[e $ ! == & ^ _destAddress . _ip_database_info 0 . _ip_database_info 2 -> -> -> 0 `i `l `ul 61  ]
[; ;ipv4.c: 219: {
"219
{
[; ;ipv4.c: 220: targetAddress = destAddress;
"220
[e = _targetAddress _destAddress ]
"221
}
[; ;ipv4.c: 221: }
[e $U 62  ]
"222
[e :U 61 ]
[; ;ipv4.c: 222: else
[; ;ipv4.c: 223: {
"223
{
[; ;ipv4.c: 224: targetAddress = (ip_database_info.ipv4_router);
"224
[e = _targetAddress . _ip_database_info 3 ]
"225
}
[e :U 62 ]
[; ;ipv4.c: 225: }
[; ;ipv4.c: 226: macAddress= ARPV4_Lookup(targetAddress);
"226
[e = _macAddress -> ( _ARPV4_Lookup (1 _targetAddress `*CS28 ]
[; ;ipv4.c: 227: if(macAddress == 0)
"227
[e $ ! == _macAddress -> -> 0 `i `*CS28 63  ]
[; ;ipv4.c: 228: {
"228
{
[; ;ipv4.c: 229: ret = ARPV4_Request(targetAddress);
"229
[e = _ret ( _ARPV4_Request (1 _targetAddress ]
[; ;ipv4.c: 230: return ret;
"230
[e ) _ret ]
[e $UE 58  ]
"231
}
[e :U 63 ]
"232
}
[; ;ipv4.c: 231: }
[; ;ipv4.c: 232: }
[e $U 64  ]
"233
[e :U 60 ]
[; ;ipv4.c: 233: else
[; ;ipv4.c: 234: {
"234
{
[; ;ipv4.c: 235: macAddress = &broadcastMAC;
"235
[e = _macAddress &U _broadcastMAC ]
"236
}
[e :U 64 ]
[; ;ipv4.c: 236: }
[; ;ipv4.c: 237: ret = ETH_WriteStart(macAddress, 0x0800);
"237
[e = _ret ( _ETH_WriteStart (2 , _macAddress -> -> 2048 `i `ui ]
[; ;ipv4.c: 238: if(ret == SUCCESS)
"238
[e $ ! == -> _ret `i -> . `E390 1 `i 65  ]
[; ;ipv4.c: 239: {
"239
{
[; ;ipv4.c: 240: ETH_Write16(0x4500);
"240
[e ( _ETH_Write16 (1 -> -> 17664 `i `ui ]
[; ;ipv4.c: 241: ETH_Write16(0);
"241
[e ( _ETH_Write16 (1 -> -> 0 `i `ui ]
[; ;ipv4.c: 242: ETH_Write32(0xAA554000);
"242
[e ( _ETH_Write32 (1 -> 2857713664 `ul ]
[; ;ipv4.c: 243: ETH_Write8(64u);
"243
[e ( _ETH_Write8 (1 -> -> 64 `ui `uc ]
[; ;ipv4.c: 244: ETH_Write8(protocol);
"244
[e ( _ETH_Write8 (1 -> _protocol `uc ]
[; ;ipv4.c: 245: ETH_Write16(0);
"245
[e ( _ETH_Write16 (1 -> -> 0 `i `ui ]
[; ;ipv4.c: 246: ETH_Write32((ip_database_info.ipv4_myAddress));
"246
[e ( _ETH_Write32 (1 . _ip_database_info 0 ]
[; ;ipv4.c: 247: ETH_Write32(destAddress);
"247
[e ( _ETH_Write32 (1 _destAddress ]
[; ;ipv4.c: 250: ipv4Header.srcIpAddress = (ip_database_info.ipv4_myAddress);
"250
[e = . _ipv4Header 14 . _ip_database_info 0 ]
[; ;ipv4.c: 251: ipv4Header.dstIpAddress = destAddress;
"251
[e = . _ipv4Header 15 _destAddress ]
[; ;ipv4.c: 252: ipv4Header.protocol = protocol;
"252
[e = . _ipv4Header 12 -> _protocol `uc ]
"253
}
[e :U 65 ]
"254
}
[e :U 59 ]
[; ;ipv4.c: 253: }
[; ;ipv4.c: 254: }
[; ;ipv4.c: 255: return ret;
"255
[e ) _ret ]
[e $UE 58  ]
[; ;ipv4.c: 256: }
"256
[e :UE 58 ]
}
"258
[v _IPV4_Send `(E390 ~T0 @X0 1 ef1`ui ]
"259
{
[; ;ipv4.c: 258: error_msg IPV4_Send(uint16_t payloadLength)
[; ;ipv4.c: 259: {
[e :U _IPV4_Send ]
"258
[v _payloadLength `ui ~T0 @X0 1 r1 ]
"259
[f ]
"260
[v _totalLength `ui ~T0 @X0 1 a ]
"261
[v _cksm `ui ~T0 @X0 1 a ]
"262
[v _ret `E390 ~T0 @X0 1 a ]
[; ;ipv4.c: 260: uint16_t totalLength;
[; ;ipv4.c: 261: uint16_t cksm;
[; ;ipv4.c: 262: error_msg ret;
[; ;ipv4.c: 264: totalLength = 20 + payloadLength;
"264
[e = _totalLength + -> -> 20 `i `ui _payloadLength ]
[; ;ipv4.c: 265: totalLength = ((((uint16_t)totalLength & (uint16_t)0xFF00) >> 8) | (((uint16_t)totalLength & (uint16_t)0x00FF) << 8));
"265
[e = _totalLength | >> & _totalLength -> 65280 `ui -> 8 `i << & _totalLength -> -> 255 `i `ui -> 8 `i ]
[; ;ipv4.c: 268: ETH_Insert((char *)&totalLength, 2, sizeof(ethernetFrame_t) + (size_t)(((char*)&((ipv4Header_t *)1)->length)-1));
"268
[e ( _ETH_Insert (3 , , -> &U _totalLength `*uc -> -> 2 `i `ui + -> # `S4 `ui -> - -> &U . *U -> -> 1 `i `*S6 4 `*uc * -> -> 1 `i `x -> -> # *U -> &U . *U -> -> 1 `i `*S6 4 `*uc `i `x `ui ]
[; ;ipv4.c: 270: cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t),sizeof(ipv4Header_t),0);
"270
[e = _cksm ( _ETH_TxComputeChecksum (3 , , -> # `S4 `ui -> # `S6 `ui -> -> 0 `i `ui ]
[; ;ipv4.c: 272: ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + (size_t)(((char*)&((ipv4Header_t *)1)->headerCksm)-1));
"272
[e ( _ETH_Insert (3 , , -> &U _cksm `*uc -> -> 2 `i `ui + -> # `S4 `ui -> - -> &U . *U -> -> 1 `i `*S6 13 `*uc * -> -> 1 `i `x -> -> # *U -> &U . *U -> -> 1 `i `*S6 13 `*uc `i `x `ui ]
[; ;ipv4.c: 273: ret = ETH_Send();
"273
[e = _ret ( _ETH_Send ..  ]
[; ;ipv4.c: 275: return ret;
"275
[e ) _ret ]
[e $UE 66  ]
[; ;ipv4.c: 276: }
"276
[e :UE 66 ]
}
"278
[v _IPV4_SaveStartPosition `(v ~T0 @X0 1 sf ]
"279
{
[; ;ipv4.c: 278: static void IPV4_SaveStartPosition(void)
[; ;ipv4.c: 279: {
[e :U _IPV4_SaveStartPosition ]
[f ]
[; ;ipv4.c: 280: ipv4StartPosition = ETH_GetReadPtr();
"280
[e = _ipv4StartPosition ( _ETH_GetReadPtr ..  ]
[; ;ipv4.c: 281: }
"281
[e :UE 67 ]
}
"283
[v _IPV4_GetStartPosition `(ui ~T0 @X0 1 ef ]
"284
{
[; ;ipv4.c: 283: uint16_t IPV4_GetStartPosition(void)
[; ;ipv4.c: 284: {
[e :U _IPV4_GetStartPosition ]
[f ]
[; ;ipv4.c: 285: return ipv4StartPosition;
"285
[e ) _ipv4StartPosition ]
[e $UE 68  ]
[; ;ipv4.c: 286: }
"286
[e :UE 68 ]
}
"289
[v _IPV4_GetDatagramLength `(ui ~T0 @X0 1 ef ]
"290
{
[; ;ipv4.c: 289: uint16_t IPV4_GetDatagramLength(void)
[; ;ipv4.c: 290: {
[e :U _IPV4_GetDatagramLength ]
[f ]
[; ;ipv4.c: 291: return ((ipv4Header.length) - sizeof(ipv4Header_t));
"291
[e ) - . _ipv4Header 4 -> # `S6 `ui ]
[e $UE 69  ]
[; ;ipv4.c: 292: }
"292
[e :UE 69 ]
}
